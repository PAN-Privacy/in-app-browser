import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Admob = /** @class */ (function (_super) {
    __extends(Admob, _super);
    function Admob() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Admob.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    Admob.prototype.createBannerView = function (options) { return cordova(this, "createBannerView", {}, arguments); };
    Admob.prototype.showBannerAd = function (show) { return cordova(this, "showBannerAd", {}, arguments); };
    Admob.prototype.destroyBannerView = function () { return cordova(this, "destroyBannerView", {}, arguments); };
    Admob.prototype.requestInterstitialAd = function (options) { return cordova(this, "requestInterstitialAd", {}, arguments); };
    Admob.prototype.showInterstitialAd = function () { return cordova(this, "showInterstitialAd", {}, arguments); };
    Admob.prototype.requestRewardedAd = function (options) { return cordova(this, "requestRewardedAd", {}, arguments); };
    Admob.prototype.showRewardedAd = function () { return cordova(this, "showRewardedAd", {}, arguments); };
    Admob.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLoaded", "element": "document" }, arguments); };
    Admob.prototype.onAdFailedToLoad = function () { return cordova(this, "onAdFailedToLoad", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdFailedToLoad", "element": "document" }, arguments); };
    Admob.prototype.onAdOpened = function () { return cordova(this, "onAdOpened", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdOpened", "element": "document" }, arguments); };
    Admob.prototype.onAdClosed = function () { return cordova(this, "onAdClosed", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdClosed", "element": "document" }, arguments); };
    Admob.prototype.onAdLeftApplication = function () { return cordova(this, "onAdLeftApplication", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLeftApplication", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAd = function () { return cordova(this, "onRewardedAd", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAd", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoStarted = function () { return cordova(this, "onRewardedAdVideoStarted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoStarted", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoCompleted = function () { return cordova(this, "onRewardedAdVideoCompleted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoCompleted", "element": "document" }, arguments); };
    Object.defineProperty(Admob.prototype, "AD_SIZE", {
        get: function () { return cordovaPropertyGet(this, "AD_SIZE"); },
        set: function (value) { cordovaPropertySet(this, "AD_SIZE", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Admob.prototype, "AD_TYPE", {
        get: function () { return cordovaPropertyGet(this, "AD_TYPE"); },
        set: function (value) { cordovaPropertySet(this, "AD_TYPE", value); },
        enumerable: false,
        configurable: true
    });
    Admob.pluginName = "AdMob";
    Admob.plugin = "cordova-admob";
    Admob.pluginRef = "admob";
    Admob.repo = "https://github.com/appfeel/admob-google-cordova";
    Admob.platforms = ["Android", "iOS", "Browser"];
    Admob.decorators = [
        { type: Injectable }
    ];
    return Admob;
}(IonicNativePlugin));
export { Admob };
//# sourceMappingURL=data:application/json;base64,