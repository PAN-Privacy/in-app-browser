var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AllInOneSDK = /** @class */ (function (_super) {
    __extends(AllInOneSDK, _super);
    function AllInOneSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AllInOneSDK.prototype.startTransaction = function (options) { return cordova(this, "startTransaction", {}, arguments); };
    AllInOneSDK.pluginName = "AllInOneSDK";
    AllInOneSDK.plugin = "cordova-paytm-allinonesdk";
    AllInOneSDK.pluginRef = "AllInOneSDK";
    AllInOneSDK.repo = "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git";
    AllInOneSDK.platforms = ["Android", "iOS"];
    return AllInOneSDK;
}(IonicNativePlugin));
export { AllInOneSDK };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FsbC1pbi1vbmUtc2RrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQU9OLE1BQU0sb0JBQW9CLENBQUM7O0lBMENLLCtCQUFpQjs7OztJQVNoRCxzQ0FBZ0IsYUFBQyxPQUEyQjs7Ozs7O3NCQTNEOUM7RUFrRGlDLGlCQUFpQjtTQUFyQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgUGx1Z2luLFxuICBDb3Jkb3ZhLFxuICBDb3Jkb3ZhUHJvcGVydHksXG4gIENvcmRvdmFJbnN0YW5jZSxcbiAgSW5zdGFuY2VQcm9wZXJ0eSxcbiAgSW9uaWNOYXRpdmVQbHVnaW4sXG59IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgQWxsSW5PbmVTREtcbiAqIEBkZXNjcmlwdGlvblxuICogUGF5dG0gQWxsLWluLU9uZSBTREsgcGx1Z2luIGZvciBDb3Jkb3ZhL0lvbmljIEFwcGxpY2F0aW9uc1xuICogUGF5dG0gQWxsLWluLU9uZSBTREsgcHJvdmlkZXMgYSBzd2lmdCwgc2VjdXJlIGFuZCBzZWFtbGVzcyBwYXltZW50IGV4cGVyaWVuY2UgdG8geW91ciB1c2VycyBieSBpbnZva2luZyB0aGUgUGF5dG0gYXBwIChpZiBpbnN0YWxsZWQgb24geW91ciB1c2Vy4oCZcyBzbWFydHBob25lKSB0byBjb21wbGV0ZSBwYXltZW50IGZvciB5b3VyIG9yZGVyLlxuICogUGF5dG0gQWxsLWluLU9uZSBTREsgZW5hYmxlcyBwYXltZW50IGFjY2VwdGFuY2UgdmlhIFBheXRtIHdhbGxldCwgUGF5dG0gUGF5bWVudHMgQmFuaywgc2F2ZWQgRGViaXQvQ3JlZGl0IGNhcmRzLCBOZXQgQmFua2luZywgQkhJTSBVUEkgYW5kIEVNSSBhcyBhdmFpbGFibGUgaW4geW91ciBjdXN0b21lcuKAmXMgUGF5dG0gYWNjb3VudC4gSWYgUGF5dG0gYXBwIGlzIG5vdCBpbnN0YWxsZWQgb24gYSBjdXN0b21lcidzIGRldmljZSwgdGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcHJvY2Vzc2VkIHZpYSB3ZWIgdmlldyB3aXRoaW4gdGhlIEFsbC1pbi1PbmUgU0RLLlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgUGF5dG0gQWxsLWluLU9uZSBTREssIHBsZWFzZSB2aXNpdCBodHRwczovL2RldmVsb3Blci5wYXl0bS5jb20vZG9jcy9hbGwtaW4tb25lLXNkay9oeWJyaWQtYXBwcy9jb3Jkb3ZhL1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQWxsSW5PbmVTREsgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FsbC1pbi1vbmUtc2RrL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxsSW5PbmVTREs6IEFsbEluT25lU0RLKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBGb3IgYmVsb3cgcGFyYW1ldGVycyBzZWUgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXRtLmNvbS9kb2NzL2FsbC1pbi1vbmUtc2RrL2h5YnJpZC1hcHBzL2NvcmRvdmEvKVxuICogbGV0IHBheW1lbnRJbnRlbnQgPSB7IG1pZCA6IG1lcmNoYW50SUQsIG9yZGVySWQ6IG9yZGVySWQsIHR4blRva2VuOiB0cmFuc2FjdGlvblRva2VuLCBhbW91bnQ6IGFtb3VudCwgaXNTdGFnaW5nOiBpc1N0YWdpbmcsIGNhbGxiYWNrVXJsOmNhbGxCYWNrVVJMLCAgcmVzdHJpY3RBcHBJbnZva2U6cmVzdHJpY3RBcHBJbnZva2UgIH1cbiAqXG4gKiB0aGlzLmFsbEluT25lU0RLLnN0YXJ0VHJhbnNhY3Rpb24ocGF5bWVudEludGVudClcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBGb3IgaU9TOlxuICogQWZ0ZXIgYWRkaW5nIHRoZSBwbHVnaW4sIG9wZW4gdGhlIGlPUyBwcm9qZWN0LCB5b3UgY2FuIGZpbmQgdGhlIHNhbWUgYXQgPHByb2plY3ROYW1lPi9wbGF0Zm9ybXMvaW9zLlxuICogSW4gY2FzZSBtZXJjaGFudCBkb27igJl0IGhhdmUgY2FsbGJhY2sgVVJMLCBBZGQgYW4gZW50cnkgaW50byBJbmZvLnBsaXN0IExTQXBwbGljYXRpb25RdWVyaWVzU2NoZW1lcyhBcnJheSkgSXRlbSAwIChTdHJpbmcpLT4gcGF5dG1cbiAqIEFkZCBhIFVSTCBTY2hlbWUg4oCccGF5dG3igJ0r4oCdTUlE4oCdXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FsbEluT25lU0RLJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wYXl0bS1hbGxpbm9uZXNkaycsXG4gIHBsdWdpblJlZjogJ0FsbEluT25lU0RLJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wYXl0bS9wYXl0bS1hbGxpbm9uZXNkay1pb25pYy1jb3Jkb3ZhLmdpdCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbmV4cG9ydCBjbGFzcyBBbGxJbk9uZVNESyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIFBheXRtIEFwcGxpY2F0aW9uIGlzIGF2YWlsYWJsZSBvbiB0aGUgZGV2aWNlLlxuICAgKiBJZiBQYXl0bSBleGlzdHMgdGhlbiBpdCBpbnZva2VzIFBheXRtIEFwcGxpY2F0aW9uIHdpdGggdGhlIHBhcmFtZXRlcnMgc2VudCBhbmQgY3JlYXRlcyBhbiBvcmRlci5cbiAgICogSWYgdGhlIFBheXRtIEFwcGxpY2F0aW9uIGlzIG5vdCBhdmFpbGFibGUgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbnRpbnVlZCBvbiBhIHdlYlZpZXcgd2l0aGluIEFsbC1pbi1PbmUgU0RLLlxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UGF5bWVudEludGVudE1vZGVsfSBUaGVzZSBwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCBhbmQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhbiBvcmRlci5cbiAgICogQHJldHVybiB7UHJvbWlzZTxQYXl0bVJlc3BvbnNlPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGEgdHJhbnNhY3Rpb24gY29tcGxldGVzKGJvdGggZmFpbGVkIGFuZCBzdWNjZXNzZnVsKS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRUcmFuc2FjdGlvbihvcHRpb25zOiBQYXltZW50SW50ZW50TW9kZWwpOiBQcm9taXNlPFBheXRtUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgcmVzcG9uc2UgdGhhdCB3aWxsIGJlIHJlY2lldmVkIHdoZW4gYW55IHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheXRtUmVzcG9uc2Uge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHJlc3BvbnNlOiBzdHJpbmc7IC8vIEEgc3RyaW5naWZpZWQgcmVzcG9uc2Ugb2YgYSBoYXNobWFwIHJldHVybmVkIGZyb20gQWxsLWluLU9uZSBTREtcbn1cblxuLyoqXG4gKiBGb3IgYmVsb3cgcGFyYW1ldGVycyBzZWUgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXRtLmNvbS9kb2NzL2FsbC1pbi1vbmUtc2RrL2h5YnJpZC1hcHBzL2NvcmRvdmEvKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnRlbnRNb2RlbCB7XG4gIG1pZDogc3RyaW5nOyAvLyBNZXJjaGFudCBJRFxuICBvcmRlcklkOiBzdHJpbmc7IC8vIE9yZGVyIElEXG4gIHR4blRva2VuOiBzdHJpbmc7IC8vIFRyYW5zYWN0aW9uIFRva2VuXG4gIGFtb3VudDogc3RyaW5nOyAvLyBBbW91bnRcbiAgaXNTdGFnaW5nOiBib29sZWFuOyAvLyBFbnZpcm9ubWVudFxuICBjYWxsYmFja1VybDogc3RyaW5nOyAvLyBDYWxsYmFjayBVUkxcbiAgcmVzdHJpY3RBcHBJbnZva2U6IGJvb2xlYW47IC8vIFRvIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBwYXl0bSBhcHAgaW52b2NhdGlvblxufVxuIl19