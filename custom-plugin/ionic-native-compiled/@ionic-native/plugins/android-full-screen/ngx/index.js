import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
/**
 * Bit flag values for setSystemUiVisibility()
 * @see  https://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)
 */
export var AndroidSystemUiFlags;
(function (AndroidSystemUiFlags) {
    /** View has requested the system UI (status bar) to be visible (the default). SYSTEM_UI_FLAG_VISIBLE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Visible"] = 0] = "Visible";
    /** View has requested the system UI to enter an unobtrusive "low profile" mode. SYSTEM_UI_FLAG_LOW_PROFILE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LowProfile"] = 1] = "LowProfile";
    /** View has requested that the system navigation be temporarily hidden. SYSTEM_UI_FLAG_HIDE_NAVIGATION */
    AndroidSystemUiFlags[AndroidSystemUiFlags["HideNavigation"] = 2] = "HideNavigation";
    /** View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. SYSTEM_UI_FLAG_FULLSCREEN */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Fullscreen"] = 4] = "Fullscreen";
    /** When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). SYSTEM_UI_FLAG_LAYOUT_STABLE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutStable"] = 256] = "LayoutStable";
    /** View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutHideNavigation"] = 512] = "LayoutHideNavigation";
    /** View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutFullscreen"] = 1024] = "LayoutFullscreen";
    /** View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. SYSTEM_UI_FLAG_IMMERSIVE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Immersive"] = 2048] = "Immersive";
    /** View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. SYSTEM_UI_FLAG_IMMERSIVE_STICKY */
    AndroidSystemUiFlags[AndroidSystemUiFlags["ImmersiveSticky"] = 4096] = "ImmersiveSticky";
    /** Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. SYSTEM_UI_FLAG_LIGHT_STATUS_BAR */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LightStatusBar"] = 8192] = "LightStatusBar";
})(AndroidSystemUiFlags || (AndroidSystemUiFlags = {}));
var AndroidFullScreen = /** @class */ (function (_super) {
    __extends(AndroidFullScreen, _super);
    function AndroidFullScreen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidFullScreen.prototype.isSupported = function () { return cordova(this, "isSupported", {}, arguments); };
    AndroidFullScreen.prototype.isImmersiveModeSupported = function () { return cordova(this, "isImmersiveModeSupported", {}, arguments); };
    AndroidFullScreen.prototype.immersiveWidth = function () { return cordova(this, "immersiveWidth", {}, arguments); };
    AndroidFullScreen.prototype.immersiveHeight = function () { return cordova(this, "immersiveHeight", {}, arguments); };
    AndroidFullScreen.prototype.leanMode = function () { return cordova(this, "leanMode", {}, arguments); };
    AndroidFullScreen.prototype.showSystemUI = function () { return cordova(this, "showSystemUI", {}, arguments); };
    AndroidFullScreen.prototype.showUnderStatusBar = function () { return cordova(this, "showUnderStatusBar", {}, arguments); };
    AndroidFullScreen.prototype.showUnderSystemUI = function () { return cordova(this, "showUnderSystemUI", {}, arguments); };
    AndroidFullScreen.prototype.immersiveMode = function () { return cordova(this, "immersiveMode", {}, arguments); };
    AndroidFullScreen.prototype.setSystemUiVisibility = function (visibility) { return cordova(this, "setSystemUiVisibility", {}, arguments); };
    AndroidFullScreen.pluginName = "AndroidFullScreen";
    AndroidFullScreen.plugin = "cordova-plugin-fullscreen";
    AndroidFullScreen.pluginRef = "AndroidFullScreen";
    AndroidFullScreen.repo = "https://github.com/mesmotronic/cordova-plugin-fullscreen";
    AndroidFullScreen.platforms = ["Android"];
    AndroidFullScreen.decorators = [
        { type: Injectable }
    ];
    return AndroidFullScreen;
}(IonicNativePlugin));
export { AndroidFullScreen };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FuZHJvaWQtZnVsbC1zY3JlZW4vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEU7OztHQUdHO0FBQ0gsTUFBTSxDQUFOLElBQVksb0JBcUJYO0FBckJELFdBQVksb0JBQW9CO0lBQzlCLHdHQUF3RztJQUN4RyxxRUFBVyxDQUFBO0lBQ1gsOEdBQThHO0lBQzlHLDJFQUFjLENBQUE7SUFDZCwwR0FBMEc7SUFDMUcsbUZBQWtCLENBQUE7SUFDbEIsc01BQXNNO0lBQ3RNLDJFQUFjLENBQUE7SUFDZCxxSkFBcUo7SUFDckosaUZBQWtCLENBQUE7SUFDbEIsMEtBQTBLO0lBQzFLLGlHQUEwQixDQUFBO0lBQzFCLGdLQUFnSztJQUNoSywwRkFBdUIsQ0FBQTtJQUN2Qix5SUFBeUk7SUFDekksNEVBQWdCLENBQUE7SUFDaEIsNE1BQTRNO0lBQzVNLHdGQUFzQixDQUFBO0lBQ3RCLHNJQUFzSTtJQUN0SSxzRkFBcUIsQ0FBQTtBQUN2QixDQUFDLEVBckJXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFxQi9COztJQThCc0MscUNBQWlCOzs7O0lBTXRELHVDQUFXO0lBU1gsb0RBQXdCO0lBU3hCLDBDQUFjO0lBU2QsMkNBQWU7SUFTZixvQ0FBUTtJQVNSLHdDQUFZO0lBU1osOENBQWtCO0lBU2xCLDZDQUFpQjtJQVNqQix5Q0FBYTtJQVdiLGlEQUFxQixhQUFDLFVBQWdDOzs7Ozs7O2dCQTFGdkQsVUFBVTs7NEJBekRYO0VBMER1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQml0IGZsYWcgdmFsdWVzIGZvciBzZXRTeXN0ZW1VaVZpc2liaWxpdHkoKVxuICogQHNlZSAgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3Lmh0bWwjc2V0U3lzdGVtVWlWaXNpYmlsaXR5KGludClcbiAqL1xuZXhwb3J0IGVudW0gQW5kcm9pZFN5c3RlbVVpRmxhZ3Mge1xuICAvKiogVmlldyBoYXMgcmVxdWVzdGVkIHRoZSBzeXN0ZW0gVUkgKHN0YXR1cyBiYXIpIHRvIGJlIHZpc2libGUgKHRoZSBkZWZhdWx0KS4gU1lTVEVNX1VJX0ZMQUdfVklTSUJMRSAqL1xuICBWaXNpYmxlID0gMCxcbiAgLyoqIFZpZXcgaGFzIHJlcXVlc3RlZCB0aGUgc3lzdGVtIFVJIHRvIGVudGVyIGFuIHVub2J0cnVzaXZlIFwibG93IHByb2ZpbGVcIiBtb2RlLiBTWVNURU1fVUlfRkxBR19MT1dfUFJPRklMRSAqL1xuICBMb3dQcm9maWxlID0gMSxcbiAgLyoqIFZpZXcgaGFzIHJlcXVlc3RlZCB0aGF0IHRoZSBzeXN0ZW0gbmF2aWdhdGlvbiBiZSB0ZW1wb3JhcmlseSBoaWRkZW4uIFNZU1RFTV9VSV9GTEFHX0hJREVfTkFWSUdBVElPTiAqL1xuICBIaWRlTmF2aWdhdGlvbiA9IDIsXG4gIC8qKiBWaWV3IGhhcyByZXF1ZXN0ZWQgdG8gZ28gaW50byB0aGUgbm9ybWFsIGZ1bGxzY3JlZW4gbW9kZSBzbyB0aGF0IGl0cyBjb250ZW50IGNhbiB0YWtlIG92ZXIgdGhlIHNjcmVlbiB3aGlsZSBzdGlsbCBhbGxvd2luZyB0aGUgdXNlciB0byBpbnRlcmFjdCB3aXRoIHRoZSBhcHBsaWNhdGlvbi4gU1lTVEVNX1VJX0ZMQUdfRlVMTFNDUkVFTiAqL1xuICBGdWxsc2NyZWVuID0gNCxcbiAgLyoqIFdoZW4gdXNpbmcgb3RoZXIgbGF5b3V0IGZsYWdzLCB3ZSB3b3VsZCBsaWtlIGEgc3RhYmxlIHZpZXcgb2YgdGhlIGNvbnRlbnQgaW5zZXRzIGdpdmVuIHRvIGZpdFN5c3RlbVdpbmRvd3MoUmVjdCkuIFNZU1RFTV9VSV9GTEFHX0xBWU9VVF9TVEFCTEUgKi9cbiAgTGF5b3V0U3RhYmxlID0gMjU2LFxuICAvKiogVmlldyB3b3VsZCBsaWtlIGl0cyB3aW5kb3cgdG8gYmUgbGFpZCBvdXQgYXMgaWYgaXQgaGFzIHJlcXVlc3RlZCBTWVNURU1fVUlfRkxBR19ISURFX05BVklHQVRJT04sIGV2ZW4gaWYgaXQgY3VycmVudGx5IGhhc24ndC4gU1lTVEVNX1VJX0ZMQUdfTEFZT1VUX0hJREVfTkFWSUdBVElPTiAqL1xuICBMYXlvdXRIaWRlTmF2aWdhdGlvbiA9IDUxMixcbiAgLyoqIFZpZXcgd291bGQgbGlrZSBpdHMgd2luZG93IHRvIGJlIGxhaWQgb3V0IGFzIGlmIGl0IGhhcyByZXF1ZXN0ZWQgU1lTVEVNX1VJX0ZMQUdfRlVMTFNDUkVFTiwgZXZlbiBpZiBpdCBjdXJyZW50bHkgaGFzbid0LiBTWVNURU1fVUlfRkxBR19MQVlPVVRfRlVMTFNDUkVFTiAqL1xuICBMYXlvdXRGdWxsc2NyZWVuID0gMTAyNCxcbiAgLyoqIFZpZXcgd291bGQgbGlrZSB0byByZW1haW4gaW50ZXJhY3RpdmUgd2hlbiBoaWRpbmcgdGhlIG5hdmlnYXRpb24gYmFyIHdpdGggU1lTVEVNX1VJX0ZMQUdfSElERV9OQVZJR0FUSU9OLiBTWVNURU1fVUlfRkxBR19JTU1FUlNJVkUgKi9cbiAgSW1tZXJzaXZlID0gMjA0OCxcbiAgLyoqIFZpZXcgd291bGQgbGlrZSB0byByZW1haW4gaW50ZXJhY3RpdmUgd2hlbiBoaWRpbmcgdGhlIHN0YXR1cyBiYXIgd2l0aCBTWVNURU1fVUlfRkxBR19GVUxMU0NSRUVOIGFuZC9vciBoaWRpbmcgdGhlIG5hdmlnYXRpb24gYmFyIHdpdGggU1lTVEVNX1VJX0ZMQUdfSElERV9OQVZJR0FUSU9OLiBTWVNURU1fVUlfRkxBR19JTU1FUlNJVkVfU1RJQ0tZICovXG4gIEltbWVyc2l2ZVN0aWNreSA9IDQwOTYsXG4gIC8qKiBSZXF1ZXN0cyB0aGUgc3RhdHVzIGJhciB0byBkcmF3IGluIGEgbW9kZSB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCBsaWdodCBzdGF0dXMgYmFyIGJhY2tncm91bmRzLiBTWVNURU1fVUlfRkxBR19MSUdIVF9TVEFUVVNfQkFSICovXG4gIExpZ2h0U3RhdHVzQmFyID0gODE5Mixcbn1cblxuLyoqXG4gKiBAbmFtZSBBbmRyb2lkIEZ1bGwgU2NyZWVuXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGVuYWJsZXMgZGV2ZWxvcGVycyB0byBvZmZlciB1c2VycyBhIHRydWUgZnVsbCBzY3JlZW4gZXhwZXJpZW5jZSBpbiB0aGVpciBDb3Jkb3ZhIGFuZCBQaG9uZUdhcCBhcHBzIGZvciBBbmRyb2lkLlxuICogVXNpbmcgQW5kcm9pZCA0LjArLCB5b3UgY2FuIHVzZSB0cnVlIGZ1bGwgc2NyZWVuIGluIFwibGVhbiBtb2RlXCIsIHRoZSB3YXkgeW91IHNlZSBpbiBhcHBzIGxpa2UgWW91VHViZSwgZXhwYW5kaW5nIHRoZSBhcHAgcmlnaHQgdG8gdGhlIGVkZ2VzIG9mIHRoZSBzY3JlZW4sIGhpZGluZyB0aGUgc3RhdHVzIGFuZCBuYXZpZ2F0aW9uIGJhcnMgdW50aWwgdGhlIHVzZXIgbmV4dCBpbnRlcmFjdHMuIFRoaXMgaXMgaWRlYWxseSBzdWl0ZWQgdG8gdmlkZW8gb3IgY3V0LXNjZW5lIGNvbnRlbnQuXG4gKiBJbiBBbmRyb2lkIDQuNCssIGhvd2V2ZXIsIHlvdSBjYW4gbm93IGVudGVyIHRydWUgZnVsbCBzY3JlZW4sIGZ1bGx5IGludGVyYWN0aXZlIGltbWVyc2l2ZSBtb2RlLiBJbiB0aGlzIG1vZGUsIHlvdXIgYXBwIHdpbGwgcmVtYWluIGluIHRydWUgZnVsbCBzY3JlZW4gdW50aWwgeW91IGNob29zZSBvdGhlcndpc2U7IHVzZXJzIGNhbiBzd2lwZSBkb3duIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuIHRvIHRlbXBvcmFyaWx5IGRpc3BsYXkgdGhlIHN5c3RlbSBVSS5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQW5kcm9pZEZ1bGxTY3JlZW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FuZHJvaWQtZnVsbC1zY3JlZW4vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuZHJvaWRGdWxsU2NyZWVuOiBBbmRyb2lkRnVsbFNjcmVlbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5hbmRyb2lkRnVsbFNjcmVlbi5pc0ltbWVyc2l2ZU1vZGVTdXBwb3J0ZWQoKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnSW1tZXJzaXZlIG1vZGUgc3VwcG9ydGVkJykpXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQW5kcm9pZEZ1bGxTY3JlZW4nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mdWxsc2NyZWVuJyxcbiAgcGx1Z2luUmVmOiAnQW5kcm9pZEZ1bGxTY3JlZW4nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21lc21vdHJvbmljL2NvcmRvdmEtcGx1Z2luLWZ1bGxzY3JlZW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbmRyb2lkRnVsbFNjcmVlbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIElzIHRoaXMgcGx1Z2luIHN1cHBvcnRlZD9cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNTdXBwb3J0ZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIGltbWVyc2l2ZSBtb2RlIHN1cHBvcnRlZD9cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNJbW1lcnNpdmVNb2RlU3VwcG9ydGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIHNjcmVlbiBpbiBpbW1lcnNpdmUgbW9kZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbW1lcnNpdmVXaWR0aCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBzY3JlZW4gaW4gaW1tZXJzaXZlIG1vZGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW1tZXJzaXZlSGVpZ2h0KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgc3lzdGVtIFVJIHVudGlsIHVzZXIgaW50ZXJhY3RzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsZWFuTW9kZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBzeXN0ZW0gVUkuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3dTeXN0ZW1VSSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRXh0ZW5kIHlvdXIgYXBwIHVuZGVybmVhdGggdGhlIHN0YXR1cyBiYXIgKEFuZHJvaWQgNC40KyBvbmx5KS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvd1VuZGVyU3RhdHVzQmFyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRlbmQgeW91ciBhcHAgdW5kZXJuZWF0aCB0aGUgc3lzdGVtIFVJIChBbmRyb2lkIDQuNCsgb25seSkuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3dVbmRlclN5c3RlbVVJKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIHN5c3RlbSBVSSBhbmQga2VlcCBpdCBoaWRkZW4gKEFuZHJvaWQgNC40KyBvbmx5KS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW1tZXJzaXZlTW9kZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTWFudWFsbHkgc2V0IHRoZSB0aGUgc3lzdGVtIFVJIHRvIGEgY3VzdG9tIG1vZGUuIFRoaXMgbWlycm9ycyB0aGUgQW5kcm9pZCBtZXRob2Qgb2YgdGhlIHNhbWUgbmFtZS4gKEFuZHJvaWQgNC40KyBvbmx5KS5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC92aWV3L1ZpZXcuaHRtbCNzZXRTeXN0ZW1VaVZpc2liaWxpdHkoaW50KVxuICAgKiBAcGFyYW0ge0FuZHJvaWRTeXN0ZW1VaUZsYWdzfSB2aXNpYmlsaXR5IEJpdHdpc2UtT1Igb2YgZmxhZ3MgaW4gQW5kcm9pZFN5c3RlbVVpRmxhZ3NcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0U3lzdGVtVWlWaXNpYmlsaXR5KHZpc2liaWxpdHk6IEFuZHJvaWRTeXN0ZW1VaUZsYWdzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=