import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AndroidNotch = /** @class */ (function (_super) {
    __extends(AndroidNotch, _super);
    function AndroidNotch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidNotch.prototype.hasCutout = function () { return cordova(this, "hasCutout", {}, arguments); };
    AndroidNotch.prototype.getInsetTop = function () { return cordova(this, "getInsetTop", {}, arguments); };
    AndroidNotch.prototype.getInsetRight = function () { return cordova(this, "getInsetRight", {}, arguments); };
    AndroidNotch.prototype.getInsetBottom = function () { return cordova(this, "getInsetBottom", {}, arguments); };
    AndroidNotch.prototype.getInsetLeft = function () { return cordova(this, "getInsetLeft", {}, arguments); };
    AndroidNotch.pluginName = "AndroidNotch";
    AndroidNotch.plugin = "cordova-plugin-android-notch";
    AndroidNotch.pluginRef = "AndroidNotch";
    AndroidNotch.repo = "https://github.com/tobspr/cordova-plugin-android-notch.git";
    AndroidNotch.platforms = ["Android"];
    AndroidNotch.decorators = [
        { type: Injectable }
    ];
    return AndroidNotch;
}(IonicNativePlugin));
export { AndroidNotch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FuZHJvaWQtbm90Y2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBaUR0QyxnQ0FBaUI7Ozs7SUFPakQsZ0NBQVM7SUFVVCxrQ0FBVztJQVVYLG9DQUFhO0lBU2IscUNBQWM7SUFTZCxtQ0FBWTs7Ozs7OztnQkE5Q2IsVUFBVTs7dUJBakRYO0VBa0RrQyxpQkFBaUI7U0FBdEMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEFuZHJvaWQgTm90Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyBkZXZlbG9wZXJzIHRvIGdldCB0aGUgY3V0b3V0IGFuZCBhbmRyb2lkIGRldmljZXMgaW5zZXQgc2l6ZXNcbiAqIEl0IGlzIGJhc2VkIG9uIHRoZSBjb3Jkb3ZhIHBsdWdpbiBkZXZlbG9wZWQgYnkgQHRvYnNwcjogaHR0cHM6Ly9naXRodWIuY29tL3RvYnNwci9jb3Jkb3ZhLXBsdWdpbi1hbmRyb2lkLW5vdGNoXG4gKiBUaGlzIHBsdWdpbiB3b3JrcyBvbiBhbGwgYW5kcm9pZCB2ZXJzaW9ucywgYnV0IHdlIGNhbiBvbmx5IGRldGVjdCBub3RjaGVzIHN0YXJ0aW5nIGZyb20gQW5kcm9pZCA5LlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQW5kcm9pZE5vdGNoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9hbmRyb2lkLW5vdGNoL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5kcm9pZE5vdGNoOiBBbmRyb2lkTm90Y2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmFuZHJvaWROb3RjaC5oYXNDdXRvdXQoKVxuICogICAgLnRoZW4oKHB4OiBudW1iZXIpID0+IGNvbnNvbGUubG9nKCdJbnNldCBzaXplOiAnKSwgcHgpXG4gKiAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyb3IpKVxuICpcbiAqIHRoaXMuYW5kcm9pZE5vdGNoLmdldEluc2V0VG9wKClcbiAqICAgIC50aGVuKChweDogbnVtYmVyKSA9PiBjb25zb2xlLmxvZygnSW5zZXQgc2l6ZTogJyksIHB4KVxuICogICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKSlcbiAqXG4gKiB0aGlzLmFuZHJvaWROb3RjaC5nZXRJbnNldFJpZ2h0KClcbiAqICAgIC50aGVuKChweDogbnVtYmVyKSA9PiBjb25zb2xlLmxvZygnSW5zZXQgc2l6ZTogJyksIHB4KVxuICogICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKSlcbiAqXG4gKiB0aGlzLmFuZHJvaWROb3RjaC5nZXRJbnNldEJvdHRvbSgpXG4gKiAgICAudGhlbigocHg6IG51bWJlcikgPT4gY29uc29sZS5sb2coJ0luc2V0IHNpemU6ICcpLCBweClcbiAqICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnJvcikpXG4gKlxuICogdGhpcy5hbmRyb2lkTm90Y2guZ2V0SW5zZXRMZWZ0KClcbiAqICAgIC50aGVuKChweDogbnVtYmVyKSA9PiBjb25zb2xlLmxvZygnSW5zZXQgc2l6ZTogJyksIHB4KVxuICogICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKSlcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBbmRyb2lkTm90Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hbmRyb2lkLW5vdGNoJyxcbiAgcGx1Z2luUmVmOiAnQW5kcm9pZE5vdGNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS90b2JzcHIvY29yZG92YS1wbHVnaW4tYW5kcm9pZC1ub3RjaC5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbmRyb2lkTm90Y2ggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFuZHJvaWQgZGV2aWNlIGhhcyBjdXRvdXRcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGFzQ3V0b3V0KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBoZWlndGggb2YgdGhlIHRvcCBpbnNldFxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEluc2V0VG9wKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhlaWd0aCBvZiB0aGUgcmlnaHQgaW5zZXRcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRJbnNldFJpZ2h0KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhlaWd0aCBvZiB0aGUgYm90dG9tIGluc2V0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0SW5zZXRCb3R0b20oKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGVpZ3RoIG9mIHRoZSBsZWZ0IGluc2V0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0SW5zZXRMZWZ0KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=