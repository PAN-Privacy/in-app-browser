import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AppCenterAnalytics = /** @class */ (function (_super) {
    __extends(AppCenterAnalytics, _super);
    function AppCenterAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterAnalytics.prototype.trackEvent = function (eventName, properties) { return cordova(this, "trackEvent", {}, arguments); };
    AppCenterAnalytics.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterAnalytics.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterAnalytics.pluginName = "AppCenterAnalytics";
    AppCenterAnalytics.plugin = "cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.pluginRef = "AppCenter.Analytics";
    AppCenterAnalytics.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.platforms = ["Android", "iOS"];
    AppCenterAnalytics.decorators = [
        { type: Injectable }
    ];
    return AppCenterAnalytics;
}(IonicNativePlugin));
export { AppCenterAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1jZW50ZXItYW5hbHl0aWNzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTJDaEMsc0NBQWlCOzs7O0lBVXZELHVDQUFVLGFBQUMsU0FBaUIsRUFBRSxVQUFxQjtJQVNuRCxzQ0FBUztJQVVULHVDQUFVLGFBQUMsWUFBcUI7Ozs7Ozs7Z0JBOUJqQyxVQUFVOzs2QkEzQ1g7RUE0Q3dDLGlCQUFpQjtTQUE1QyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTdHJpbmdNYXAge1xuICBbczogc3RyaW5nXTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEFwcCBDZW50ZXIgQW5hbHl0aWNzXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFwcCBDZW50ZXIgQW5hbHl0aWNzIGhlbHBzIHlvdSB1bmRlcnN0YW5kIHVzZXIgYmVoYXZpb3IgYW5kIGN1c3RvbWVyIGVuZ2FnZW1lbnQgdG8gaW1wcm92ZSB5b3VyIGFwcC5cbiAqIFRoZSBTREsgYXV0b21hdGljYWxseSBjYXB0dXJlcyBzZXNzaW9uIGNvdW50IGFuZCBkZXZpY2UgcHJvcGVydGllcyBsaWtlIG1vZGVsLCBPUyB2ZXJzaW9uLCBldGMuXG4gKiBZb3UgY2FuIGRlZmluZSB5b3VyIG93biBjdXN0b20gZXZlbnRzIHRvIG1lYXN1cmUgdGhpbmdzIHRoYXQgbWF0dGVyIHRvIHlvdS5cbiAqIEFsbCB0aGUgaW5mb3JtYXRpb24gY2FwdHVyZWQgaXMgYXZhaWxhYmxlIGluIHRoZSBBcHAgQ2VudGVyIHBvcnRhbCBmb3IgeW91IHRvIGFuYWx5emUgdGhlIGRhdGEuXG4gKlxuICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hcHBjZW50ZXIvc2RrL2FuYWx5dGljcy9jb3Jkb3ZhXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcHBDZW50ZXJBbmFseXRpY3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FwcC1jZW50ZXItYW5hbHl0aWNzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ2VudGVyQW5hbHl0aWNzOiBBcHBDZW50ZXJBbmFseXRpY3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuYXBwQ2VudGVyQW5hbHl0aWNzLnNldEVuYWJsZWQodHJ1ZSkudGhlbigoKSA9PiB7XG4gKiAgICB0aGlzLmFwcENlbnRlckFuYWx5dGljcy50cmFja0V2ZW50KCdNeSBFdmVudCcsIHsgVEVTVDogJ0hFTExPX1dPUkxEJyB9KS50aGVuKCgpID0+IHtcbiAqICAgICAgICBjb25zb2xlLmxvZygnQ3VzdG9tIGV2ZW50IHRyYWNrZWQnKTtcbiAqICAgIH0pO1xuICogfSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaW5nTWFwXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQXBwQ2VudGVyQW5hbHl0aWNzJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWFuYWx5dGljcycsXG4gIHBsdWdpblJlZjogJ0FwcENlbnRlci5BbmFseXRpY3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9hcHBjZW50ZXItc2RrLWNvcmRvdmEvdHJlZS9tYXN0ZXIvY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWFuYWx5dGljcycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBDZW50ZXJBbmFseXRpY3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUcmFja3MgYW4gY3VzdG9tIGV2ZW50LlxuICAgKiBZb3UgY2FuIHNlbmQgdXAgdG8gMjAwIGRpc3RpbmN0IGV2ZW50IG5hbWVzLiBBbHNvLCB0aGVyZSBpcyBhIG1heGltdW0gbGltaXQgb2YgMjU2IGNoYXJhY3RlcnMgcGVyIGV2ZW50IG5hbWVcbiAgICogYW5kIDY0IGNoYXJhY3RlcnMgcGVyIGV2ZW50IHByb3BlcnR5IG5hbWUgYW5kIGV2ZW50IHByb3BlcnR5IHZhbHVlLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSAge1N0cmluZ01hcH0gcHJvcGVydGllcyBFdmVudCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB0cmFja0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBwcm9wZXJ0aWVzOiBTdHJpbmdNYXApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgQXBwIENlbnRlciBBbmFseXRpY3MgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBBcHAgQ2VudGVyIEFuYWx5dGljcyBhdCBydW50aW1lXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3VsZEVuYWJsZSBTZXQgdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEVuYWJsZWQoc2hvdWxkRW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=