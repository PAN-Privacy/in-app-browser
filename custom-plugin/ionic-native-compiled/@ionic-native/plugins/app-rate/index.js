var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
export var AppRateReviewTypeIos;
(function (AppRateReviewTypeIos) {
    /**
     * Write review directly in your application (iOS 10.3+), limited to 3 prompts per year.
     * Will fallback to 'AppStoreReview' for other iOS versions
     */
    AppRateReviewTypeIos["InAppReview"] = "InAppReview";
    /**
     * Open the store within the app. Use this option as an alternative to inAppReview to avoid the rate action from doing nothing
     */
    AppRateReviewTypeIos["AppStoreReview"] = "AppStoreReview";
    /**
     * Open the store using the openUrl preference (defaults to InAppBrowser). Be advised that WKWebView might not open the app store links
     */
    AppRateReviewTypeIos["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeIos || (AppRateReviewTypeIos = {}));
export var AppRateReviewTypeAndroid;
(function (AppRateReviewTypeAndroid) {
    /**
     * Write review directly in your application. Will fallback to InAppBrowser if not available
     */
    AppRateReviewTypeAndroid["InAppReview"] = "InAppReview";
    /**
     *  Open the store using the openUrl preference (defaults to InAppBrowser)
     */
    AppRateReviewTypeAndroid["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeAndroid || (AppRateReviewTypeAndroid = {}));
export var AppRatePromptType;
(function (AppRatePromptType) {
    /**
     * Prompt asking to rate the app.
     */
    AppRatePromptType["AppRatingPrompt"] = "AppRatingPrompt";
    /**
     * Prompt asking to rate the app within the store.
     */
    AppRatePromptType["StoreRatingPrompt"] = "StoreRatingPrompt";
    /**
     * Prompt asking to give feedback.
     */
    AppRatePromptType["FeedbackPrompt"] = "FeedbackPrompt";
})(AppRatePromptType || (AppRatePromptType = {}));
var AppRateOriginal = /** @class */ (function (_super) {
    __extends(AppRateOriginal, _super);
    function AppRateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRateOriginal.prototype.setPreferences = function (pref) { return cordova(this, "setPreferences", {}, arguments); };
    AppRateOriginal.prototype.getPreferences = function () { return cordova(this, "getPreferences", {}, arguments); };
    AppRateOriginal.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRateOriginal.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRateOriginal.prototype, "preferences", {
        get: function () { return cordovaPropertyGet(this, "preferences"); },
        set: function (value) { cordovaPropertySet(this, "preferences", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AppRateOriginal.prototype, "locales", {
        get: function () { return cordovaPropertyGet(this, "locales"); },
        set: function (value) { cordovaPropertySet(this, "locales", value); },
        enumerable: false,
        configurable: true
    });
    AppRateOriginal.pluginName = "AppRate";
    AppRateOriginal.plugin = "cordova-plugin-apprate";
    AppRateOriginal.pluginRef = "AppRate";
    AppRateOriginal.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRateOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    return AppRateOriginal;
}(IonicNativePlugin));
var AppRate = new AppRateOriginal();
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1yYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHNFQUF1RCxNQUFNLG9CQUFvQixDQUFDO0FBRXpGLE1BQU0sQ0FBTixJQUFZLG9CQWNYO0FBZEQsV0FBWSxvQkFBb0I7SUFDOUI7OztPQUdHO0lBQ0gsbURBQTJCLENBQUE7SUFDM0I7O09BRUc7SUFDSCx5REFBaUMsQ0FBQTtJQUNqQzs7T0FFRztJQUNILHFEQUE2QixDQUFBO0FBQy9CLENBQUMsRUFkVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBYy9CO0FBRUQsTUFBTSxDQUFOLElBQVksd0JBU1g7QUFURCxXQUFZLHdCQUF3QjtJQUNsQzs7T0FFRztJQUNILHVEQUEyQixDQUFBO0lBQzNCOztPQUVHO0lBQ0gseURBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQVRXLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFTbkM7QUFFRCxNQUFNLENBQU4sSUFBWSxpQkFlWDtBQWZELFdBQVksaUJBQWlCO0lBQzNCOztPQUVHO0lBQ0gsd0RBQW1DLENBQUE7SUFFbkM7O09BRUc7SUFDSCw0REFBdUMsQ0FBQTtJQUV2Qzs7T0FFRztJQUNILHNEQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFmVyxpQkFBaUIsS0FBakIsaUJBQWlCLFFBZTVCOztJQXlONEIsMkJBQWlCOzs7O0lBbUI1QyxnQ0FBYyxhQUFDLElBQXdCO0lBU3ZDLGdDQUFjO0lBU2QsaUNBQWUsYUFBQyxXQUFxQjtJQVFyQyxvQ0FBa0I7MEJBdkNsQixnQ0FBVzs7Ozs7OzBCQU1YLDRCQUFPOzs7Ozs7Ozs7OztrQkFsUlQ7RUFzUTZCLGlCQUFpQjtTQUFqQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGVudW0gQXBwUmF0ZVJldmlld1R5cGVJb3Mge1xuICAvKipcbiAgICogV3JpdGUgcmV2aWV3IGRpcmVjdGx5IGluIHlvdXIgYXBwbGljYXRpb24gKGlPUyAxMC4zKyksIGxpbWl0ZWQgdG8gMyBwcm9tcHRzIHBlciB5ZWFyLlxuICAgKiBXaWxsIGZhbGxiYWNrIHRvICdBcHBTdG9yZVJldmlldycgZm9yIG90aGVyIGlPUyB2ZXJzaW9uc1xuICAgKi9cbiAgSW5BcHBSZXZpZXcgPSAnSW5BcHBSZXZpZXcnLFxuICAvKipcbiAgICogT3BlbiB0aGUgc3RvcmUgd2l0aGluIHRoZSBhcHAuIFVzZSB0aGlzIG9wdGlvbiBhcyBhbiBhbHRlcm5hdGl2ZSB0byBpbkFwcFJldmlldyB0byBhdm9pZCB0aGUgcmF0ZSBhY3Rpb24gZnJvbSBkb2luZyBub3RoaW5nXG4gICAqL1xuICBBcHBTdG9yZVJldmlldyA9ICdBcHBTdG9yZVJldmlldycsXG4gIC8qKlxuICAgKiBPcGVuIHRoZSBzdG9yZSB1c2luZyB0aGUgb3BlblVybCBwcmVmZXJlbmNlIChkZWZhdWx0cyB0byBJbkFwcEJyb3dzZXIpLiBCZSBhZHZpc2VkIHRoYXQgV0tXZWJWaWV3IG1pZ2h0IG5vdCBvcGVuIHRoZSBhcHAgc3RvcmUgbGlua3NcbiAgICovXG4gIEluQXBwQnJvd3NlciA9ICdJbkFwcEJyb3dzZXInLFxufVxuXG5leHBvcnQgZW51bSBBcHBSYXRlUmV2aWV3VHlwZUFuZHJvaWQge1xuICAvKipcbiAgICogV3JpdGUgcmV2aWV3IGRpcmVjdGx5IGluIHlvdXIgYXBwbGljYXRpb24uIFdpbGwgZmFsbGJhY2sgdG8gSW5BcHBCcm93c2VyIGlmIG5vdCBhdmFpbGFibGVcbiAgICovXG4gIEluQXBwUmV2aWV3ID0gJ0luQXBwUmV2aWV3JyxcbiAgLyoqXG4gICAqICBPcGVuIHRoZSBzdG9yZSB1c2luZyB0aGUgb3BlblVybCBwcmVmZXJlbmNlIChkZWZhdWx0cyB0byBJbkFwcEJyb3dzZXIpXG4gICAqL1xuICBJbkFwcEJyb3dzZXIgPSAnSW5BcHBCcm93c2VyJyxcbn1cblxuZXhwb3J0IGVudW0gQXBwUmF0ZVByb21wdFR5cGUge1xuICAvKipcbiAgICogUHJvbXB0IGFza2luZyB0byByYXRlIHRoZSBhcHAuXG4gICAqL1xuICBBcHBSYXRpbmdQcm9tcHQgPSAnQXBwUmF0aW5nUHJvbXB0JyxcblxuICAvKipcbiAgICogUHJvbXB0IGFza2luZyB0byByYXRlIHRoZSBhcHAgd2l0aGluIHRoZSBzdG9yZS5cbiAgICovXG4gIFN0b3JlUmF0aW5nUHJvbXB0ID0gJ1N0b3JlUmF0aW5nUHJvbXB0JyxcblxuICAvKipcbiAgICogUHJvbXB0IGFza2luZyB0byBnaXZlIGZlZWRiYWNrLlxuICAgKi9cbiAgRmVlZGJhY2tQcm9tcHQgPSAnRmVlZGJhY2tQcm9tcHQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVQcmVmZXJlbmNlcyB7XG4gIC8qKlxuICAgKiBDdXN0b20gQkNQIDQ3IGxhbmd1YWdlIHRhZ1xuICAgKi9cbiAgdXNlTGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBhcHBsaWNhdGlvbiB0aXRsZVxuICAgKi9cbiAgZGlzcGxheUFwcE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNob3cgZGlhbG9nIGFnYWluIHdoZW4gYXBwbGljYXRpb24gdmVyc2lvbiB3aWxsIGJlIHVwZGF0ZWQuIERlZmF1bHRzIHRvIGB0cnVlYFxuICAgKi9cbiAgcHJvbXB0QWdhaW5Gb3JFYWNoTmV3VmVyc2lvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIGNvdW50IG9mIHJ1bnMgb2YgYXBwbGljYXRpb24gYmVmb3JlIGRpYWxvZyB3aWxsIGJlIGRpc3BsYXllZC4gRGVmYXVsdHMgdG8gYDNgXG4gICAqL1xuICB1c2VzVW50aWxQcm9tcHQ/OiBudW1iZXI7XG5cbiAgcmV2aWV3VHlwZT86IHtcbiAgICAvKipcbiAgICAgKiB0aGUgdHlwZSBvZiByZXZpZXcgZGlzcGxheSB0byBzaG93IHRoZSB1c2VyIG9uIGlPU1xuICAgICAqIERlZmF1bHQ6IEFwcFN0b3JlUmV2aWV3XG4gICAgICovXG4gICAgaW9zPzogQXBwUmF0ZVJldmlld1R5cGVJb3M7XG4gICAgLyoqXG4gICAgICogdGhlIHR5cGUgb2YgcmV2aWV3IGRpc3BsYXkgdG8gc2hvdyB0aGUgdXNlciBvbiBBbmRyb2lkXG4gICAgICogRGVmYXVsdDogSW5BcHBCcm93c2VyXG4gICAgICovXG4gICAgYW5kcm9pZD86IEFwcFJhdGVSZXZpZXdUeXBlQW5kcm9pZDtcbiAgfTtcblxuICAvKipcbiAgICogU2ltcGxlIE1vZGUgdG8gZGlzcGxheSB0aGUgcmF0ZSBkaWFsb2cgZGlyZWN0bHkgYW5kIGJ5cGFzcyBuZWdhdGl2ZSBmZWVkYmFjayBmaWx0ZXJpbmcgZmxvd1xuICAgKi9cbiAgc2ltcGxlTW9kZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERpc2FibGluZyB3b3VsZCBza2lwIGRpc3BsYXlpbmcgYSByYXRlIGRpYWxvZyBpZiBpbiBhcHAgcmV2aWV3IGlzIHNldCBhbmQgYXZhaWxhYmxlLiBEZWZhdWx0cyB0byBgdHJ1ZWBcbiAgICovXG4gIHNob3dQcm9tcHRGb3JJbkFwcFJldmlldz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIGxlYXZlIGFwcCBvciBubyB3aGVuIGFwcGxpY2F0aW9uIHBhZ2Ugb3BlbmVkIGluIGFwcCBzdG9yZSAobm93IHN1cHBvcnRlZCBvbmx5IGZvciBpT1MpLiBEZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICBpbkFwcFJldmlldz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIHVzZSBjdXN0b20gdmlldyBmb3IgcmF0ZSBkaWFsb2cuIERlZmF1bHRzIHRvIGBmYWxzZWBcbiAgICovXG4gIHVzZUN1c3RvbVJhdGVEaWFsb2c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gbG9jYWxlIG9iamVjdFxuICAgKi9cbiAgY3VzdG9tTG9jYWxlPzogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcblxuICAvKipcbiAgICogQ2FsbGJhY2tzIGZvciBldmVudHNcbiAgICovXG4gIGNhbGxiYWNrcz86IEFwcFJhdGVDYWxsYmFja3M7XG5cbiAgLyoqXG4gICAqIEFwcCBTdG9yZSBVUkxTXG4gICAqL1xuICBzdG9yZUFwcFVSTD86IEFwcFVybHM7XG5cbiAgLyoqXG4gICAqIE9wZW4gVVJMIGZ1bmN0aW9uXG4gICAqL1xuICBvcGVuVXJsPzogKHVybDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xuICAvKiogVGl0bGUgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIE1lc3NhZ2UgKi9cbiAgbWVzc2FnZT86IHN0cmluZztcblxuICAvKiogQ2FuY2VsIGJ1dHRvbiBsYWJlbCAqL1xuICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTGF0ZXIgYnV0dG9uIGxhYmVsICovXG4gIGxhdGVyQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFJhdGUgYnV0dG9uIGxhYmVsICovXG4gIHJhdGVCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogWWVzIGJ1dHRvbiBsYWJlbCAqL1xuICB5ZXNCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTm8gYnV0dG9uIGxhYmVsICovXG4gIG5vQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIEFwcCByYXRlIHByb21wdCB0aXRsZSAqL1xuICBhcHBSYXRlUHJvbXB0VGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIEZlZWRiYWNrIHByb21wdCB0aXRsZSAqL1xuICBmZWVkYmFja1Byb21wdFRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xuICBhcHBSYXRlUHJvbXB0TWVzc2FnZT86IHN0cmluZztcblxuICAvKiogRmVlZGJhY2sgcHJvbXB0IG1lc3NhZ2UgKi9cbiAgZmVlZGJhY2tQcm9tcHRNZXNzYWdlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVMb2NhbGVzIHtcbiAgYWRkTG9jYWxlKGxvY2FsZU9iamVjdDogQXBwUmF0ZUN1c3RvbUxvY2FsZSk6IEFwcFJhdGVDdXN0b21Mb2NhbGU7XG5cbiAgZ2V0TG9jYWxlKGxhbmd1YWdlOiBzdHJpbmcsIGFwcGxpY2F0aW9uVGl0bGU/OiBzdHJpbmcsIGN1c3RvbUxvY2FsZT86IEFwcFJhdGVDdXN0b21Mb2NhbGUpO1xuXG4gIGdldExvY2FsZXNOYW1lcygpOiB7IFtwcm9wOiBzdHJpbmddOiBBcHBSYXRlQ3VzdG9tTG9jYWxlIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwUmF0ZUNhbGxiYWNrcyB7XG4gIC8qKlxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiByYXRlLWRpYWxvZyBidXR0b25zXG4gICAqL1xuICBvbkJ1dHRvbkNsaWNrZWQ/OiAoYnV0dG9uSW5kZXg6IG51bWJlciwgYnV0dG9uTGFiZWw6IHN0cmluZywgcHJvbXB0VHlwZTogQXBwUmF0ZVByb21wdFR5cGUpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZ1xuICAgKi9cbiAgb25SYXRlRGlhbG9nU2hvdz86IChyYXRlQ2FsbGJhY2s6IChidXR0b25JbmRleDogbnVtYmVyKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gbmVnYXRpdmUgZmVlZGJhY2tcbiAgICovXG4gIGhhbmRsZU5lZ2F0aXZlRmVlZGJhY2s/OiAoKSA9PiB2b2lkO1xuXG4gIGRvbmU/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFVybHMge1xuICAvKipcbiAgICogYXBwbGljYXRpb24gaWQgaW4gQXBwU3RvcmVcbiAgICovXG4gIGlvcz86IHN0cmluZztcblxuICAvKipcbiAgICogYXBwbGljYXRpb24gVVJMIGluIEdvb2dsZVBsYXlcbiAgICovXG4gIGFuZHJvaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBXaW5kb3dzIFN0b3JlXG4gICAqL1xuICB3aW5kb3dzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gQXBwV29ybGRcbiAgICovXG4gIGJsYWNrYmVycnk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBXaW5kb3dzU3RvcmVcbiAgICovXG4gIHdpbmRvd3M4Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEFwcCBSYXRlXG4gKiBAcHJlbWllciBhcHAtcmF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQXBwUmF0ZSBwbHVnaW4gbWFrZXMgaXQgZWFzeSB0byBwcm9tcHQgdGhlIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCwgZWl0aGVyIG5vdywgbGF0ZXIsIG9yIG5ldmVyLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQXBwUmF0ZSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQXBwUmF0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYXBwLXJhdGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcFJhdGU6IEFwcFJhdGUpIHsgfVxuICpcbiAqIC4uLlxuICogLy8gc2V0IGNlcnRhaW4gcHJlZmVyZW5jZXNcbiAqIHRoaXMuYXBwUmF0ZS5wcmVmZXJlbmNlcy5zdG9yZUFwcFVSTCA9IHtcbiAqICAgaW9zOiAnPGFwcF9pZD4nLFxuICogICBhbmRyb2lkOiAnbWFya2V0Oi8vZGV0YWlscz9pZD08cGFja2FnZV9uYW1lPicsXG4gKiAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcbiAqIH1cbiAqXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKHRydWUpO1xuICpcbiAqIC8vIG9yLCBvdmVycmlkZSB0aGUgd2hvbGUgcHJlZmVyZW5jZXMgb2JqZWN0XG4gKiB0aGlzLmFwcFJhdGUucHJlZmVyZW5jZXMgPSB7XG4gKiAgIHVzZXNVbnRpbFByb21wdDogMyxcbiAqICAgc3RvcmVBcHBVUkw6IHtcbiAqICAgIGlvczogJzxhcHBfaWQ+JyxcbiAqICAgIGFuZHJvaWQ6ICdtYXJrZXQ6Ly9kZXRhaWxzP2lkPTxwYWNrYWdlX25hbWU+JyxcbiAqICAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcbiAqICAgfVxuICogfVxuICpcbiAqIHRoaXMuYXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoZmFsc2UpO1xuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIEFwcFJhdGVQcmVmZXJlbmNlc1xuICogQXBwVXJsc1xuICogQXBwUmF0ZUNhbGxiYWNrc1xuICogQXBwUmF0ZUN1c3RvbUxvY2FsXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FwcFJhdGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlJyxcbiAgcGx1Z2luUmVmOiAnQXBwUmF0ZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcHVzaGFuZHBsYXkvY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwUmF0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB2YXJpb3VzIHNldHRpbmdzIGZvciB0aGUgUmF0aW5nIFZpZXcuXG4gICAqIFNlZSB0YWJsZSBiZWxvdyBmb3Igb3B0aW9uc1xuICAgKi9cbiAgQENvcmRvdmFQcm9wZXJ0eSgpXG4gIHByZWZlcmVuY2VzOiBBcHBSYXRlUHJlZmVyZW5jZXM7XG5cbiAgLyoqXG4gICAqIE1hbmFnZXIgY3VzdG9tIGxvY2FsZXNcbiAgICovXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBsb2NhbGVzOiBBcHBSYXRlTG9jYWxlcztcblxuICAvKipcbiAgICogU2V0IHByZWZlcmVuY2VzXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRQcmVmZXJlbmNlcyhwcmVmOiBBcHBSYXRlUHJlZmVyZW5jZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHByZWZlcmVuY2VzXG4gICAqIEByZXR1cm4gQXBwUmF0ZVByZWZlcmVuY2VzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFByZWZlcmVuY2VzKCk6IEFwcFJhdGVQcmVmZXJlbmNlcyB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgZm9yIHJhdGluZ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGltbWVkaWF0ZWx5ICBTaG93IHRoZSByYXRpbmcgcHJvbXB0IGltbWVkaWF0ZWx5LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcm9tcHRGb3JSYXRpbmcoaW1tZWRpYXRlbHk/OiBib29sZWFuKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEltbWVkaWF0ZWx5IHNlbmQgdGhlIHVzZXIgdG8gdGhlIGFwcCBzdG9yZSByYXRpbmcgcGFnZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBuYXZpZ2F0ZVRvQXBwU3RvcmUoKTogdm9pZCB7fVxufVxuIl19