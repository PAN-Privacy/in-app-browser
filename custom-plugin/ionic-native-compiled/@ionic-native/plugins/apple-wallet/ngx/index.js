import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AppleWallet = /** @class */ (function (_super) {
    __extends(AppleWallet, _super);
    function AppleWallet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppleWallet.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    AppleWallet.prototype.checkCardEligibility = function (primaryAccountIdentifier) { return cordova(this, "checkCardEligibility", {}, arguments); };
    AppleWallet.prototype.checkCardEligibilityBySuffix = function (cardSuffix) { return cordova(this, "checkCardEligibilityBySuffix", {}, arguments); };
    AppleWallet.prototype.checkPairedDevices = function () { return cordova(this, "checkPairedDevices", {}, arguments); };
    AppleWallet.prototype.checkPairedDevicesBySuffix = function (cardSuffix) { return cordova(this, "checkPairedDevicesBySuffix", {}, arguments); };
    AppleWallet.prototype.startAddPaymentPass = function (data) { return cordova(this, "startAddPaymentPass", {}, arguments); };
    AppleWallet.prototype.completeAddPaymentPass = function (data) { return cordova(this, "completeAddPaymentPass", {}, arguments); };
    AppleWallet.pluginName = "AppleWallet";
    AppleWallet.plugin = "cordova-apple-wallet";
    AppleWallet.pluginRef = "AppleWallet";
    AppleWallet.repo = "https://github.com/tomavic/cordova-apple-wallet";
    AppleWallet.platforms = ["iOS"];
    AppleWallet.decorators = [
        { type: Injectable }
    ];
    return AppleWallet;
}(IonicNativePlugin));
export { AppleWallet };
//# sourceMappingURL=data:application/json;base64,