import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance } from '@ionic-native/core';
export var UploadState;
(function (UploadState) {
    UploadState["UPLOADED"] = "UPLOADED";
    UploadState["FAILED"] = "FAILED";
    UploadState["UPLOADING"] = "UPLOADING";
    UploadState["INITIALIZED"] = "INITIALIZED";
})(UploadState || (UploadState = {}));
var FileTransferManager = /** @class */ (function () {
    function FileTransferManager(options) {
        this._objectInstance = window.FileTransferManager.init(options.config, options.callBack);
    }
    FileTransferManager.prototype.startUpload = function (payload) { return cordovaInstance(this, "startUpload", {}, arguments); };
    FileTransferManager.prototype.removeUpload = function (id) { return cordovaInstance(this, "removeUpload", {}, arguments); };
    FileTransferManager.prototype.acknowledgeEvent = function (id) { return cordovaInstance(this, "acknowledgeEvent", {}, arguments); };
    FileTransferManager.prototype.destroy = function () { return cordovaInstance(this, "destroy", {}, arguments); };
    return FileTransferManager;
}());
export { FileTransferManager };
var BackgroundUpload = /** @class */ (function (_super) {
    __extends(BackgroundUpload, _super);
    function BackgroundUpload() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.FileTransferManager = FileTransferManager;
        return _this;
    }
    BackgroundUpload.prototype.init = function (options) {
        return new FileTransferManager(options);
    };
    BackgroundUpload.pluginName = "BackgroundUpload";
    BackgroundUpload.plugin = "cordova-plugin-background-upload";
    BackgroundUpload.pluginRef = "FileTransferManager";
    BackgroundUpload.repo = "https://github.com/spoonconsulting/cordova-plugin-background-upload";
    BackgroundUpload.install = "ionic cordova plugin add cordova-plugin-background-upload";
    BackgroundUpload.platforms = ["Android", "iOS"];
    BackgroundUpload.decorators = [
        { type: Injectable }
    ];
    return BackgroundUpload;
}(IonicNativePlugin));
export { BackgroundUpload };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhY2tncm91bmQtdXBsb2FkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHNDQUE4QyxNQUFNLG9CQUFvQixDQUFDO0FBSWhGLE1BQU0sQ0FBTixJQUFZLFdBS1g7QUFMRCxXQUFZLFdBQVc7SUFDckIsb0NBQXFCLENBQUE7SUFDckIsZ0NBQWlCLENBQUE7SUFDakIsc0NBQXVCLENBQUE7SUFDdkIsMENBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUxXLFdBQVcsS0FBWCxXQUFXLFFBS3RCOztJQXdDQyw2QkFBWSxPQUFtQjtRQUM3QixJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUdELHlDQUFXLGFBQUMsT0FBMEI7SUFLdEMsMENBQVksYUFBQyxFQUFPO0lBS3BCLDhDQUFnQixhQUFDLEVBQVU7SUFLM0IscUNBQU87OEJBdEVUOzs7O0lBeUdzQyxvQ0FBaUI7OztRQUNyRCx5QkFBbUIsR0FBRyxtQkFBbUIsQ0FBQzs7O0lBRTFDLCtCQUFJLEdBQUosVUFBSyxPQUFtQjtRQUN0QixPQUFPLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Ozs7Ozs7Z0JBTkYsVUFBVTs7MkJBeEdYO0VBeUdzQyxpQkFBaUI7U0FBMUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhSW5zdGFuY2UsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueTtcblxuZXhwb3J0IGVudW0gVXBsb2FkU3RhdGUge1xuICBVUExPQURFRCA9ICdVUExPQURFRCcsXG4gIEZBSUxFRCA9ICdGQUlMRUQnLFxuICBVUExPQURJTkcgPSAnVVBMT0FESU5HJyxcbiAgSU5JVElBTElaRUQgPSAnSU5JVElBTElaRUQnLFxufVxuXG5leHBvcnQgdHlwZSBVcGxvYWRTdGF0ZVR5cGUgPSBrZXlvZiB0eXBlb2YgVXBsb2FkU3RhdGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBsb2FkRXZlbnQge1xuICBpZD86IHN0cmluZzsgLy8gaWQgb2YgdGhlIHVwbG9hZFxuICBzdGF0ZT86IFVwbG9hZFN0YXRlVHlwZTsgLy8gc3RhdGUgb2YgdGhlIHVwbG9hZCAoZWl0aGVyIFVQTE9BRElORywgVVBMT0FERUQgb3IgRkFJTEVEKVxuICBzdGF0dXNDb2RlPzogbnVtYmVyOyAvLyByZXNwb25zZSBjb2RlIHJldHVybmVkIGJ5IHNlcnZlciBhZnRlciB1cGxvYWQgaXMgY29tcGxldGVkXG4gIHNlcnZlclJlc3BvbnNlPzogYW55OyAvLyBzZXJ2ZXIgcmVzcG9uc2UgcmVjZWl2ZWQgYWZ0ZXIgdXBsb2FkIGlzIGNvbXBsZXRlZFxuICBlcnJvcj86IGFueTsgLy8gZXJyb3IgbWVzc2FnZSBpbiBjYXNlIG9mIGZhaWx1cmVcbiAgZXJyb3JDb2RlPzogbnVtYmVyOyAvLyBlcnJvciBjb2RlIGZvciBhbnkgZXhjZXB0aW9uIGVuY291bnRlcmVkXG4gIHByb2dyZXNzPzogYW55OyAvLyBwcm9ncmVzcyBmb3Igb25nb2luZyB1cGxvYWRcbiAgZXZlbnRJZD86IHN0cmluZzsgLy8gaWQgb2YgdGhlIGV2ZW50XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRlRNUGF5bG9hZE9wdGlvbnMge1xuICBpZDogc3RyaW5nO1xuICBmaWxlUGF0aDogc3RyaW5nO1xuICBmaWxlS2V5Pzogc3RyaW5nO1xuICBzZXJ2ZXJVcmw6IHN0cmluZztcbiAgbm90aWZpY2F0aW9uVGl0bGU/OiBzdHJpbmc7XG4gIGhlYWRlcnM/OiB7XG4gICAgW25hbWU6IHN0cmluZ106IHN0cmluZztcbiAgfTtcbiAgcGFyYW1ldGVycz86IHtcbiAgICBbbmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuICBbcHJvcDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZUTU9wdGlvbnMge1xuICBjYWxsQmFjazogKGV2ZW50OiBVcGxvYWRFdmVudCkgPT4gYW55O1xuICBjb25maWc/OiB7XG4gICAgcGFyYWxsZWxVcGxvYWRzTGltaXQ/OiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlVHJhbnNmZXJNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfb2JqZWN0SW5zdGFuY2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBGVE1PcHRpb25zKSB7XG4gICAgdGhpcy5fb2JqZWN0SW5zdGFuY2UgPSB3aW5kb3cuRmlsZVRyYW5zZmVyTWFuYWdlci5pbml0KG9wdGlvbnMuY29uZmlnLCBvcHRpb25zLmNhbGxCYWNrKTtcbiAgfVxuXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxuICBzdGFydFVwbG9hZChwYXlsb2FkOiBGVE1QYXlsb2FkT3B0aW9ucyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxuICByZW1vdmVVcGxvYWQoaWQ6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGFja25vd2xlZGdlRXZlbnQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGRlc3Ryb3koKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLyoqXG4gKiBAbmFtZSBCYWNrZ3JvdW5kVXBsb2FkXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGRvZXMgc29tZXRoaW5nXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYWNrZ3JvdW5kVXBsb2FkIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9iYWNrZ3JvdW5kLXVwbG9hZC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhY2tncm91bmRVcGxvYWQ6IEJhY2tncm91bmRVcGxvYWQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmJhY2tncm91bmRVcGxvYWQuaW5pdCh7fSlcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCYWNrZ3JvdW5kVXBsb2FkJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC11cGxvYWQnLFxuICBwbHVnaW5SZWY6ICdGaWxlVHJhbnNmZXJNYW5hZ2VyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zcG9vbmNvbnN1bHRpbmcvY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC11cGxvYWQnLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtdXBsb2FkJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRVcGxvYWQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIEZpbGVUcmFuc2Zlck1hbmFnZXIgPSBGaWxlVHJhbnNmZXJNYW5hZ2VyO1xuXG4gIGluaXQob3B0aW9uczogRlRNT3B0aW9ucyk6IEZpbGVUcmFuc2Zlck1hbmFnZXIge1xuICAgIHJldHVybiBuZXcgRmlsZVRyYW5zZmVyTWFuYWdlcihvcHRpb25zKTtcbiAgfVxufVxuIl19