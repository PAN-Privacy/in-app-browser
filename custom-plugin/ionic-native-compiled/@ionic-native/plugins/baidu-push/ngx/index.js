import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BaiduPush = /** @class */ (function (_super) {
    __extends(BaiduPush, _super);
    function BaiduPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaiduPush.prototype.startWork = function (apiKey) { return cordova(this, "startWork", {}, arguments); };
    BaiduPush.prototype.stopWork = function () { return cordova(this, "stopWork", {}, arguments); };
    BaiduPush.prototype.resumeWork = function () { return cordova(this, "resumeWork", {}, arguments); };
    BaiduPush.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    BaiduPush.prototype.delTags = function (tags) { return cordova(this, "delTags", {}, arguments); };
    BaiduPush.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationClicked = function () { return cordova(this, "onNotificationClicked", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationArrived = function () { return cordova(this, "onNotificationArrived", { "observable": true }, arguments); };
    BaiduPush.pluginName = "BaiduPush";
    BaiduPush.plugin = "cordova-plugin-push-baidu";
    BaiduPush.pluginRef = "baiduPush";
    BaiduPush.repo = "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git";
    BaiduPush.platforms = ["Android", "iOS"];
    BaiduPush.decorators = [
        { type: Injectable }
    ];
    return BaiduPush;
}(IonicNativePlugin));
export { BaiduPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhaWR1LXB1c2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2R0gsNkJBQWlCOzs7O0lBTzlDLDZCQUFTLGFBQUMsTUFBYztJQVN4Qiw0QkFBUTtJQVNSLDhCQUFVO0lBVVYsMkJBQU8sYUFBQyxJQUFTO0lBVWpCLDJCQUFPLGFBQUMsSUFBUztJQVNqQiw2QkFBUztJQVNULHlDQUFxQjtJQVNyQix5Q0FBcUI7Ozs7Ozs7Z0JBekV0QixVQUFVOztvQkE5R1g7RUErRytCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmRlY2xhcmUgY29uc3QgYmFpZHVQdXNoOiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFpZHVSZXNwb25zZTxUPiB7XG4gIC8qKlxuICAgKiBUaGUgY29ycmVzcG9uZGluZyBCYWlkdSBTREsgbWV0aG9kIGNhbGxlZC5cbiAgICovXG4gIHR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBlcnJvciBjb2RlIGNvcnJlc3BvbmRpbmcgdG8gQmFpZHUncyByZXF1ZXN0LlxuICAgKi9cbiAgZXJyb3JDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgICogUmVnaXN0cmF0aW9uIGRhdGEgcmV2ZWx2YW50IHRvIHN1YnNlcXVlbnQgYWN0aW9ucy5cbiAgICovXG4gIGRhdGE6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVnaXN0cmF0aW9uRGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGFwcC5cbiAgICovXG4gIGFwcElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGRldmljZS5cbiAgICovXG4gIHVzZXJJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNoYW5uZWwgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGFwcC5cbiAgICovXG4gIGNoYW5uZWxJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVucmVnaXN0cmF0aW9uRGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgSUQgY29ycmVzcG9uZGluZyB0byB0aGUgQmFpZHUgcmVxdWVzdC5cbiAgICovXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ0RhdGEge1xuICAvKipcbiAgICogVGhlIElEIGNvcnJlc3BvbmRpbmcgdG8gdGhlIEJhaWR1IHJlcXVlc3QuXG4gICAqL1xuICByZXF1ZXN0SWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjaGFubmVsIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBhcHAuXG4gICAqL1xuICBjaGFubmVsSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHN1Y2Nlc3NmdWxseSBzZXQvZGVsZXRlZCB0YWdzLlxuICAgKi9cbiAgc3VjZXNzVGFnczogc3RyaW5nW107XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiB1bnN1Y2Nlc3NmdWxseSBzZXQvZGVsZXRlZCB0YWdzLlxuICAgKi9cbiAgZmFpbFRhZ3M6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkRhdGEge1xuICAvKipcbiAgICogVGhlIHRpdGxlIG9mIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICB0aXRsZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAvKipcbiAgICogQ3VzdG9tIGNvbnRlbnQgZm9yIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICBjdXN0b21Db250ZW50U3RyaW5nPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEJhaWR1IFB1c2hcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZmFjaWxpYXRlcyB0aGUgdXNlIG9mIEJhaWR1IFB1c2ggbm90aWZpY2F0aW9ucy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhaWR1UHVzaCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFpZHUtcHVzaC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhaWR1UHVzaDogQmFpZHVQdXNoKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmJhaWR1UHVzaC5zdGFydFdvcmsoJ3h4eHh4eCcpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQmFpZHVSZXNwb25zZVxuICogUmVnaXN0cmF0aW9uRGF0YVxuICogVW5yZWdpc3RyYXRpb25EYXRhXG4gKiBUYWdEYXRhXG4gKiBOb3RpZmljYXRpb25EYXRhXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmFpZHVQdXNoJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcHVzaC1iYWlkdScsXG4gIHBsdWdpblJlZjogJ2JhaWR1UHVzaCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVGktd2ViZGV2L2NvcmRvdmEtcGx1Z2luLXB1c2gtYmFpZHUuZ2l0JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhaWR1UHVzaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJlZ2lzdGVycyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcGlLZXkgQmFpZHUgQ2xvdWQgUHVzaCBBUEkga2V5LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydFdvcmsoYXBpS2V5OiBzdHJpbmcpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgdW5yZWdpc3RlcnMgdGhlIGRldmljZSB0byBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VW5yZWdpc3RyYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BXb3JrKCk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxVbnJlZ2lzdHJhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJlLWJpbmRzIHRoZSBkZXZpY2UgdG8gQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzdW1lV29yaygpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzZXRzIHRhZ3MgaW4gdGhlIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEBwYXJhbSB0YWdzIHthbnl9IHRhZ3MgVGhlIHRhZ3MgdG8gc2V0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRUYWdzKHRhZ3M6IGFueSk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNldHMgdGFncyBpbiB0aGUgQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cbiAgICogQHBhcmFtIHRhZ3Mge2FueX0gdGFncyBUaGUgdGFncyB0byBzZXQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlbFRhZ3ModGFnczogYW55KTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFRhZ0RhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkIG9uIHRoZSBmb3JlZ3JvdW5kLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXG4gIG9uTWVzc2FnZSgpOiBPYnNlcnZhYmxlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdGFwcyBhIG5vdGlmaWNhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxuICBvbk5vdGlmaWNhdGlvbkNsaWNrZWQoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXG4gIG9uTm90aWZpY2F0aW9uQXJyaXZlZCgpOiBPYnNlcnZhYmxlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==