import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BioCatch = /** @class */ (function (_super) {
    __extends(BioCatch, _super);
    function BioCatch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BioCatch.prototype.start = function (customerSessionID, wupUrl, publicKey) { return cordova(this, "start", {}, arguments); };
    BioCatch.prototype.pause = function () { return cordova(this, "pause", {}, arguments); };
    BioCatch.prototype.resume = function () { return cordova(this, "resume", {}, arguments); };
    BioCatch.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BioCatch.prototype.resetSession = function () { return cordova(this, "resetSession", {}, arguments); };
    BioCatch.prototype.changeContext = function (contextName) { return cordova(this, "changeContext", {}, arguments); };
    BioCatch.prototype.updateCustomerSessionID = function (customerSessionID) { return cordova(this, "updateCustomerSessionID", {}, arguments); };
    BioCatch.pluginName = "BioCatch";
    BioCatch.plugin = "cordova-plugin-biocatch";
    BioCatch.pluginRef = "BioCatch";
    BioCatch.repo = "https://bitbucket.org/carlos_orellana/ionic-plugin";
    BioCatch.platforms = ["iOS", "Android"];
    BioCatch.decorators = [
        { type: Injectable }
    ];
    return BioCatch;
}(IonicNativePlugin));
export { BioCatch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Jpb2NhdGNoL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQStCMUMsNEJBQWlCOzs7O0lBUzdDLHdCQUFLLGFBQUMsaUJBQWdDLEVBQUUsTUFBYyxFQUFFLFNBQXdCO0lBU2hGLHdCQUFLO0lBU0wseUJBQU07SUFTTix1QkFBSTtJQVNKLCtCQUFZO0lBVVosZ0NBQWEsYUFBQyxXQUFtQjtJQVVqQywwQ0FBdUIsYUFBQyxpQkFBZ0M7Ozs7Ozs7Z0JBbEV6RCxVQUFVOzttQkEvQlg7RUFnQzhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQmlvQ2F0Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogQmlvQ2F0Y2ggU0RLIENvcmRvdmEgc3VwcG9ydFxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmlvQ2F0Y2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Jpb2NhdGNoJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiaW9jYXRjaDogQmlvQ2F0Y2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmJpb2NhdGNoLnN0YXJ0KCdjdXN0b21lci1zZXNzaW9uLTEnLCAnaHR0cDovL2V4YW1wbGUuY29tJywgJ3NvbWUtcHVibGljLWtleScpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmlvQ2F0Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1iaW9jYXRjaCcsXG4gIHBsdWdpblJlZjogJ0Jpb0NhdGNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vYml0YnVja2V0Lm9yZy9jYXJsb3Nfb3JlbGxhbmEvaW9uaWMtcGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpb0NhdGNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU3RhcnQgYSBzZXNzaW9uXG4gICAqIEBwYXJhbSBjdXN0b21lclNlc3Npb25JRCB7U3RyaW5nfSBDdXN0b21lciBzZXNzaW9uIGlkXG4gICAqIEBwYXJhbSB3dXBVcmwge1N0cmluZ30gV1VQIHNlcnZlciBVUkxcbiAgICogQHBhcmFtIHB1YmxpY0tleSB7U3RyaW5nfSBQdWJsaWMgS2V5XG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0KGN1c3RvbWVyU2Vzc2lvbklEOiBzdHJpbmcgfCBudWxsLCB3dXBVcmw6IHN0cmluZywgcHVibGljS2V5OiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlIHRoZSBzZXNzaW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHBhdXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN1bWUgdGhlIHNlc3Npb25cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzdW1lKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBzZXNzaW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBzZXNzaW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc2V0U2Vzc2lvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBzZXNzaW9uIGNvbnRleHRcbiAgICogQHBhcmFtIGNvbnRleHROYW1lIHtTdHJpbmd9IENvbnRleHQgbmFtZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjaGFuZ2VDb250ZXh0KGNvbnRleHROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjdXN0b21lciBzZXNzaW9uIElEXG4gICAqIEBwYXJhbSBjdXN0b21lclNlc3Npb25JRCB7U3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1cGRhdGVDdXN0b21lclNlc3Npb25JRChjdXN0b21lclNlc3Npb25JRDogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19