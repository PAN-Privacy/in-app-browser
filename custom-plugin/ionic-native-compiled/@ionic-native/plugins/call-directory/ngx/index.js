import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CallDirectory = /** @class */ (function (_super) {
    __extends(CallDirectory, _super);
    function CallDirectory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallDirectory.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    CallDirectory.prototype.addIdentification = function (items) { return cordova(this, "addIdentification", {}, arguments); };
    CallDirectory.prototype.removeIdentification = function (items) { return cordova(this, "removeIdentification", {}, arguments); };
    CallDirectory.prototype.removeAllIdentification = function () { return cordova(this, "removeAllIdentification", {}, arguments); };
    CallDirectory.prototype.getAllItems = function () { return cordova(this, "getAllItems", {}, arguments); };
    CallDirectory.prototype.reloadExtension = function () { return cordova(this, "reloadExtension", {}, arguments); };
    CallDirectory.prototype.getLog = function () { return cordova(this, "getLog", {}, arguments); };
    CallDirectory.pluginName = "CallDirectory";
    CallDirectory.plugin = "cordova-plugin-call-directory";
    CallDirectory.pluginRef = "CallDirectory";
    CallDirectory.repo = "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory";
    CallDirectory.install = "cordova plugin add cordova-plugin-call-directory --variable EXT_NAME=\"Cordova-Directory\" --variable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=\"NO\"";
    CallDirectory.installVariables = ["EXT_NAME", "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES"];
    CallDirectory.platforms = ["iOS"];
    CallDirectory.decorators = [
        { type: Injectable }
    ];
    return CallDirectory;
}(IonicNativePlugin));
export { CallDirectory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhbGwtZGlyZWN0b3J5L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1EckMsaUNBQWlCOzs7O0lBTWxELG1DQUFXO0lBVVgseUNBQWlCLGFBQUMsS0FBMEI7SUFVNUMsNENBQW9CLGFBQUMsS0FBMEI7SUFTL0MsK0NBQXVCO0lBU3ZCLG1DQUFXO0lBU1gsdUNBQWU7SUFTZiw4QkFBTTs7Ozs7Ozs7O2dCQS9EUCxVQUFVOzt3QkFuRFg7RUFvRG1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbERpcmVjdG9yeUl0ZW0ge1xuICBsYWJlbDogc3RyaW5nO1xuICBudW1iZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWxsRGlyZWN0b3J5TG9nIHtcbiAgcGx1Z2luOiBzdHJpbmdbXTtcbiAgZXh0ZW5zaW9uOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBAbmFtZSBDYWxsIERpcmVjdG9yeVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBjYW4gYWRkIHBob25lIG51bWJlcnMgdG8gYW4gQ2FsbGtpdCBjYWxsIGRpcmVjdG9yeSBleHRlbnNpb24uIENhbGwgYHJlbG9hZEV4dGVuc2lvbmAgYWZ0ZXIgdXNpbmcgYGFkZElkZW50aWZpY2F0aW9uYCBhbmQgYHJlbW92ZUlkZW50aWZpY2F0aW9uYFxuICogdG8gcHJvY2VzcyB0aGUgY2hhbmdlcyBpbiB0aGUgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2FsbERpcmVjdG9yeSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2FsbC1kaXJlY3Rvcnkvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYWxsRGlyZWN0b3J5OiBDYWxsRGlyZWN0b3J5KSB7IH1cbiAqXG4gKlxuICogbGV0IGl0ZW1zID0gW3tsYWJlbDogXCJIZWxsb1wiLCBudW1iZXI6IFwiMTIzXCJ9XTtcbiAqIHRoaXMuY2FsbERpcmVjdG9yeS5hZGRJZGVudGlmaWNhdGlvbihpdGVtcylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmNhbGxEaXJlY3RvcnkucmVsb2FkRXh0ZW5zaW9uKClcbiAqICAgLnRoZW4ocmVzOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICogYGBgXG4gKlxuICogQEludGVyZmFjZXNcbiAqIENhbGxEaXJlY3RvcnlJdGVtXG4gKiBDYWxsRGlyZWN0b3J5TG9nXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ2FsbERpcmVjdG9yeScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNhbGwtZGlyZWN0b3J5JyxcbiAgcGx1Z2luUmVmOiAnQ2FsbERpcmVjdG9yeScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vR0VEWVNJbnRyYVdhcmUvY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnknLFxuICBpbnN0YWxsOlxuICAgICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnkgLS12YXJpYWJsZSBFWFRfTkFNRT1cIkNvcmRvdmEtRGlyZWN0b3J5XCIgLS12YXJpYWJsZSBBTFdBWVNfRU1CRURfU1dJRlRfU1RBTkRBUkRfTElCUkFSSUVTPVwiTk9cIicsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnRVhUX05BTUUnLCAnQUxXQVlTX0VNQkVEX1NXSUZUX1NUQU5EQVJEX0xJQlJBUklFUyddLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhbGxEaXJlY3RvcnkgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHJlc3VsdFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkIGlkZW50aWZpY2F0aW9uIG51bWJlcnNcbiAgICogQHBhcmFtIHtDYWxsRGlyZWN0b3J5SXRlbVtdfSBpdGVtcyBTZXQgb2YgbnVtYmVycyB3aXRoIGxhYmVsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBudW1iZXJzIGFyZSBhZGRlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBhZGRJZGVudGlmaWNhdGlvbihpdGVtczogQ2FsbERpcmVjdG9yeUl0ZW1bXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBpZGVudGlmaWNhdGlvbiBudW1iZXJzXG4gICAqIEBwYXJhbSB7Q2FsbERpcmVjdG9yeUl0ZW1bXX0gaXRlbXMgU2V0IG9mIG51bWJlcnMgd2l0aCBhcmJpdHJhcnkgbGFiZWxcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbnVtYmVycyBhcmUgcmVtb3ZlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZW1vdmVJZGVudGlmaWNhdGlvbihpdGVtczogQ2FsbERpcmVjdG9yeUl0ZW1bXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgaXRlbXMgZnJvbSBjYWxsIGRpcmVjdG9yeS4gUmVmcmVzaGVzIGltbWVkaWF0ZWx5LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlbW92ZUFsbElkZW50aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgbnVtYmVycyBhbmQgbGFiZWxzIGluIGNhbGwgZGlyZWN0b3J5XG4gICAqIEByZXR1cm4ge0NhbGxEaXJlY3RvcnlJdGVtW119IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBhbGwgaXRlbXNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0QWxsSXRlbXMoKTogUHJvbWlzZTxDYWxsRGlyZWN0b3J5SXRlbVtdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbG9hZCBleHRlbnNpb24gdG8gcHJvY2VzcyBxdWV1ZWQgY2hhbmdlc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlbG9hZEV4dGVuc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbG9nIGZyb20gcGx1Z2luIGFuZCBjYWxsIGRpcmVjdG9yeSBleHRlbnNpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxDYWxsRGlyZWN0b3J5TG9nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBvYmplY3Qgb2YgbG9nIG1lc3NhZ2VzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldExvZygpOiBQcm9taXNlPENhbGxEaXJlY3RvcnlMb2c+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==