import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CleverTap = /** @class */ (function (_super) {
    __extends(CleverTap, _super);
    function CleverTap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CleverTap.prototype.notifyDeviceReady = function () { return cordova(this, "notifyDeviceReady", {}, arguments); };
    CleverTap.prototype.enablePersonalization = function () { return cordova(this, "enablePersonalization", {}, arguments); };
    CleverTap.prototype.disablePersonalization = function () { return cordova(this, "disablePersonalization", {}, arguments); };
    CleverTap.prototype.setOptOut = function (optOut) { return cordova(this, "setOptOut", {}, arguments); };
    CleverTap.prototype.setOffline = function (offline) { return cordova(this, "setOffline", {}, arguments); };
    CleverTap.prototype.enableDeviceNetworkInfoReporting = function (enable) { return cordova(this, "enableDeviceNetworkInfoReporting", {}, arguments); };
    CleverTap.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    CleverTap.prototype.setPushToken = function (token) { return cordova(this, "setPushToken", {}, arguments); };
    CleverTap.prototype.setPushXiaomiToken = function (token) { return cordova(this, "setPushXiaomiToken", {}, arguments); };
    CleverTap.prototype.setPushBaiduToken = function (token) { return cordova(this, "setPushBaiduToken", {}, arguments); };
    CleverTap.prototype.setPushHuaweiToken = function (token) { return cordova(this, "setPushHuaweiToken", {}, arguments); };
    CleverTap.prototype.createNotification = function (extras) { return cordova(this, "createNotification", {}, arguments); };
    CleverTap.prototype.createNotificationChannel = function (channelID, channelName, channelDescription, importance, showBadge) { return cordova(this, "createNotificationChannel", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithSound = function (channelID, channelName, channelDescription, importance, showBadge, sound) { return cordova(this, "createNotificationChannelWithSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupId = function (channelID, channelName, channelDescription, importance, groupId, showBadge) { return cordova(this, "createNotificationChannelWithGroupId", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupIdAndSound = function (channelID, channelName, channelDescription, importance, groupId, showBadge, sound) { return cordova(this, "createNotificationChannelWithGroupIdAndSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelGroup = function (groupID, groupName) { return cordova(this, "createNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannel = function (channelID) { return cordova(this, "deleteNotificationChannel", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannelGroup = function (groupID) { return cordova(this, "deleteNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.recordScreenView = function (screenName) { return cordova(this, "recordScreenView", {}, arguments); };
    CleverTap.prototype.recordEventWithName = function (eventName) { return cordova(this, "recordEventWithName", {}, arguments); };
    CleverTap.prototype.recordEventWithNameAndProps = function (eventName, eventProps) { return cordova(this, "recordEventWithNameAndProps", {}, arguments); };
    CleverTap.prototype.recordChargedEventWithDetailsAndItems = function (details, items) { return cordova(this, "recordChargedEventWithDetailsAndItems", {}, arguments); };
    CleverTap.prototype.eventGetFirstTime = function (eventName) { return cordova(this, "eventGetFirstTime", {}, arguments); };
    CleverTap.prototype.eventGetLastTime = function (eventName) { return cordova(this, "eventGetLastTime", {}, arguments); };
    CleverTap.prototype.eventGetOccurrences = function (eventName) { return cordova(this, "eventGetOccurrences", {}, arguments); };
    CleverTap.prototype.eventGetDetails = function (eventName) { return cordova(this, "eventGetDetails", {}, arguments); };
    CleverTap.prototype.getEventHistory = function () { return cordova(this, "getEventHistory", {}, arguments); };
    CleverTap.prototype.getLocation = function () { return cordova(this, "getLocation", {}, arguments); };
    CleverTap.prototype.setLocation = function (lat, lon) { return cordova(this, "setLocation", {}, arguments); };
    CleverTap.prototype.onUserLogin = function (profile) { return cordova(this, "onUserLogin", {}, arguments); };
    CleverTap.prototype.profileSet = function (profile) { return cordova(this, "profileSet", {}, arguments); };
    CleverTap.prototype.profileSetGraphUser = function (profile) { return cordova(this, "profileSetGraphUser", {}, arguments); };
    CleverTap.prototype.profileGooglePlusUser = function (profile) { return cordova(this, "profileGooglePlusUser", {}, arguments); };
    CleverTap.prototype.profileGetProperty = function (propertyName) { return cordova(this, "profileGetProperty", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapAttributionIdentifier = function () { return cordova(this, "profileGetCleverTapAttributionIdentifier", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapID = function () { return cordova(this, "profileGetCleverTapID", {}, arguments); };
    CleverTap.prototype.profileRemoveValueForKey = function (key) { return cordova(this, "profileRemoveValueForKey", {}, arguments); };
    CleverTap.prototype.profileSetMultiValues = function (key, values) { return cordova(this, "profileSetMultiValues", {}, arguments); };
    CleverTap.prototype.profileAddMultiValue = function (key, value) { return cordova(this, "profileAddMultiValue", {}, arguments); };
    CleverTap.prototype.profileAddMultiValues = function (key, values) { return cordova(this, "profileAddMultiValues", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValue = function (key, value) { return cordova(this, "profileRemoveMultiValue", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValues = function (key, values) { return cordova(this, "profileRemoveMultiValues", {}, arguments); };
    CleverTap.prototype.sessionGetTimeElapsed = function () { return cordova(this, "sessionGetTimeElapsed", {}, arguments); };
    CleverTap.prototype.sessionGetTotalVisits = function () { return cordova(this, "sessionGetTotalVisits", {}, arguments); };
    CleverTap.prototype.sessionGetScreenCount = function () { return cordova(this, "sessionGetScreenCount", {}, arguments); };
    CleverTap.prototype.sessionGetPreviousVisitTime = function () { return cordova(this, "sessionGetPreviousVisitTime", {}, arguments); };
    CleverTap.prototype.sessionGetUTMDetails = function () { return cordova(this, "sessionGetUTMDetails", {}, arguments); };
    CleverTap.prototype.pushInstallReferrer = function (source, medium, campaign) { return cordova(this, "pushInstallReferrer", {}, arguments); };
    CleverTap.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTap.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTap.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTap.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTap.prototype.getAllInboxMessages = function () { return cordova(this, "getAllInboxMessages", {}, arguments); };
    CleverTap.prototype.getUnreadInboxMessages = function () { return cordova(this, "getUnreadInboxMessages", {}, arguments); };
    CleverTap.prototype.getInboxMessageForId = function (messageId) { return cordova(this, "getInboxMessageForId", {}, arguments); };
    CleverTap.prototype.deleteInboxMessageForId = function (messageId) { return cordova(this, "deleteInboxMessageForId", {}, arguments); };
    CleverTap.prototype.markReadInboxMessageForId = function (messageId) { return cordova(this, "markReadInboxMessageForId", {}, arguments); };
    CleverTap.prototype.pushInboxNotificationViewedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationViewedEventForId", {}, arguments); };
    CleverTap.prototype.pushInboxNotificationClickedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationClickedEventForId", {}, arguments); };
    CleverTap.prototype.setUIEditorConnectionEnabled = function (enabled) { return cordova(this, "setUIEditorConnectionEnabled", {}, arguments); };
    CleverTap.prototype.registerBooleanVariable = function (varName) { return cordova(this, "registerBooleanVariable", {}, arguments); };
    CleverTap.prototype.registerDoubleVariable = function (varName) { return cordova(this, "registerDoubleVariable", {}, arguments); };
    CleverTap.prototype.registerIntegerVariable = function (varName) { return cordova(this, "registerIntegerVariable", {}, arguments); };
    CleverTap.prototype.registerStringVariable = function (varName) { return cordova(this, "registerStringVariable", {}, arguments); };
    CleverTap.prototype.registerListOfBooleanVariable = function (varName) { return cordova(this, "registerListOfBooleanVariable", {}, arguments); };
    CleverTap.prototype.registerListOfDoubleVariable = function (varName) { return cordova(this, "registerListOfDoubleVariable", {}, arguments); };
    CleverTap.prototype.registerListOfIntegerVariable = function (varName) { return cordova(this, "registerListOfIntegerVariable", {}, arguments); };
    CleverTap.prototype.registerListOfStringVariable = function (varName) { return cordova(this, "registerListOfStringVariable", {}, arguments); };
    CleverTap.prototype.registerMapOfBooleanVariable = function (varName) { return cordova(this, "registerMapOfBooleanVariable", {}, arguments); };
    CleverTap.prototype.registerMapOfDoubleVariable = function (varName) { return cordova(this, "registerMapOfDoubleVariable", {}, arguments); };
    CleverTap.prototype.registerMapOfIntegerVariable = function (varName) { return cordova(this, "registerMapOfIntegerVariable", {}, arguments); };
    CleverTap.prototype.registerMapOfStringVariable = function (varName) { return cordova(this, "registerMapOfStringVariable", {}, arguments); };
    CleverTap.prototype.getBooleanVariable = function (varName, defaultValue) { return cordova(this, "getBooleanVariable", {}, arguments); };
    CleverTap.prototype.getDoubleVariable = function (varName, defaultValue) { return cordova(this, "getDoubleVariable", {}, arguments); };
    CleverTap.prototype.getIntegerVariable = function (varName, defaultValue) { return cordova(this, "getIntegerVariable", {}, arguments); };
    CleverTap.prototype.getStringVariable = function (varName, defaultValue) { return cordova(this, "getStringVariable", {}, arguments); };
    CleverTap.prototype.getListOfBooleanVariable = function (varName, defaultValue) { return cordova(this, "getListOfBooleanVariable", {}, arguments); };
    CleverTap.prototype.getListOfDoubleVariable = function (varName, defaultValue) { return cordova(this, "getListOfDoubleVariable", {}, arguments); };
    CleverTap.prototype.getListOfIntegerVariable = function (varName, defaultValue) { return cordova(this, "getListOfIntegerVariable", {}, arguments); };
    CleverTap.prototype.getListOfStringVariable = function (varName, defaultValue) { return cordova(this, "getListOfStringVariable", {}, arguments); };
    CleverTap.prototype.getMapOfBooleanVariable = function (varName, defaultValue) { return cordova(this, "getMapOfBooleanVariable", {}, arguments); };
    CleverTap.prototype.getMapOfDoubleVariable = function (varName, defaultValue) { return cordova(this, "getMapOfDoubleVariable", {}, arguments); };
    CleverTap.prototype.getMapOfIntegerVariable = function (varName, defaultValue) { return cordova(this, "getMapOfIntegerVariable", {}, arguments); };
    CleverTap.prototype.getMapOfStringVariable = function (varName, defaultValue) { return cordova(this, "getMapOfStringVariable", {}, arguments); };
    CleverTap.prototype.getAllDisplayUnits = function () { return cordova(this, "getAllDisplayUnits", {}, arguments); };
    CleverTap.prototype.getDisplayUnitForId = function (id) { return cordova(this, "getDisplayUnitForId", {}, arguments); };
    CleverTap.prototype.pushDisplayUnitViewedEventForID = function (id) { return cordova(this, "pushDisplayUnitViewedEventForID", {}, arguments); };
    CleverTap.prototype.pushDisplayUnitClickedEventForID = function (id) { return cordova(this, "pushDisplayUnitClickedEventForID", {}, arguments); };
    CleverTap.prototype.getFeatureFlag = function (key, defaultValue) { return cordova(this, "getFeatureFlag", {}, arguments); };
    CleverTap.prototype.setDefaultsMap = function (defaults) { return cordova(this, "setDefaultsMap", {}, arguments); };
    CleverTap.prototype.fetch = function () { return cordova(this, "fetch", {}, arguments); };
    CleverTap.prototype.fetchWithMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "fetchWithMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTap.prototype.activate = function () { return cordova(this, "activate", {}, arguments); };
    CleverTap.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", {}, arguments); };
    CleverTap.prototype.setMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "setMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTap.prototype.getLastFetchTimeStampInMillis = function () { return cordova(this, "getLastFetchTimeStampInMillis", {}, arguments); };
    CleverTap.prototype.getString = function () { return cordova(this, "getString", {}, arguments); };
    CleverTap.prototype.getBoolean = function () { return cordova(this, "getBoolean", {}, arguments); };
    CleverTap.prototype.getLong = function () { return cordova(this, "getLong", {}, arguments); };
    CleverTap.prototype.getDouble = function () { return cordova(this, "getDouble", {}, arguments); };
    CleverTap.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    CleverTap.prototype.setDebugLevel = function (level) { return cordova(this, "setDebugLevel", {}, arguments); };
    CleverTap.pluginName = "CleverTap";
    CleverTap.plugin = "clevertap-cordova";
    CleverTap.pluginRef = "CleverTap";
    CleverTap.repo = "https://github.com/CleverTap/clevertap-cordova";
    CleverTap.platforms = ["Android", "iOS"];
    CleverTap.decorators = [
        { type: Injectable }
    ];
    return CleverTap;
}(IonicNativePlugin));
export { CleverTap };
//# sourceMappingURL=data:application/json;base64,