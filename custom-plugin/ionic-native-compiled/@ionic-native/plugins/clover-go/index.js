var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CloverGoOriginal = /** @class */ (function (_super) {
    __extends(CloverGoOriginal, _super);
    function CloverGoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloverGoOriginal.prototype.init = function (configuration) { return cordova(this, "init", {}, arguments); };
    CloverGoOriginal.prototype.connect = function () { return cordova(this, "connect", {}, arguments); };
    CloverGoOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    CloverGoOriginal.prototype.sale = function (saleInfo) { return cordova(this, "sale", {}, arguments); };
    CloverGoOriginal.prototype.sign = function (signInfo) { return cordova(this, "sign", {}, arguments); };
    CloverGoOriginal.prototype.voidPayment = function (paymentInfo) { return cordova(this, "voidPayment", {}, arguments); };
    CloverGoOriginal.pluginName = "CloverGo";
    CloverGoOriginal.plugin = "cordova-plugin-clovergo";
    CloverGoOriginal.pluginRef = "clovergo";
    CloverGoOriginal.repo = "https://github.com/hotwax/cordova-plugin-clovergo";
    CloverGoOriginal.install = "ionic plugin add cordova-plugin-clovergo";
    CloverGoOriginal.platforms = ["Android"];
    return CloverGoOriginal;
}(IonicNativePlugin));
var CloverGo = new CloverGoOriginal();
export { CloverGo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Nsb3Zlci1nby9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFPTixNQUFNLG9CQUFvQixDQUFDOztJQXdFRSw0QkFBaUI7Ozs7SUFPN0MsdUJBQUksYUFBQyxhQUFxQjtJQVUxQiwwQkFBTztJQVVQLDZCQUFVO0lBVVYsdUJBQUksYUFBQyxRQUFnQjtJQWFyQix1QkFBSSxhQUFDLFFBQWdCO0lBVXJCLDhCQUFXLGFBQUMsV0FBbUI7Ozs7Ozs7bUJBNUlqQztFQWdGOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBQbHVnaW4sXG4gIENvcmRvdmEsXG4gIENvcmRvdmFQcm9wZXJ0eSxcbiAgQ29yZG92YUluc3RhbmNlLFxuICBJbnN0YW5jZVByb3BlcnR5LFxuICBJb25pY05hdGl2ZVBsdWdpbixcbn0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZSB7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIHJlYXNvbj86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuICBtZXJjaGFudE5hbWU/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFNhbGVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcbiAgcGF5bWVudElkPzogc3RyaW5nO1xuICB0cmFuc2FjdGlvblR5cGU/OiBzdHJpbmc7XG4gIGVudHJ5VHlwZT86IHN0cmluZztcbiAgY2FyZEZpcnN0Nj86IHN0cmluZztcbiAgY2FyZExhc3Q0Pzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBWb2lkUGF5bWVudFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuICBwYXltZW50SWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQ2xvdmVyIEdvXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGNvbm5lY3QgdG8gQ2xvdmVyIEdvIHBheW1lbnQgZGV2aWNlIGFuZCBwcm9jZXNzIHBheW1lbnRzLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2xvdmVyR28gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Nsb3Zlci1nby9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsb3ZlckdvOiBDbG92ZXJHbykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuY2xvdmVyR28uaW5pdChjb25maWd1cmF0aW9uKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuY2xvdmVyR28uY29ubmVjdCgpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5jbG92ZXJHby5kaXNjb25uZWN0KClcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmNsb3ZlckdvLnNhbGUoc2FsZUluZm8pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5jbG92ZXJHby5zaWduKHNpZ25JbmZvKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuY2xvdmVyR28udm9pZFBheW1lbnQocGF5bWVudEluZm8pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ2xvdmVyR28nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1jbG92ZXJnbycsXG4gIHBsdWdpblJlZjogJ2Nsb3ZlcmdvJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ob3R3YXgvY29yZG92YS1wbHVnaW4tY2xvdmVyZ28nLFxuICBpbnN0YWxsOiAnaW9uaWMgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1jbG92ZXJnbycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENsb3ZlckdvIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0aWFsaXNlcyBDbG92ZXIgR28gU0RLXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uIHtvYmplY3R9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8SW5pdFJlc3BvbnNlPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW5pdChjb25maWd1cmF0aW9uOiBvYmplY3QpOiBQcm9taXNlPEluaXRSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNvbm5lY3RzIHRvIGF2YWlsYWJsZSBjbG92ZXIgZ28gZGV2aWNlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBkaXNjb25uZWN0cyB0byBhdmFpbGFibGUgY2xvdmVyIGdvIGRldmljZVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFJlc3BvbnNlPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzY29ubmVjdCgpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaW5pdGlhdGUgc2FsZSBmb3IgQ2xvdmVyIEdvIGRldmljZVxuICAgKiBAcGFyYW0gc2FsZUluZm8ge29iamVjdH1cbiAgICogQHJldHVybiB7UHJvbWlzZTxTYWxlUmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzYWxlKHNhbGVJbmZvOiBvYmplY3QpOiBQcm9taXNlPFNhbGVSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHBhc3Mgc2lnbmF0dXJlIGFzIHR3b1xuICAgKiBkaW1lbnNpb25hbCBudW1iZXIgYXJyYXkgdGhhdCByZXByZXNlbnRzIHBvaW50c1xuICAgKiBvZiBzaWduYXR1cmUgb24gc2NyZWVuLlxuICAgKiBUaGUgbGlzdCBpcyBwYXNzZWQgYXMgc2lnbmF0dXJlIGluIFNpZ25JbmZvIG9iamVjdC5cbiAgICogQHBhcmFtIHNpZ25JbmZvIHtvYmplY3R9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8U2FsZVJlc3BvbnNlPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbihzaWduSW5mbzogb2JqZWN0KTogUHJvbWlzZTxTYWxlUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB2b2lkIGFueSBwYXltZW50IGRvbmUgdGhyb3VnaCB0aGUgZGV2aWNlXG4gICAqIEBwYXJhbSBzYWxlSW5mbyB7b2JqZWN0fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFZvaWRQYXltZW50UmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2b2lkUGF5bWVudChwYXltZW50SW5mbzogb2JqZWN0KTogUHJvbWlzZTxWb2lkUGF5bWVudFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=