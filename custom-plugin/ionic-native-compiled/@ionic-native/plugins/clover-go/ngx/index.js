import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CloverGo = /** @class */ (function (_super) {
    __extends(CloverGo, _super);
    function CloverGo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloverGo.prototype.init = function (configuration) { return cordova(this, "init", {}, arguments); };
    CloverGo.prototype.connect = function () { return cordova(this, "connect", {}, arguments); };
    CloverGo.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    CloverGo.prototype.sale = function (saleInfo) { return cordova(this, "sale", {}, arguments); };
    CloverGo.prototype.sign = function (signInfo) { return cordova(this, "sign", {}, arguments); };
    CloverGo.prototype.voidPayment = function (paymentInfo) { return cordova(this, "voidPayment", {}, arguments); };
    CloverGo.pluginName = "CloverGo";
    CloverGo.plugin = "cordova-plugin-clovergo";
    CloverGo.pluginRef = "clovergo";
    CloverGo.repo = "https://github.com/hotwax/cordova-plugin-clovergo";
    CloverGo.install = "ionic plugin add cordova-plugin-clovergo";
    CloverGo.platforms = ["Android"];
    CloverGo.decorators = [
        { type: Injectable }
    ];
    return CloverGo;
}(IonicNativePlugin));
export { CloverGo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Nsb3Zlci1nby9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFPTixNQUFNLG9CQUFvQixDQUFDOztJQXdFRSw0QkFBaUI7Ozs7SUFPN0MsdUJBQUksYUFBQyxhQUFxQjtJQVUxQiwwQkFBTztJQVVQLDZCQUFVO0lBVVYsdUJBQUksYUFBQyxRQUFnQjtJQWFyQix1QkFBSSxhQUFDLFFBQWdCO0lBVXJCLDhCQUFXLGFBQUMsV0FBbUI7Ozs7Ozs7O2dCQTdEaEMsVUFBVTs7bUJBL0VYO0VBZ0Y4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIFBsdWdpbixcbiAgQ29yZG92YSxcbiAgQ29yZG92YVByb3BlcnR5LFxuICBDb3Jkb3ZhSW5zdGFuY2UsXG4gIEluc3RhbmNlUHJvcGVydHksXG4gIElvbmljTmF0aXZlUGx1Z2luLFxufSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIHtcbiAgdHlwZT86IHN0cmluZztcbiAgbWVzc2FnZT86IHN0cmluZztcbiAgcmVhc29uPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBJbml0UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG4gIG1lcmNoYW50TmFtZT86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU2FsZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuICBwYXltZW50SWQ/OiBzdHJpbmc7XG4gIHRyYW5zYWN0aW9uVHlwZT86IHN0cmluZztcbiAgZW50cnlUeXBlPzogc3RyaW5nO1xuICBjYXJkRmlyc3Q2Pzogc3RyaW5nO1xuICBjYXJkTGFzdDQ/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFZvaWRQYXltZW50UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG4gIHBheW1lbnRJZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBDbG92ZXIgR29cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gY29ubmVjdCB0byBDbG92ZXIgR28gcGF5bWVudCBkZXZpY2UgYW5kIHByb2Nlc3MgcGF5bWVudHMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDbG92ZXJHbyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2xvdmVyLWdvL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xvdmVyR286IENsb3ZlckdvKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5jbG92ZXJHby5pbml0KGNvbmZpZ3VyYXRpb24pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5jbG92ZXJHby5jb25uZWN0KClcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmNsb3ZlckdvLmRpc2Nvbm5lY3QoKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuY2xvdmVyR28uc2FsZShzYWxlSW5mbylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmNsb3ZlckdvLnNpZ24oc2lnbkluZm8pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5jbG92ZXJHby52b2lkUGF5bWVudChwYXltZW50SW5mbylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdDbG92ZXJHbycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNsb3ZlcmdvJyxcbiAgcGx1Z2luUmVmOiAnY2xvdmVyZ28nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2hvdHdheC9jb3Jkb3ZhLXBsdWdpbi1jbG92ZXJnbycsXG4gIGluc3RhbGw6ICdpb25pYyBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWNsb3ZlcmdvJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2xvdmVyR28gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpc2VzIENsb3ZlciBHbyBTREtcbiAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb24ge29iamVjdH1cbiAgICogQHJldHVybiB7UHJvbWlzZTxJbml0UmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0KGNvbmZpZ3VyYXRpb246IG9iamVjdCk6IFByb21pc2U8SW5pdFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gY29ubmVjdHMgdG8gYXZhaWxhYmxlIGNsb3ZlciBnbyBkZXZpY2VcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxSZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNvbm5lY3QoKTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGRpc2Nvbm5lY3RzIHRvIGF2YWlsYWJsZSBjbG92ZXIgZ28gZGV2aWNlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0aWF0ZSBzYWxlIGZvciBDbG92ZXIgR28gZGV2aWNlXG4gICAqIEBwYXJhbSBzYWxlSW5mbyB7b2JqZWN0fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFNhbGVSZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNhbGUoc2FsZUluZm86IG9iamVjdCk6IFByb21pc2U8U2FsZVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gcGFzcyBzaWduYXR1cmUgYXMgdHdvXG4gICAqIGRpbWVuc2lvbmFsIG51bWJlciBhcnJheSB0aGF0IHJlcHJlc2VudHMgcG9pbnRzXG4gICAqIG9mIHNpZ25hdHVyZSBvbiBzY3JlZW4uXG4gICAqIFRoZSBsaXN0IGlzIHBhc3NlZCBhcyBzaWduYXR1cmUgaW4gU2lnbkluZm8gb2JqZWN0LlxuICAgKiBAcGFyYW0gc2lnbkluZm8ge29iamVjdH1cbiAgICogQHJldHVybiB7UHJvbWlzZTxTYWxlUmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaWduKHNpZ25JbmZvOiBvYmplY3QpOiBQcm9taXNlPFNhbGVSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHZvaWQgYW55IHBheW1lbnQgZG9uZSB0aHJvdWdoIHRoZSBkZXZpY2VcbiAgICogQHBhcmFtIHNhbGVJbmZvIHtvYmplY3R9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8Vm9pZFBheW1lbnRSZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZvaWRQYXltZW50KHBheW1lbnRJbmZvOiBvYmplY3QpOiBQcm9taXNlPFZvaWRQYXltZW50UmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==