var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CustomUISDKOriginal = /** @class */ (function (_super) {
    __extends(CustomUISDKOriginal, _super);
    function CustomUISDKOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomUISDKOriginal.prototype.fetchAuthCode = function (clientId, mid) { return cordova(this, "fetchAuthCode", {}, arguments); };
    CustomUISDKOriginal.prototype.isPaytmAppInstalled = function () { return cordova(this, "isPaytmAppInstalled", {}, arguments); };
    CustomUISDKOriginal.prototype.checkHasInstrument = function (mid) { return cordova(this, "checkHasInstrument", {}, arguments); };
    CustomUISDKOriginal.prototype.initPaytmSDK = function (mid, orderId, txnToken, amount, isStaging, callbackUrl) { return cordova(this, "initPaytmSDK", {}, arguments); };
    CustomUISDKOriginal.prototype.goForWalletTransaction = function (paymentFlow) { return cordova(this, "goForWalletTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.goForNewCardTransaction = function (cardNumber, cardExpiry, cardCvv, cardType, paymentFlow, channelCode, issuingBankCode, emiChannelId, authMode, saveCard) { return cordova(this, "goForNewCardTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.goForSavedCardTransaction = function (cardId, cardCvv, cardType, paymentFlow, channelCode, issuingBankCode, emiChannelId, authMode) { return cordova(this, "goForSavedCardTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.goForNetBankingTransaction = function (netBankingCode, paymentFlow) { return cordova(this, "goForNetBankingTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.goForUpiCollectTransaction = function (upiCode, paymentFlow, saveVPA) { return cordova(this, "goForUpiCollectTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.getUpiIntentList = function () { return cordova(this, "getUpiIntentList", {}, arguments); };
    CustomUISDKOriginal.prototype.goForUpiIntentTransaction = function (appName, paymentFlow) { return cordova(this, "goForUpiIntentTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.goForUpiPushTransaction = function (paymentFlow, bankAccountJson, vpaName, merchantDetailsJson) { return cordova(this, "goForUpiPushTransaction", {}, arguments); };
    CustomUISDKOriginal.prototype.fetchUpiBalance = function (bankAccountJson, vpaName) { return cordova(this, "fetchUpiBalance", {}, arguments); };
    CustomUISDKOriginal.prototype.setUpiMpin = function (bankAccountJson, vpaName) { return cordova(this, "setUpiMpin", {}, arguments); };
    CustomUISDKOriginal.prototype.getBin = function (cardSixDigit, tokenType, token, mid, referenceId) { return cordova(this, "getBin", {}, arguments); };
    CustomUISDKOriginal.prototype.fetchNBList = function (tokenType, token, mid, orderId, referenceId) { return cordova(this, "fetchNBList", {}, arguments); };
    CustomUISDKOriginal.prototype.fetchEmiDetails = function (channelCode, cardType) { return cordova(this, "fetchEmiDetails", {}, arguments); };
    CustomUISDKOriginal.prototype.getLastNBSavedBank = function () { return cordova(this, "getLastNBSavedBank", {}, arguments); };
    CustomUISDKOriginal.prototype.getLastSavedVPA = function () { return cordova(this, "getLastSavedVPA", {}, arguments); };
    CustomUISDKOriginal.prototype.isAuthCodeValid = function (clientId, authCode) { return cordova(this, "isAuthCodeValid", {}, arguments); };
    CustomUISDKOriginal.prototype.getEnvironment = function () { return cordova(this, "getEnvironment", {}, arguments); };
    CustomUISDKOriginal.prototype.setEnvironment = function (environment) { return cordova(this, "setEnvironment", {}, arguments); };
    CustomUISDKOriginal.pluginName = "cordova-paytm-customuisdk";
    CustomUISDKOriginal.plugin = "cordova-paytm-customuisdk";
    CustomUISDKOriginal.pluginRef = "paytm.customuisdk";
    CustomUISDKOriginal.repo = "https://github.com/paytm/paytm-customuisdk-cordova";
    CustomUISDKOriginal.install = "";
    CustomUISDKOriginal.installVariables = [];
    CustomUISDKOriginal.platforms = ["Android, iOS"];
    return CustomUISDKOriginal;
}(IonicNativePlugin));
var CustomUISDK = new CustomUISDKOriginal();
export { CustomUISDK };
//# sourceMappingURL=data:application/json;base64,