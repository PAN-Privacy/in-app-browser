import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeviceOrientation = /** @class */ (function (_super) {
    __extends(DeviceOrientation, _super);
    function DeviceOrientation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceOrientation.prototype.getCurrentHeading = function () { return cordova(this, "getCurrentHeading", {}, arguments); };
    DeviceOrientation.prototype.watchHeading = function (options) { return cordova(this, "watchHeading", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceOrientation.pluginName = "DeviceOrientation";
    DeviceOrientation.plugin = "cordova-plugin-device-orientation";
    DeviceOrientation.pluginRef = "navigator.compass";
    DeviceOrientation.repo = "https://github.com/apache/cordova-plugin-device-orientation";
    DeviceOrientation.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone"];
    DeviceOrientation.decorators = [
        { type: Injectable }
    ];
    return DeviceOrientation;
}(IonicNativePlugin));
export { DeviceOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1vcmllbnRhdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXVGSyxxQ0FBaUI7Ozs7SUFNdEQsNkNBQWlCO0lBZ0JqQix3Q0FBWSxhQUFDLE9BQXlDOzs7Ozs7O2dCQXZCdkQsVUFBVTs7NEJBeEZYO0VBeUZ1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZyB7XG4gIC8qKlxuICAgKiBUaGUgaGVhZGluZyBpbiBkZWdyZWVzIGZyb20gMC0zNTkuOTkgYXQgYSBzaW5nbGUgbW9tZW50IGluIHRpbWUuIChOdW1iZXIpXG4gICAqL1xuICBtYWduZXRpY0hlYWRpbmc6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGhlYWRpbmcgcmVsYXRpdmUgdG8gdGhlIGdlb2dyYXBoaWMgTm9ydGggUG9sZSBpbiBkZWdyZWVzIDAtMzU5Ljk5IGF0IGEgc2luZ2xlIG1vbWVudCBpbiB0aW1lLiBBIG5lZ2F0aXZlIHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSB0cnVlIGhlYWRpbmcgY2FuJ3QgYmUgZGV0ZXJtaW5lZC4gKE51bWJlcilcbiAgICovXG4gIHRydWVIZWFkaW5nOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBkZXZpYXRpb24gaW4gZGVncmVlcyBiZXR3ZWVuIHRoZSByZXBvcnRlZCBoZWFkaW5nIGFuZCB0aGUgdHJ1ZSBoZWFkaW5nLiAoTnVtYmVyKVxuICAgKi9cbiAgaGVhZGluZ0FjY3VyYWN5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIGF0IHdoaWNoIHRoaXMgaGVhZGluZyB3YXMgZGV0ZXJtaW5lZC4gKERPTVRpbWVTdGFtcClcbiAgICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnMge1xuICAvKipcbiAgICogSG93IG9mdGVuIHRvIHJldHJpZXZlIHRoZSBjb21wYXNzIGhlYWRpbmcgaW4gbWlsbGlzZWNvbmRzLiAoTnVtYmVyKSAoRGVmYXVsdDogMTAwKVxuICAgKi9cbiAgZnJlcXVlbmN5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhbmdlIGluIGRlZ3JlZXMgcmVxdWlyZWQgdG8gaW5pdGlhdGUgYSB3YXRjaEhlYWRpbmcgc3VjY2VzcyBjYWxsYmFjay4gV2hlbiB0aGlzIHZhbHVlIGlzIHNldCwgZnJlcXVlbmN5IGlzIGlnbm9yZWQuIChOdW1iZXIpXG4gICAqL1xuICBmaWx0ZXI/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgRGV2aWNlIE9yaWVudGF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RldmljZSBPcmllbnRhdGlvbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nIGlzIGFuIGludGVyZmFjZSBmb3IgY29tcGFzc1xuICogaW1wb3J0IHsgRGV2aWNlT3JpZW50YXRpb24sIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RldmljZS1vcmllbnRhdGlvbi9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV2aWNlT3JpZW50YXRpb246IERldmljZU9yaWVudGF0aW9uKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBHZXQgdGhlIGRldmljZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZ1xuICogdGhpcy5kZXZpY2VPcmllbnRhdGlvbi5nZXRDdXJyZW50SGVhZGluZygpLnRoZW4oXG4gKiAgIChkYXRhOiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogKTtcbiAqXG4gKiAvLyBXYXRjaCB0aGUgZGV2aWNlIGNvbXBhc3MgaGVhZGluZyBjaGFuZ2VcbiAqIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmRldmljZU9yaWVudGF0aW9uLndhdGNoSGVhZGluZygpLnN1YnNjcmliZShcbiAqICAgKGRhdGE6IERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcpID0+IGNvbnNvbGUubG9nKGRhdGEpXG4gKiApO1xuICpcbiAqIC8vIFN0b3Agd2F0Y2hpbmcgaGVhZGluZyBjaGFuZ2VcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9uc1xuICogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZ1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0RldmljZU9yaWVudGF0aW9uJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uJyxcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmNvbXBhc3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb24nLFxuICBwbGF0Zm9ybXM6IFtcbiAgICAnQW1hem9uIEZpcmUgT1MnLFxuICAgICdBbmRyb2lkJyxcbiAgICAnQmxhY2tCZXJyeSAxMCcsXG4gICAgJ0Jyb3dzZXInLFxuICAgICdGaXJlZm94IE9TJyxcbiAgICAnaU9TJyxcbiAgICAnVGl6ZW4nLFxuICAgICdVYnVudHUnLFxuICAgICdXaW5kb3dzJyxcbiAgICAnV2luZG93cyBQaG9uZScsXG4gIF0sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZU9yaWVudGF0aW9uIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZy5cbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEN1cnJlbnRIZWFkaW5nKCk6IFByb21pc2U8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRldmljZSBjdXJyZW50IGhlYWRpbmcgYXQgYSByZWd1bGFyIGludGVydmFsXG4gICAqXG4gICAqIFN0b3AgdGhlIHdhdGNoIGJ5IHVuc3Vic2NyaWJpbmcgZnJvbSB0aGUgb2JzZXJ2YWJsZVxuICAgKiBAcGFyYW0ge0RldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBjb21wYXNzLiBGcmVxdWVuY3kgYW5kIEZpbHRlci4gT3B0aW9uYWxcbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNvbnRhaW5zIHRoZSBjb21wYXNzIGhlYWRpbmdcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnY2xlYXJXYXRjaCcsXG4gIH0pXG4gIHdhdGNoSGVhZGluZyhvcHRpb25zPzogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9ucyk6IE9ic2VydmFibGU8RGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19