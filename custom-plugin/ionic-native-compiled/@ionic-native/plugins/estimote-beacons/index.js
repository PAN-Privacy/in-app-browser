var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var EstimoteBeaconsOriginal = /** @class */ (function (_super) {
    __extends(EstimoteBeaconsOriginal, _super);
    function EstimoteBeaconsOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Proximity value */
        _this.ProximityUnknown = 0;
        /** Proximity value */
        _this.ProximityImmediate = 1;
        /** Proximity value */
        _this.ProximityNear = 2;
        /** Proximity value */
        _this.ProximityFar = 3;
        /** Beacon colour */
        _this.BeaconColorUnknown = 0;
        /** Beacon colour */
        _this.BeaconColorMintCocktail = 1;
        /** Beacon colour */
        _this.BeaconColorIcyMarshmallow = 2;
        /** Beacon colour */
        _this.BeaconColorBlueberryPie = 3;
        /**
         * Beacon colour.
         */
        _this.BeaconColorSweetBeetroot = 4;
        /** Beacon colour */
        _this.BeaconColorCandyFloss = 5;
        /** Beacon colour */
        _this.BeaconColorLemonTart = 6;
        /** Beacon colour */
        _this.BeaconColorVanillaJello = 7;
        /** Beacon colour */
        _this.BeaconColorLiquoriceSwirl = 8;
        /** Beacon colour */
        _this.BeaconColorWhite = 9;
        /** Beacon colour */
        _this.BeaconColorTransparent = 10;
        /** Region state */
        _this.RegionStateUnknown = 'unknown';
        /** Region state */
        _this.RegionStateOutside = 'outside';
        /** Region state */
        _this.RegionStateInside = 'inside';
        return _this;
    }
    EstimoteBeaconsOriginal.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.authorizationStatus = function () { return cordova(this, "authorizationStatus", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startAdvertisingAsBeacon = function (uuid, major, minor, regionId) { return cordova(this, "startAdvertisingAsBeacon", { "clearFunction": "stopAdvertisingAsBeacon" }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopAdvertisingAsBeacon = function () { return cordova(this, "stopAdvertisingAsBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.enableAnalytics = function (enable) { return cordova(this, "enableAnalytics", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.isAuthorized = function () { return cordova(this, "isAuthorized", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.setupAppIDAndAppToken = function (appID, appToken) { return cordova(this, "setupAppIDAndAppToken", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startEstimoteBeaconDiscovery = function () { return cordova(this, "startEstimoteBeaconDiscovery", { "observable": true, "clearFunction": "stopEstimoteBeaconDiscovery" }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopEstimoteBeaconDiscovery = function () { return cordova(this, "stopEstimoteBeaconDiscovery", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startRangingSecureBeaconsInRegion = function (region) { return cordova(this, "startRangingSecureBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingSecureBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopRangingSecureBeaconsInRegion = function (region) { return cordova(this, "stopRangingSecureBeaconsInRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startMonitoringForRegion", { "observable": true, "clearFunction": "stopMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startSecureMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startSecureMonitoringForRegion", { "observable": true, "clearFunction": "stopSecureMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopSecureMonitoringForRegion = function (region) { return cordova(this, "stopSecureMonitoringForRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.connectToBeacon = function (beacon) { return cordova(this, "connectToBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.disconnectConnectedBeacon = function () { return cordova(this, "disconnectConnectedBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedProximityUUID = function (uuid) { return cordova(this, "writeConnectedProximityUUID", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedMajor = function (major) { return cordova(this, "writeConnectedMajor", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedMinor = function (minor) { return cordova(this, "writeConnectedMinor", {}, arguments); };
    EstimoteBeaconsOriginal.pluginName = "EstimoteBeacons";
    EstimoteBeaconsOriginal.plugin = "cordova-plugin-estimote";
    EstimoteBeaconsOriginal.pluginRef = "estimote.beacons";
    EstimoteBeaconsOriginal.repo = "https://github.com/evothings/phonegap-estimotebeacons";
    EstimoteBeaconsOriginal.platforms = ["Android", "iOS"];
    return EstimoteBeaconsOriginal;
}(IonicNativePlugin));
var EstimoteBeacons = new EstimoteBeaconsOriginal();
export { EstimoteBeacons };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2VzdGltb3RlLWJlYWNvbnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2Q0csbUNBQWlCOzs7UUFDcEQsc0JBQXNCO1FBQ3RCLHNCQUFnQixHQUFHLENBQUMsQ0FBQztRQUVyQixzQkFBc0I7UUFDdEIsd0JBQWtCLEdBQUcsQ0FBQyxDQUFDO1FBRXZCLHNCQUFzQjtRQUN0QixtQkFBYSxHQUFHLENBQUMsQ0FBQztRQUVsQixzQkFBc0I7UUFDdEIsa0JBQVksR0FBRyxDQUFDLENBQUM7UUFFakIsb0JBQW9CO1FBQ3BCLHdCQUFrQixHQUFHLENBQUMsQ0FBQztRQUV2QixvQkFBb0I7UUFDcEIsNkJBQXVCLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLG9CQUFvQjtRQUNwQiwrQkFBeUIsR0FBRyxDQUFDLENBQUM7UUFFOUIsb0JBQW9CO1FBQ3BCLDZCQUF1QixHQUFHLENBQUMsQ0FBQztRQUU1Qjs7V0FFRztRQUNILDhCQUF3QixHQUFHLENBQUMsQ0FBQztRQUU3QixvQkFBb0I7UUFDcEIsMkJBQXFCLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLG9CQUFvQjtRQUNwQiwwQkFBb0IsR0FBRyxDQUFDLENBQUM7UUFFekIsb0JBQW9CO1FBQ3BCLDZCQUF1QixHQUFHLENBQUMsQ0FBQztRQUU1QixvQkFBb0I7UUFDcEIsK0JBQXlCLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLG9CQUFvQjtRQUNwQixzQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFFckIsb0JBQW9CO1FBQ3BCLDRCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUU1QixtQkFBbUI7UUFDbkIsd0JBQWtCLEdBQUcsU0FBUyxDQUFDO1FBRS9CLG1CQUFtQjtRQUNuQix3QkFBa0IsR0FBRyxTQUFTLENBQUM7UUFFL0IsbUJBQW1CO1FBQ25CLHVCQUFpQixHQUFHLFFBQVEsQ0FBQzs7O0lBcUI3Qix1REFBNkI7SUF1QjdCLG9EQUEwQjtJQXFCMUIsNkNBQW1CO0lBd0JuQixrREFBd0IsYUFBQyxJQUFZLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxRQUFnQjtJQWtCckYsaURBQXVCO0lBaUJ2Qix5Q0FBZSxhQUFDLE1BQWU7SUFnQi9CLDRDQUFrQjtJQWdCbEIsc0NBQVk7SUFrQlosK0NBQXFCLGFBQUMsS0FBYSxFQUFFLFFBQWdCO0lBdUJyRCxzREFBNEI7SUFtQjVCLHFEQUEyQjtJQXlCM0IscURBQTJCLGFBQUMsTUFBNEI7SUFxQnhELG9EQUEwQixhQUFDLE1BQTRCO0lBaUJ2RCwyREFBaUMsYUFBQyxNQUE0QjtJQVc5RCwwREFBZ0MsYUFBQyxNQUE0QjtJQTRCN0Qsa0RBQXdCLGFBQUMsTUFBNEIsRUFBRSx5QkFBa0M7SUFnQnpGLGlEQUF1QixhQUFDLE1BQTRCO0lBc0JwRCx3REFBOEIsYUFBQyxNQUE0QixFQUFFLHlCQUFrQztJQVkvRix1REFBNkIsYUFBQyxNQUE0QjtJQXNCMUQseUNBQWUsYUFBQyxNQUFXO0lBYzNCLG1EQUF5QjtJQWdCekIscURBQTJCLGFBQUMsSUFBUztJQWdCckMsNkNBQW1CLGFBQUMsS0FBYTtJQWdCakMsNkNBQW1CLGFBQUMsS0FBYTs7Ozs7OzBCQTFpQm5DO0VBK0NxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVzdGltb3RlQmVhY29uUmVnaW9uIHtcbiAgc3RhdGU/OiBzdHJpbmc7XG5cbiAgbWFqb3I6IG51bWJlcjtcblxuICBtaW5vcjogbnVtYmVyO1xuXG4gIGlkZW50aWZpZXI/OiBzdHJpbmc7XG5cbiAgdXVpZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEVzdGltb3RlIEJlYWNvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGVuYWJsZXMgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGEgcGhvbmUgYW5kIEVzdGltb3RlIEJlYWNvbnMgcGVyaXBoZXJhbHMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBFc3RpbW90ZUJlYWNvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2VzdGltb3RlLWJlYWNvbnMvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGViOiBFc3RpbW90ZUJlYWNvbnMpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuZWIucmVxdWVzdEFsd2F5c0F1dGhvcml6YXRpb24oKTtcbiAqXG4gKiB0aGlzLmViLmVuYWJsZUFuYWx5dGljcyh0cnVlKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogRXN0aW1vdGVCZWFjb25SZWdpb25cbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdFc3RpbW90ZUJlYWNvbnMnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1lc3RpbW90ZScsXG4gIHBsdWdpblJlZjogJ2VzdGltb3RlLmJlYWNvbnMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2V2b3RoaW5ncy9waG9uZWdhcC1lc3RpbW90ZWJlYWNvbnMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRXN0aW1vdGVCZWFjb25zIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKiogUHJveGltaXR5IHZhbHVlICovXG4gIFByb3hpbWl0eVVua25vd24gPSAwO1xuXG4gIC8qKiBQcm94aW1pdHkgdmFsdWUgKi9cbiAgUHJveGltaXR5SW1tZWRpYXRlID0gMTtcblxuICAvKiogUHJveGltaXR5IHZhbHVlICovXG4gIFByb3hpbWl0eU5lYXIgPSAyO1xuXG4gIC8qKiBQcm94aW1pdHkgdmFsdWUgKi9cbiAgUHJveGltaXR5RmFyID0gMztcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvclVua25vd24gPSAwO1xuXG4gIC8qKiBCZWFjb24gY29sb3VyICovXG4gIEJlYWNvbkNvbG9yTWludENvY2t0YWlsID0gMTtcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvckljeU1hcnNobWFsbG93ID0gMjtcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvckJsdWViZXJyeVBpZSA9IDM7XG5cbiAgLyoqXG4gICAqIEJlYWNvbiBjb2xvdXIuXG4gICAqL1xuICBCZWFjb25Db2xvclN3ZWV0QmVldHJvb3QgPSA0O1xuXG4gIC8qKiBCZWFjb24gY29sb3VyICovXG4gIEJlYWNvbkNvbG9yQ2FuZHlGbG9zcyA9IDU7XG5cbiAgLyoqIEJlYWNvbiBjb2xvdXIgKi9cbiAgQmVhY29uQ29sb3JMZW1vblRhcnQgPSA2O1xuXG4gIC8qKiBCZWFjb24gY29sb3VyICovXG4gIEJlYWNvbkNvbG9yVmFuaWxsYUplbGxvID0gNztcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvckxpcXVvcmljZVN3aXJsID0gODtcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvcldoaXRlID0gOTtcblxuICAvKiogQmVhY29uIGNvbG91ciAqL1xuICBCZWFjb25Db2xvclRyYW5zcGFyZW50ID0gMTA7XG5cbiAgLyoqIFJlZ2lvbiBzdGF0ZSAqL1xuICBSZWdpb25TdGF0ZVVua25vd24gPSAndW5rbm93bic7XG5cbiAgLyoqIFJlZ2lvbiBzdGF0ZSAqL1xuICBSZWdpb25TdGF0ZU91dHNpZGUgPSAnb3V0c2lkZSc7XG5cbiAgLyoqIFJlZ2lvbiBzdGF0ZSAqL1xuICBSZWdpb25TdGF0ZUluc2lkZSA9ICdpbnNpZGUnO1xuXG4gIC8qKlxuICAgKiBBc2sgdGhlIHVzZXIgZm9yIHBlcm1pc3Npb24gdG8gdXNlIGxvY2F0aW9uIHNlcnZpY2VzXG4gICAqIHdoaWxlIHRoZSBhcHAgaXMgaW4gdGhlIGZvcmVncm91bmQuXG4gICAqIFlvdSBuZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBvciByZXF1ZXN0QWx3YXlzQXV0aG9yaXphdGlvblxuICAgKiBvbiBpT1MgOCsuXG4gICAqIERvZXMgbm90aGluZyBvbiBvdGhlciBwbGF0Zm9ybXMuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogRXN0aW1vdGVCZWFjb25zLnJlcXVlc3RXaGVuSW5Vc2VBdXRob3JpemF0aW9uKCkudGhlbihcbiAgICogICAoKSA9PiB7IGNvbnNvbGUubG9nKCdvbiBzdWNjZXNzJyk7IH0sXG4gICAqICAgKCkgPT4geyBjb25zb2xlLmxvZygnb24gZXJyb3InKTsgfVxuICAgKiApO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9jb21tdW5pdHkuZXN0aW1vdGUuY29tL2hjL2VuLXVzL2FydGljbGVzLzIwMzM5MzAzNi1Fc3RpbW90ZS1TREstYW5kLWlPUy04LUxvY2F0aW9uLVNlcnZpY2VzfEVzdGltb3RlIFNESyBhbmQgaU9TIDggTG9jYXRpb24gU2VydmljZXN9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlcXVlc3RXaGVuSW5Vc2VBdXRob3JpemF0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFzayB0aGUgdXNlciBmb3IgcGVybWlzc2lvbiB0byB1c2UgbG9jYXRpb24gc2VydmljZXNcbiAgICogd2hlbmV2ZXIgdGhlIGFwcCBpcyBydW5uaW5nLlxuICAgKiBZb3UgbmVlZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gb3IgcmVxdWVzdFdoZW5JblVzZUF1dGhvcml6YXRpb25cbiAgICogb24gaU9TIDgrLlxuICAgKiBEb2VzIG5vdGhpbmcgb24gb3RoZXIgcGxhdGZvcm1zLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5yZXF1ZXN0QWx3YXlzQXV0aG9yaXphdGlvbigpLnRoZW4oXG4gICAqICAgKCkgPT4geyBjb25zb2xlLmxvZygnb24gc3VjY2VzcycpOyB9LFxuICAgKiAgICgpID0+IHsgY29uc29sZS5sb2coJ29uIGVycm9yJyk7IH1cbiAgICogKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vY29tbXVuaXR5LmVzdGltb3RlLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8yMDMzOTMwMzYtRXN0aW1vdGUtU0RLLWFuZC1pT1MtOC1Mb2NhdGlvbi1TZXJ2aWNlc3xFc3RpbW90ZSBTREsgYW5kIGlPUyA4IExvY2F0aW9uIFNlcnZpY2VzfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0QWx3YXlzQXV0aG9yaXphdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbG9jYXRpb24gYXV0aG9yaXphdGlvbiBzdGF0dXMuXG4gICAqIEltcGxlbWVudGVkIG9uIGlPUyA4Ky5cbiAgICogRG9lcyBub3RoaW5nIG9uIG90aGVyIHBsYXRmb3Jtcy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBFc3RpbW90ZUJlYWNvbnMuYXV0aG9yaXphdGlvblN0YXR1cygpLnRoZW4oXG4gICAqICAgKHJlc3VsdCkgPT4geyBjb25zb2xlLmxvZygnTG9jYXRpb24gYXV0aG9yaXphdGlvbiBzdGF0dXM6ICcgKyByZXN1bHQpOyB9LFxuICAgKiAgIChlcnJvck1lc3NhZ2UpID0+IHsgY29uc29sZS5sb2coJ0Vycm9yOiAnICsgZXJyb3JNZXNzYWdlKTsgfVxuICAgKiApO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9jb21tdW5pdHkuZXN0aW1vdGUuY29tL2hjL2VuLXVzL2FydGljbGVzLzIwMzM5MzAzNi1Fc3RpbW90ZS1TREstYW5kLWlPUy04LUxvY2F0aW9uLVNlcnZpY2VzfEVzdGltb3RlIFNESyBhbmQgaU9TIDggTG9jYXRpb24gU2VydmljZXN9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGF1dGhvcml6YXRpb25TdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYWR2ZXJ0aXNpbmcgYXMgYSBiZWFjb24uXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogRXN0aW1vdGVCZWFjb25zLnN0YXJ0QWR2ZXJ0aXNpbmdBc0JlYWNvbignQjk0MDdGMzAtRjVGOC00NjZFLUFGRjktMjU1NTZCNTdGRTZEJywgMSwgMSwgJ015UmVnaW9uJylcbiAgICogICAgLnRoZW4oKCkgPT4geyBjb25zb2xlLmxvZygnQmVhY29uIHN0YXJ0ZWQnKTsgfSk7XG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIEVzdGltb3RlQmVhY29ucy5zdG9wQWR2ZXJ0aXNpbmdBc0JlYWNvbigpLnRoZW4oKHJlc3VsdCkgPT4geyBjb25zb2xlLmxvZygnQmVhY29uIHN0b3BwZWQnKTsgfSk7XG4gICAqIH0sIDUwMDApO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHV1aWQgVVVJRCBzdHJpbmcgdGhlIGJlYWNvbiBzaG91bGQgYWR2ZXJ0aXNlIChtYW5kYXRvcnkpLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFqb3IgTWFqb3IgdmFsdWUgdG8gYWR2ZXJ0aXNlIChtYW5kYXRvcnkpLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlub3IgTWlub3IgdmFsdWUgdG8gYWR2ZXJ0aXNlIChtYW5kYXRvcnkpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgSWRlbnRpZmllciBvZiB0aGUgcmVnaW9uIHVzZWQgdG8gYWR2ZXJ0aXNlIChtYW5kYXRvcnkpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wQWR2ZXJ0aXNpbmdBc0JlYWNvbicsXG4gIH0pXG4gIHN0YXJ0QWR2ZXJ0aXNpbmdBc0JlYWNvbih1dWlkOiBzdHJpbmcsIG1ham9yOiBudW1iZXIsIG1pbm9yOiBudW1iZXIsIHJlZ2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIGFkdmVydGlzaW5nIGFzIGEgYmVhY29uLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5zdGFydEFkdmVydGlzaW5nQXNCZWFjb24oJ0I5NDA3RjMwLUY1RjgtNDY2RS1BRkY5LTI1NTU2QjU3RkU2RCcsIDEsIDEsICdNeVJlZ2lvbicpXG4gICAqICAgIC50aGVuKCgpID0+IHsgY29uc29sZS5sb2coJ0JlYWNvbiBzdGFydGVkJyk7IH0pO1xuICAgKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICogICBFc3RpbW90ZUJlYWNvbnMuc3RvcEFkdmVydGlzaW5nQXNCZWFjb24oKS50aGVuKChyZXN1bHQpID0+IHsgY29uc29sZS5sb2coJ0JlYWNvbiBzdG9wcGVkJyk7IH0pO1xuICAgKiB9LCA1MDAwKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BBZHZlcnRpc2luZ0FzQmVhY29uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBhbmFseXRpY3MuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9lc3RpbW90ZS5naXRodWIuaW8vaU9TLVNESy9DbGFzc2VzL0VTVENvbmZpZy5odG1sfEZ1cnRoZXIgZGV0YWlsc31cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBFc3RpbW90ZUJlYWNvbnMuZW5hYmxlQW5hbHl0aWNzKHRydWUpLnRoZW4oKCkgPT4geyBjb25zb2xlLmxvZygnQW5hbHl0aWNzIGVuYWJsZWQnKTsgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5hYmxlIEJvb2xlYW4gdmFsdWUgdG8gdHVybiBhbmFseXRpY3Mgb24gb3Igb2ZmIChtYW5kYXRvcnkpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmFibGVBbmFseXRpY3MoZW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiBhbmFseXRpY3MgaXMgZW5hYmxlZC5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2VzdGltb3RlLmdpdGh1Yi5pby9pT1MtU0RLL0NsYXNzZXMvRVNUQ29uZmlnLmh0bWx8RnVydGhlciBkZXRhaWxzfVxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5pc0FuYWx5dGljc0VuYWJsZWQoKS50aGVuKChlbmFibGVkKSA9PiB7IGNvbnNvbGUubG9nKCdBbmFseXRpY3MgZW5hYmxlZDogJyArIGVuYWJsZWQpOyB9KTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQW5hbHl0aWNzRW5hYmxlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGlmIEFwcCBJRCBhbmQgQXBwIFRva2VuIGlzIHNldC5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2VzdGltb3RlLmdpdGh1Yi5pby9pT1MtU0RLL0NsYXNzZXMvRVNUQ29uZmlnLmh0bWx8RnVydGhlciBkZXRhaWxzfVxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5pc0F1dGhvcml6ZWQoKS50aGVuKChpc0F1dGhvcml6ZWQpID0+IHsgY29uc29sZS5sb2coJ0FwcCBJRCBhbmQgQXBwIFRva2VuIGlzIHNldDogJyArIGlzQXV0aG9yaXplZCk7IH0pO1xuICAgKiBgYGBcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdXRob3JpemVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBBcHAgSUQgYW5kIEFwcCBUb2tlbi5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2VzdGltb3RlLmdpdGh1Yi5pby9pT1MtU0RLL0NsYXNzZXMvRVNUQ29uZmlnLmh0bWx8RnVydGhlciBkZXRhaWxzfVxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5zZXR1cEFwcElEQW5kQXBwVG9rZW4oJ015QXBwSUQnLCAnTXlBcHBUb2tlbicpLnRoZW4oKCkgPT4geyBjb25zb2xlLmxvZygnQXBwSUQgYW5kIEFwcFRva2VuIGNvbmZpZ3VyZWQhJyk7IH0pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcElEIFRoZSBBcHAgSUQgKG1hbmRhdG9yeSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBUb2tlbiBUaGUgQXBwIFRva2VuIChtYW5kYXRvcnkpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXR1cEFwcElEQW5kQXBwVG9rZW4oYXBwSUQ6IHN0cmluZywgYXBwVG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHNjYW5uaW5nIGZvciBhbGwgbmVhcmJ5IGJlYWNvbnMgdXNpbmcgQ29yZUJsdWV0b290aCAobm8gcmVnaW9uIG9iamVjdCBpcyB1c2VkKS5cbiAgICogQXZhaWxhYmxlIG9uIGlPUy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBFc3RpbW90ZUJlYWNvbnMuc3RhcnRFc3RpbW90ZUJlYWNvbkRpc2NvdmVyeSgpLnN1YnNjcmliZShiZWFjb25zID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShiZWFjb25zKSk7XG4gICAqIH0pO1xuICAgKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICogICBFc3RpbW90ZUJlYWNvbnMuc3RvcEVzdGltb3RlQmVhY29uRGlzY292ZXJ5KCkudGhlbigoKSA9PiB7IGNvbnNvbGUubG9nKCdzY2FuIHN0b3BwZWQnKTsgfSk7XG4gICAqIH0sIDUwMDApO1xuICAgKiBgYGBcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgZWFjaCBiZWFjb24gZGlzY292ZXJlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wRXN0aW1vdGVCZWFjb25EaXNjb3ZlcnknLFxuICB9KVxuICBzdGFydEVzdGltb3RlQmVhY29uRGlzY292ZXJ5KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgQ29yZUJsdWV0b290aCBzY2FuLiBBdmFpbGFibGUgb24gaU9TLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5zdGFydEVzdGltb3RlQmVhY29uRGlzY292ZXJ5KCkuc3Vic2NyaWJlKGJlYWNvbnMgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGJlYWNvbnMpKTtcbiAgICogfSk7XG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIEVzdGltb3RlQmVhY29ucy5zdG9wRXN0aW1vdGVCZWFjb25EaXNjb3ZlcnkoKS50aGVuKCgpID0+IHsgY29uc29sZS5sb2coJ3NjYW4gc3RvcHBlZCcpOyB9KTtcbiAgICogfSwgNTAwMCk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wRXN0aW1vdGVCZWFjb25EaXNjb3ZlcnkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgcmFuZ2luZyBiZWFjb25zLiBBdmFpbGFibGUgb24gaU9TIGFuZCBBbmRyb2lkLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIGxldCByZWdpb246IEVzdGltb3RlQmVhY29uUmVnaW9uID0ge30gLy8gRW1wdHkgcmVnaW9uIG1hdGNoZXMgYWxsIGJlYWNvbnMuXG4gICAqIEVzdGltb3RlQmVhY29ucy5zdGFydFJhbmdpbmdCZWFjb25zSW5SZWdpb24ocmVnaW9uKS5zdWJzY3JpYmUoaW5mbyA9PiB7XG4gICAqICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoaW5mbykpO1xuICAgKiB9KTtcbiAgICogc2V0VGltZW91dCgoKSA9PiB7XG4gICAqICAgRXN0aW1vdGVCZWFjb25zLnN0b3BSYW5naW5nQmVhY29uc0luUmVnaW9uKHJlZ2lvbikudGhlbigoKSA9PiB7IGNvbnNvbGUubG9nKCdzY2FuIHN0b3BwZWQnKTsgfSk7XG4gICAqIH0sIDUwMDApO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtFc3RpbW90ZUJlYWNvblJlZ2lvbn0gcmVnaW9uIERpY3Rpb25hcnkgd2l0aCByZWdpb24gcHJvcGVydGllcyAobWFuZGF0b3J5KS5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgZWFjaCBiZWFjb24gZGlzY292ZXJlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wUmFuZ2luZ0JlYWNvbnNJblJlZ2lvbicsXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcbiAgfSlcbiAgc3RhcnRSYW5naW5nQmVhY29uc0luUmVnaW9uKHJlZ2lvbjogRXN0aW1vdGVCZWFjb25SZWdpb24pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHJhbmdpbmcgYmVhY29ucy4gQXZhaWxhYmxlIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBsZXQgcmVnaW9uOiBFc3RpbW90ZUJlYWNvblJlZ2lvbiA9IHt9IC8vIEVtcHR5IHJlZ2lvbiBtYXRjaGVzIGFsbCBiZWFjb25zLlxuICAgKiBFc3RpbW90ZUJlYWNvbnMuc3RhcnRSYW5naW5nQmVhY29uc0luUmVnaW9uKHJlZ2lvbikuc3Vic2NyaWJlKGluZm8gPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGluZm8pKTtcbiAgICogfSk7XG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIEVzdGltb3RlQmVhY29ucy5zdG9wUmFuZ2luZ0JlYWNvbnNJblJlZ2lvbihyZWdpb24pLnRoZW4oKCkgPT4geyBjb25zb2xlLmxvZygnc2NhbiBzdG9wcGVkJyk7IH0pO1xuICAgKiB9LCA1MDAwKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7RXN0aW1vdGVCZWFjb25SZWdpb259IHJlZ2lvbiBEaWN0aW9uYXJ5IHdpdGggcmVnaW9uIHByb3BlcnRpZXMgKG1hbmRhdG9yeSkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BSYW5naW5nQmVhY29uc0luUmVnaW9uKHJlZ2lvbjogRXN0aW1vdGVCZWFjb25SZWdpb24pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCByYW5naW5nIHNlY3VyZSBiZWFjb25zLiBBdmFpbGFibGUgb24gaU9TLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBwYXJhbWV0ZXJzL2JlaGF2aW9yIGFzXG4gICAqIHtAbGluayBFc3RpbW90ZUJlYWNvbnMuc3RhcnRSYW5naW5nQmVhY29uc0luUmVnaW9ufS5cbiAgICogVG8gdXNlIHNlY3VyZSBiZWFjb25zIHNldCB0aGUgQXBwIElEIGFuZCBBcHAgVG9rZW4gdXNpbmdcbiAgICoge0BsaW5rIEVzdGltb3RlQmVhY29ucy5zZXR1cEFwcElEQW5kQXBwVG9rZW59LlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BSYW5naW5nU2VjdXJlQmVhY29uc0luUmVnaW9uJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxuICB9KVxuICBzdGFydFJhbmdpbmdTZWN1cmVCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBFc3RpbW90ZUJlYWNvblJlZ2lvbik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgcmFuZ2luZyBzZWN1cmUgYmVhY29ucy4gQXZhaWxhYmxlIG9uIGlPUy5cbiAgICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgcGFyYW1ldGVycy9iZWhhdmlvciBhc1xuICAgKiB7QGxpbmsgRXN0aW1vdGVCZWFjb25zLnN0b3BSYW5naW5nQmVhY29uc0luUmVnaW9ufS5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcFJhbmdpbmdTZWN1cmVCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBFc3RpbW90ZUJlYWNvblJlZ2lvbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG1vbml0b3JpbmcgYmVhY29ucy4gQXZhaWxhYmxlIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBsZXQgcmVnaW9uOiBFc3RpbW90ZUJlYWNvblJlZ2lvbiA9IHt9IC8vIEVtcHR5IHJlZ2lvbiBtYXRjaGVzIGFsbCBiZWFjb25zLlxuICAgKiBFc3RpbW90ZUJlYWNvbnMuc3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uKHJlZ2lvbikuc3Vic2NyaWJlKHN0YXRlID0+IHtcbiAgICogICBjb25zb2xlLmxvZygnUmVnaW9uIHN0YXRlOiAnICsgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge0VzdGltb3RlQmVhY29uUmVnaW9ufSByZWdpb24gRGljdGlvbmFyeSB3aXRoIHJlZ2lvbiBwcm9wZXJ0aWVzIChtYW5kYXRvcnkpLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5XSBTZXQgdG8gdHJ1ZSB0byBkZXRlY3QgaWYgeW91XG4gICAqIGFyZSBpbnNpZGUgYSByZWdpb24gd2hlbiB0aGUgdXNlciB0dXJucyBkaXNwbGF5IG9uLCBzZWVcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3ByZXJlbGVhc2UvaW9zL2RvY3VtZW50YXRpb24vQ29yZUxvY2F0aW9uL1JlZmVyZW5jZS9DTEJlYWNvblJlZ2lvbl9jbGFzcy9pbmRleC5odG1sIy8vYXBwbGVfcmVmL29jYy9pbnN0cC9DTEJlYWNvblJlZ2lvbi9ub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5fGlPUyBkb2N1bWVudGF0aW9ufVxuICAgKiBmb3IgZnVydGhlciBkZXRhaWxzIChpT1Mgb25seSkuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIG9mIGVhY2ggcmVnaW9uIHN0YXRlIGRpc2NvdmVyZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcE1vbml0b3JpbmdGb3JSZWdpb24nLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHN0YXJ0TW9uaXRvcmluZ0ZvclJlZ2lvbihyZWdpb246IEVzdGltb3RlQmVhY29uUmVnaW9uLCBub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBtb25pdG9yaW5nIGJlYWNvbnMuIEF2YWlsYWJsZSBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogbGV0IHJlZ2lvbjogRXN0aW1vdGVCZWFjb25SZWdpb24gPSB7fSAvLyBFbXB0eSByZWdpb24gbWF0Y2hlcyBhbGwgYmVhY29ucy5cbiAgICogRXN0aW1vdGVCZWFjb25zLnN0b3BNb25pdG9yaW5nRm9yUmVnaW9uKHJlZ2lvbikudGhlbigoKSA9PiB7IGNvbnNvbGUubG9nKCdtb25pdG9yaW5nIGlzIHN0b3BwZWQnKTsgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge0VzdGltb3RlQmVhY29uUmVnaW9ufSByZWdpb24gRGljdGlvbmFyeSB3aXRoIHJlZ2lvbiBwcm9wZXJ0aWVzIChtYW5kYXRvcnkpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wTW9uaXRvcmluZ0ZvclJlZ2lvbihyZWdpb246IEVzdGltb3RlQmVhY29uUmVnaW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgbW9uaXRvcmluZyBzZWN1cmUgYmVhY29ucy4gQXZhaWxhYmxlIG9uIGlPUy5cbiAgICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgcGFyYW1ldGVycy9iZWhhdmlvciBhc1xuICAgKiBFc3RpbW90ZUJlYWNvbnMuc3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uLlxuICAgKiBUbyB1c2Ugc2VjdXJlIGJlYWNvbnMgc2V0IHRoZSBBcHAgSUQgYW5kIEFwcCBUb2tlbiB1c2luZ1xuICAgKiB7QGxpbmsgRXN0aW1vdGVCZWFjb25zLnNldHVwQXBwSURBbmRBcHBUb2tlbn0uXG4gICAqIEBzZWUge0BsaW5rIEVzdGltb3RlQmVhY29ucy5zdGFydE1vbml0b3JpbmdGb3JSZWdpb259XG4gICAqIEBwYXJhbSB7RXN0aW1vdGVCZWFjb25SZWdpb259IHJlZ2lvbiBSZWdpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5XG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcFNlY3VyZU1vbml0b3JpbmdGb3JSZWdpb24nLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHN0YXJ0U2VjdXJlTW9uaXRvcmluZ0ZvclJlZ2lvbihyZWdpb246IEVzdGltb3RlQmVhY29uUmVnaW9uLCBub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBtb25pdG9yaW5nIHNlY3VyZSBiZWFjb25zLiBBdmFpbGFibGUgb24gaU9TLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBwYXJhbWV0ZXJzL2JlaGF2aW91ciBhc1xuICAgKiB7QGxpbmsgRXN0aW1vdGVCZWFjb25zLnN0b3BNb25pdG9yaW5nRm9yUmVnaW9ufS5cbiAgICogQHBhcmFtIHJlZ2lvbiB7RXN0aW1vdGVCZWFjb25SZWdpb259IFJlZ2lvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wU2VjdXJlTW9uaXRvcmluZ0ZvclJlZ2lvbihyZWdpb246IEVzdGltb3RlQmVhY29uUmVnaW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdCB0byBFc3RpbW90ZSBCZWFjb24uIEF2YWlsYWJsZSBvbiBBbmRyb2lkLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5jb25uZWN0VG9CZWFjb24oRkY6MEY6RjA6MDA6RjA6MDApO1xuICAgKiBgYGBcbiAgICogYGBgXG4gICAqIEVzdGltb3RlQmVhY29ucy5jb25uZWN0VG9CZWFjb24oe1xuICAgKiAgICAgcHJveGltaXR5VVVJRDogJzAwMDAwMEZGLUYwMEYtMEZGMC1GMDAwLTAwMEZGMEYwMDAwMCcsXG4gICAqICAgICBtYWpvcjogMSxcbiAgICogICAgIG1pbm9yOiAxXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge0JlYWNvbn0gYmVhY29uIEJlYWNvbiB0byBjb25uZWN0IHRvLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0VG9CZWFjb24oYmVhY29uOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IGZyb20gY29ubmVjdGVkIEVzdGltb3RlIEJlYWNvbi4gQXZhaWxhYmxlIG9uIEFuZHJvaWQuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogRXN0aW1vdGVCZWFjb25zLmRpc2Nvbm5lY3RDb25uZWN0ZWRCZWFjb24oKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc2Nvbm5lY3RDb25uZWN0ZWRCZWFjb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgcHJveGltaXR5IFVVSUQgdG8gY29ubmVjdGVkIEVzdGltb3RlIEJlYWNvbi4gQXZhaWxhYmxlIG9uIEFuZHJvaWQuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogLy8gRXhhbXBsZSB0aGF0IHdyaXRlcyBjb25zdGFudCBFU1RJTU9URV9QUk9YSU1JVFlfVVVJRFxuICAgKiBFc3RpbW90ZUJlYWNvbnMud3JpdGVDb25uZWN0ZWRQcm94aW1pdHlVVUlEKEVTVElNT1RFX1BST1hJTUlUWV9VVUlEKTtcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHV1aWQgU3RyaW5nIHRvIHdyaXRlIGFzIG5ldyBVVUlEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHdyaXRlQ29ubmVjdGVkUHJveGltaXR5VVVJRCh1dWlkOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBtYWpvciB0byBjb25uZWN0ZWQgRXN0aW1vdGUgQmVhY29uLiBBdmFpbGFibGUgb24gQW5kcm9pZC5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiAvLyBFeGFtcGxlIHRoYXQgd3JpdGVzIDFcbiAgICogRXN0aW1vdGVCZWFjb25zLndyaXRlQ29ubmVjdGVkTWFqb3IoMSk7XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvciBudW1iZXIgdG8gd3JpdGUgYXMgbmV3IG1ham9yXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHdyaXRlQ29ubmVjdGVkTWFqb3IobWFqb3I6IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIG1pbm9yIHRvIGNvbm5lY3RlZCBFc3RpbW90ZSBCZWFjb24uIEF2YWlsYWJsZSBvbiBBbmRyb2lkLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIC8vIEV4YW1wbGUgdGhhdCB3cml0ZXMgMVxuICAgKiBFc3RpbW90ZUJlYWNvbnMud3JpdGVDb25uZWN0ZWRNaW5vcigxKTtcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbm9yIG51bWJlciB0byB3cml0ZSBhcyBuZXcgbWlub3JcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgd3JpdGVDb25uZWN0ZWRNaW5vcihtaW5vcjogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==