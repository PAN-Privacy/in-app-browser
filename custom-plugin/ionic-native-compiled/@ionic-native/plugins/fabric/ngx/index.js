import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Crashlytics = /** @class */ (function (_super) {
    __extends(Crashlytics, _super);
    function Crashlytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Crashlytics.prototype.addLog = function (message) { return cordova(this, "addLog", { "sync": true }, arguments); };
    Crashlytics.prototype.sendCrash = function () { return cordova(this, "sendCrash", { "sync": true }, arguments); };
    Crashlytics.prototype.sendNonFatalCrash = function (message, stacktrace) { return cordova(this, "sendNonFatalCrash", { "sync": true }, arguments); };
    Crashlytics.prototype.recordError = function (message, code) { return cordova(this, "recordError", { "sync": true }, arguments); };
    Crashlytics.prototype.setUserIdentifier = function (userId) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    Crashlytics.prototype.setUserName = function (userName) { return cordova(this, "setUserName", { "sync": true }, arguments); };
    Crashlytics.prototype.setUserEmail = function (email) { return cordova(this, "setUserEmail", { "sync": true }, arguments); };
    Crashlytics.prototype.setStringValueForKey = function (value, key) { return cordova(this, "setStringValueForKey", { "sync": true }, arguments); };
    Crashlytics.prototype.setIntValueForKey = function (value, key) { return cordova(this, "setIntValueForKey", { "sync": true }, arguments); };
    Crashlytics.prototype.setBoolValueForKey = function (value, key) { return cordova(this, "setBoolValueForKey", { "sync": true }, arguments); };
    Crashlytics.prototype.setFloatValueForKey = function (value, key) { return cordova(this, "setFloatValueForKey", { "sync": true }, arguments); };
    Crashlytics.pluginName = "Crashlytics";
    Crashlytics.plugin = "cordova-fabric-plugin";
    Crashlytics.pluginRef = "window.fabric.Crashlytics";
    Crashlytics.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    Crashlytics.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    Crashlytics.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    Crashlytics.platforms = ["Android", "iOS"];
    Crashlytics.decorators = [
        { type: Injectable }
    ];
    return Crashlytics;
}(IonicNativePlugin));
export { Crashlytics };
var Answers = /** @class */ (function (_super) {
    __extends(Answers, _super);
    function Answers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Answers.prototype.sendPurchase = function (itemPrice, currency, success, itemName, itemType, itemId, attributes) { return cordova(this, "sendPurchase", { "sync": true }, arguments); };
    Answers.prototype.sendAddToCart = function (itemPrice, currency, itemName, itemType, itemId, attributes) { return cordova(this, "sendAddToCart", { "sync": true }, arguments); };
    Answers.prototype.sendStartCheckout = function (totalPrice, currency, itemCount, attributes) { return cordova(this, "sendStartCheckout", { "sync": true }, arguments); };
    Answers.prototype.sendSearch = function (query, attributes) { return cordova(this, "sendSearch", { "sync": true }, arguments); };
    Answers.prototype.sendShare = function (method, contentName, contentType, contentId, attributes) { return cordova(this, "sendShare", { "sync": true }, arguments); };
    Answers.prototype.sendRatedContent = function (rating, contentName, contentType, contentId, attributes) { return cordova(this, "sendRatedContent", { "sync": true }, arguments); };
    Answers.prototype.sendSignUp = function (method, success, attributes) { return cordova(this, "sendSignUp", { "sync": true }, arguments); };
    Answers.prototype.sendLogIn = function (method, success, attributes) { return cordova(this, "sendLogIn", { "sync": true }, arguments); };
    Answers.prototype.sendInvite = function (method, attributes) { return cordova(this, "sendInvite", { "sync": true }, arguments); };
    Answers.prototype.sendLevelStart = function (levelName, attributes) { return cordova(this, "sendLevelStart", { "sync": true }, arguments); };
    Answers.prototype.sendLevelEnd = function (levelName, score, success, attributes) { return cordova(this, "sendLevelEnd", { "sync": true }, arguments); };
    Answers.prototype.sendContentView = function (name, type, id, attributes) { return cordova(this, "sendContentView", { "sync": true }, arguments); };
    Answers.prototype.sendScreenView = function (name, id, attributes) { return cordova(this, "sendScreenView", { "sync": true }, arguments); };
    Answers.prototype.sendCustomEvent = function (name, attributes) { return cordova(this, "sendCustomEvent", { "sync": true }, arguments); };
    Answers.pluginName = "Answers";
    Answers.plugin = "cordova-fabric-plugin";
    Answers.pluginRef = "window.fabric.Answers";
    Answers.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    Answers.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    Answers.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    Answers.platforms = ["Android", "iOS"];
    Answers.decorators = [
        { type: Injectable }
    ];
    return Answers;
}(IonicNativePlugin));
export { Answers };
//# sourceMappingURL=data:application/json;base64,