import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance, checkAvailability } from '@ionic-native/core';
var FlurryAnalyticsObject = /** @class */ (function () {
    function FlurryAnalyticsObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    FlurryAnalyticsObject.prototype.logEvent = function (eventName, params) { return cordovaInstance(this, "logEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.startTimedEvent = function (eventName, params) { return cordovaInstance(this, "startTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.endTimedEvent = function (eventName, params) { return cordovaInstance(this, "endTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.logError = function (code, message) { return cordovaInstance(this, "logError", {}, arguments); };
    FlurryAnalyticsObject.prototype.logPageView = function () { return cordovaInstance(this, "logPageView", {}, arguments); };
    FlurryAnalyticsObject.prototype.setLocation = function (location, message) { return cordovaInstance(this, "setLocation", {}, arguments); };
    FlurryAnalyticsObject.prototype.startSession = function () { return cordovaInstance(this, "startSession", {}, arguments); };
    FlurryAnalyticsObject.prototype.endSession = function () { return cordovaInstance(this, "endSession", {}, arguments); };
    return FlurryAnalyticsObject;
}());
export { FlurryAnalyticsObject };
var FlurryAnalytics = /** @class */ (function (_super) {
    __extends(FlurryAnalytics, _super);
    function FlurryAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new instance of FlurryAnalyticsObject
     * @param {FlurryAnalyticsOptions} options Options
     * @return {FlurryAnalyticsObject}
     */
    FlurryAnalytics.prototype.create = function (options) {
        var instance;
        if (checkAvailability(FlurryAnalytics.pluginRef, null, FlurryAnalytics.pluginName) === true) {
            instance = new window.FlurryAnalytics(options);
        }
        return new FlurryAnalyticsObject(instance);
    };
    FlurryAnalytics.pluginName = "FlurryAnalytics";
    FlurryAnalytics.plugin = "cordova-plugin-flurryanalytics";
    FlurryAnalytics.pluginRef = "FlurryAnalytics";
    FlurryAnalytics.repo = "https://github.com/blakgeek/cordova-plugin-flurryanalytics";
    FlurryAnalytics.platforms = ["Android", "iOS"];
    FlurryAnalytics.decorators = [
        { type: Injectable }
    ];
    return FlurryAnalytics;
}(IonicNativePlugin));
export { FlurryAnalytics };
//# sourceMappingURL=data:application/json;base64,