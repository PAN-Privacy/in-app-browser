var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FTPOriginal = /** @class */ (function (_super) {
    __extends(FTPOriginal, _super);
    function FTPOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTPOriginal.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTPOriginal.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTPOriginal.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTPOriginal.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTPOriginal.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTPOriginal.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTPOriginal.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTPOriginal.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTPOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTPOriginal.pluginName = "FTP";
    FTPOriginal.plugin = "cordova-plugin-ftp";
    FTPOriginal.pluginRef = "cordova.plugin.ftp";
    FTPOriginal.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTPOriginal.platforms = ["Android", "iOS"];
    return FTPOriginal;
}(IonicNativePlugin));
var FTP = new FTPOriginal();
export { FTP };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStCVCx1QkFBaUI7Ozs7SUFXeEMscUJBQU8sYUFBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7SUFtQjVELGdCQUFFLGFBQUMsSUFBWTtJQVdmLG1CQUFLLGFBQUMsSUFBWTtJQWFsQixtQkFBSyxhQUFDLElBQVk7SUFXbEIsZ0JBQUUsYUFBQyxJQUFZO0lBZ0JmLG9CQUFNLGFBQUMsU0FBaUIsRUFBRSxVQUFrQjtJQWdCNUMsc0JBQVEsYUFBQyxTQUFpQixFQUFFLFVBQWtCO0lBVTlDLG9CQUFNO0lBVU4sd0JBQVU7Ozs7OztjQXRKWjtFQWlDeUIsaUJBQWlCO1NBQTdCLEdBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBGVFBcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBjb3Jkb3ZhIHBsdWdpbiBpcyBjcmVhdGVkIHRvIHVzZSBmdHAgKGNsaWVudCkgaW4gd2ViL2pzLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRlRQIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9mdHAvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmVFA6IEZUUCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZlRQLmNvbm5lY3QoJ2Z0cF9ob3N0JywgJ2Z0cF91c2VyJywgJ2Z0cF9wYXNzd29yZCcpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coJ0xvZ2luIHN1Y2Nlc3NmdWwnLCByZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGVFAnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mdHAnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbi5mdHAnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3hmYWxseS9jb3Jkb3ZhLXBsdWdpbi1mdHAnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRlRQIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29ubmVjdCB0byBvbmUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogSnVzdCBuZWVkIHRvIGluaXQgdGhlIGNvbm5lY3Rpb24gb25jZS4gSWYgc3VjY2VzcywgeW91IGNhbiBkbyBhbnkgZnRwIGFjdGlvbnMgbGF0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSBUaGUgZnRwIHNlcnZlciB1cmwuIExpa2UgaXAgd2l0aG91dCBwcm90b2NvbCBwcmVmaXgsIGUuZy4gXCIxOTIuMTY4LjEuMVwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgVGhlIGZ0cCBsb2dpbiB1c2VybmFtZS4gSWYgaXQgYW5kIGBwYXNzd29yZGAgYXJlIGFsbCBibGFuay91bmRlZmluZWQsIHRoZSBkZWZhdWx0IHVzZXJuYW1lIFwiYW5vbnltb3VzXCIgaXMgdXNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBmdHAgbG9naW4gcGFzc3dvcmQuIElmIGl0IGFuZCBgdXNlcm5hbWVgIGFyZSBhbGwgYmxhbmsvdW5kZWZpbmVkLCB0aGUgZGVmYXVsdCBwYXNzd29yZCBcImFub255bW91c0BcIiBpcyB1c2VkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFRoZSBzdWNjZXNzIGNhbGxiYWNrLiBOb3RpY2U6IEZvciBpT1MsIGlmIHRyaWdnZXJlZCwgbWVhbnMgYGluaXRgIHN1Y2Nlc3MsIGJ1dCBOT1QgbWVhbnMgdGhlIGxhdGVyIGFjdGlvbiwgZS5nLiBgbHNgLi4uIGBkb3dubG9hZGAgd2lsbCBzdWNjZXNzIVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KGhvc3RuYW1lOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGZpbGVzICh3aXRoIGluZm8gb2YgYG5hbWVgLCBgdHlwZWAsIGBsaW5rYCwgYHNpemVgLCBgbW9kaWZpZWREYXRlYCkgdW5kZXIgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICogWW91IGNhbiBnZXQgb25lIGZpbGUncyBuYW1lIHVzaW5nIGBmaWxlTGlzdFt4XS5uYW1lYCAoYHhgIGlzIHRoZSBsb2NhdGlvbiBpbiBhcnJheSkuXG4gICAqXG4gICAqIEV4cGxhaW4ga2V5OlxuICAgKiAtIG5hbWU6IGZpbGUgbmFtZSAodXRmLTgpLlxuICAgKiAtIHR5cGU6IGZpbGUgdHlwZS4gbnVtYmVyIGAwYCBtZWFucyByZWd1bGFyIGZpbGUsIGAxYCBtZWFucyBkaXJlY3RvcnksIGAyYCBtZWFucyBzeW1ib2xpYyBsaW5rLCBgLTFgIG1lYW5zIHVua25vd24gdHlwZSAobWF5YmUgYmxvY2sgZGV2LCBjaGFyIGRldi4uLikuXG4gICAqIC0gbGluazogaWYgdGhlIGZpbGUgaXMgYSBzeW1ib2xpYyBsaW5rLCB0aGVuIHRoaXMgZmllbGQgc3RvcmUgc3ltYm9saWMgbGluayBpbmZvcm1hdGlvbiAodXRmLTgpLCBlbHNlIGl0J3MgYSBibGFuayBzdHJpbmcuXG4gICAqIC0gc2l6ZTogZmlsZSBzaXplIGluIGJ5dGVzLlxuICAgKiAtIG1vZGlmaWVkRGF0ZTogbW9kaWZpZWQgZGF0ZSBvZiB0aGlzIGZpbGUuIGRhdGUgZm9ybWF0IGlzIGB5eXl5LU1NLWRkIEhIOm1tOnNzIHp6emAsIGUuZyBcIjIwMTUtMTItMDEgMjA6NDU6MDAgR01UKzhcIi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9cIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBscyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9cIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBta2RpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogVGlwOiBBcyBtYW55IGZ0cCBzZXJ2ZXIgY291bGQgbm90IHJtIGRpciB3aGVuIGl0J3Mgbm90IGVtcHR5LCBzbyBybSBhbGwgZmlsZXMgdW5kZXIgdGhlIGRpciBhdCBmaXJzdCBpcyByZWNvbW1lbmRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBkZWxldGUuIGUuZy4gXCIvYWRmLzEyMy9uZXdEaXIvbXlGaWxlXCIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcm1kaXIocGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIG9uZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBybShmaWxlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgb25lIGxvY2FsIGZpbGUgdG8gdGhlIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbEZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byB1cGxvYWQuIGUuZy4gXCIvbG9jYWwvcGF0aC90by9sb2NhbEZpbGVcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZUZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBsb2NhdGVkIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL3JlbW90ZUZpbGVcIi5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgSXQgd2lsbCBiZSB0cmlnZ2VyZWQgbWFueSB0aW1lcyBhY2NvcmRpbmcgdGhlIGZpbGUncyBzaXplLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcmcgYDBgLCBgMC4xeHhgLCBgMC4yeHhgIC4uLiBgMWAgbWVhbnMgdGhlIHVwbG9hZCBwZXJjZW50LiBXaGVuIGl0IHJlYWNoIGAxYCwgbWVhbnMgc3VjY2Vzcy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICB1cGxvYWQobG9jYWxGaWxlOiBzdHJpbmcsIHJlbW90ZUZpbGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERvd25sb2FkIG9uZSByZW1vdGUgZmlsZSBvbiB0aGUgZnRwIHNlcnZlciB0byBsb2NhbCBwYXRoLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxGaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gdXBsb2FkLiBlLmcuIFwiL2xvY2FsL3BhdGgvdG8vbG9jYWxGaWxlXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVGaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gbG9jYXRlZCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9yZW1vdGVGaWxlXCIuXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIEl0IHdpbGwgYmUgdHJpZ2dlcmVkIG1hbnkgdGltZXMgYWNjb3JkaW5nIHRoZSBmaWxlJ3Mgc2l6ZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBUaGUgYXJnIGAwYCwgYDAuMXh4YCwgYDAuMnh4YCAuLi4gYDFgIG1lYW5zIHRoZSB1cGxvYWQgcGVyY2VudC4gV2hlbiBpdCByZWFjaCBgMWAsIG1lYW5zIHN1Y2Nlc3MuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgZG93bmxvYWQobG9jYWxGaWxlOiBzdHJpbmcsIHJlbW90ZUZpbGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCBhbGwgcmVxdWVzdHMuIEFsd2F5cyBzdWNjZXNzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNhbmNlbCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IGZyb20gZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=