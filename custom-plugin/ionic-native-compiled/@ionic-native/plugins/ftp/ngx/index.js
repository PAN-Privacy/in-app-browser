import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FTP = /** @class */ (function (_super) {
    __extends(FTP, _super);
    function FTP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTP.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTP.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTP.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTP.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTP.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTP.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTP.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTP.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTP.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTP.pluginName = "FTP";
    FTP.plugin = "cordova-plugin-ftp";
    FTP.pluginRef = "cordova.plugin.ftp";
    FTP.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTP.platforms = ["Android", "iOS"];
    FTP.decorators = [
        { type: Injectable }
    ];
    return FTP;
}(IonicNativePlugin));
export { FTP };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStCVCx1QkFBaUI7Ozs7SUFXeEMscUJBQU8sYUFBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7SUFtQjVELGdCQUFFLGFBQUMsSUFBWTtJQVdmLG1CQUFLLGFBQUMsSUFBWTtJQWFsQixtQkFBSyxhQUFDLElBQVk7SUFXbEIsZ0JBQUUsYUFBQyxJQUFZO0lBZ0JmLG9CQUFNLGFBQUMsU0FBaUIsRUFBRSxVQUFrQjtJQWdCNUMsc0JBQVEsYUFBQyxTQUFpQixFQUFFLFVBQWtCO0lBVTlDLG9CQUFNO0lBVU4sd0JBQVU7Ozs7Ozs7Z0JBdEhYLFVBQVU7O2NBaENYO0VBaUN5QixpQkFBaUI7U0FBN0IsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIEZUUFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGNvcmRvdmEgcGx1Z2luIGlzIGNyZWF0ZWQgdG8gdXNlIGZ0cCAoY2xpZW50KSBpbiB3ZWIvanMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGVFAgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Z0cC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZUUDogRlRQKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5mVFAuY29ubmVjdCgnZnRwX2hvc3QnLCAnZnRwX3VzZXInLCAnZnRwX3Bhc3N3b3JkJylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZygnTG9naW4gc3VjY2Vzc2Z1bCcsIHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ZUUCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZ0cCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2luLmZ0cCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veGZhbGx5L2NvcmRvdmEtcGx1Z2luLWZ0cCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGVFAgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25uZWN0IHRvIG9uZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBKdXN0IG5lZWQgdG8gaW5pdCB0aGUgY29ubmVjdGlvbiBvbmNlLiBJZiBzdWNjZXNzLCB5b3UgY2FuIGRvIGFueSBmdHAgYWN0aW9ucyBsYXRlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBmdHAgc2VydmVyIHVybC4gTGlrZSBpcCB3aXRob3V0IHByb3RvY29sIHByZWZpeCwgZS5nLiBcIjE5Mi4xNjguMS4xXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSBUaGUgZnRwIGxvZ2luIHVzZXJuYW1lLiBJZiBpdCBhbmQgYHBhc3N3b3JkYCBhcmUgYWxsIGJsYW5rL3VuZGVmaW5lZCwgdGhlIGRlZmF1bHQgdXNlcm5hbWUgXCJhbm9ueW1vdXNcIiBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIGZ0cCBsb2dpbiBwYXNzd29yZC4gSWYgaXQgYW5kIGB1c2VybmFtZWAgYXJlIGFsbCBibGFuay91bmRlZmluZWQsIHRoZSBkZWZhdWx0IHBhc3N3b3JkIFwiYW5vbnltb3VzQFwiIGlzIHVzZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gVGhlIHN1Y2Nlc3MgY2FsbGJhY2suIE5vdGljZTogRm9yIGlPUywgaWYgdHJpZ2dlcmVkLCBtZWFucyBgaW5pdGAgc3VjY2VzcywgYnV0IE5PVCBtZWFucyB0aGUgbGF0ZXIgYWN0aW9uLCBlLmcuIGBsc2AuLi4gYGRvd25sb2FkYCB3aWxsIHN1Y2Nlc3MhXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNvbm5lY3QoaG9zdG5hbWU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgZmlsZXMgKHdpdGggaW5mbyBvZiBgbmFtZWAsIGB0eXBlYCwgYGxpbmtgLCBgc2l6ZWAsIGBtb2RpZmllZERhdGVgKSB1bmRlciBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKiBZb3UgY2FuIGdldCBvbmUgZmlsZSdzIG5hbWUgdXNpbmcgYGZpbGVMaXN0W3hdLm5hbWVgIChgeGAgaXMgdGhlIGxvY2F0aW9uIGluIGFycmF5KS5cbiAgICpcbiAgICogRXhwbGFpbiBrZXk6XG4gICAqIC0gbmFtZTogZmlsZSBuYW1lICh1dGYtOCkuXG4gICAqIC0gdHlwZTogZmlsZSB0eXBlLiBudW1iZXIgYDBgIG1lYW5zIHJlZ3VsYXIgZmlsZSwgYDFgIG1lYW5zIGRpcmVjdG9yeSwgYDJgIG1lYW5zIHN5bWJvbGljIGxpbmssIGAtMWAgbWVhbnMgdW5rbm93biB0eXBlIChtYXliZSBibG9jayBkZXYsIGNoYXIgZGV2Li4uKS5cbiAgICogLSBsaW5rOiBpZiB0aGUgZmlsZSBpcyBhIHN5bWJvbGljIGxpbmssIHRoZW4gdGhpcyBmaWVsZCBzdG9yZSBzeW1ib2xpYyBsaW5rIGluZm9ybWF0aW9uICh1dGYtOCksIGVsc2UgaXQncyBhIGJsYW5rIHN0cmluZy5cbiAgICogLSBzaXplOiBmaWxlIHNpemUgaW4gYnl0ZXMuXG4gICAqIC0gbW9kaWZpZWREYXRlOiBtb2RpZmllZCBkYXRlIG9mIHRoaXMgZmlsZS4gZGF0ZSBmb3JtYXQgaXMgYHl5eXktTU0tZGQgSEg6bW06c3Mgenp6YCwgZS5nIFwiMjAxNS0xMi0wMSAyMDo0NTowMCBHTVQrOFwiLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL1wiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxzKHBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL1wiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG1rZGlyKHBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBUaXA6IEFzIG1hbnkgZnRwIHNlcnZlciBjb3VsZCBub3Qgcm0gZGlyIHdoZW4gaXQncyBub3QgZW1wdHksIHNvIHJtIGFsbCBmaWxlcyB1bmRlciB0aGUgZGlyIGF0IGZpcnN0IGlzIHJlY29tbWVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBybWRpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgb25lIGZpbGUgb24gdGhlIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gZGVsZXRlLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL215RmlsZVwiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJtKGZpbGU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCBvbmUgbG9jYWwgZmlsZSB0byB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIHVwbG9hZC4gZS5nLiBcIi9sb2NhbC9wYXRoL3RvL2xvY2FsRmlsZVwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGxvY2F0ZWQgb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9uZXdEaXIvcmVtb3RlRmlsZVwiLlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIHRyaWdnZXJlZCBtYW55IHRpbWVzIGFjY29yZGluZyB0aGUgZmlsZSdzIHNpemUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGFyZyBgMGAsIGAwLjF4eGAsIGAwLjJ4eGAgLi4uIGAxYCBtZWFucyB0aGUgdXBsb2FkIHBlcmNlbnQuIFdoZW4gaXQgcmVhY2ggYDFgLCBtZWFucyBzdWNjZXNzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHVwbG9hZChsb2NhbEZpbGU6IHN0cmluZywgcmVtb3RlRmlsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWQgb25lIHJlbW90ZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyIHRvIGxvY2FsIHBhdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbEZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byB1cGxvYWQuIGUuZy4gXCIvbG9jYWwvcGF0aC90by9sb2NhbEZpbGVcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZUZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBsb2NhdGVkIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL3JlbW90ZUZpbGVcIi5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgSXQgd2lsbCBiZSB0cmlnZ2VyZWQgbWFueSB0aW1lcyBhY2NvcmRpbmcgdGhlIGZpbGUncyBzaXplLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcmcgYDBgLCBgMC4xeHhgLCBgMC4yeHhgIC4uLiBgMWAgbWVhbnMgdGhlIHVwbG9hZCBwZXJjZW50LiBXaGVuIGl0IHJlYWNoIGAxYCwgbWVhbnMgc3VjY2Vzcy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBkb3dubG9hZChsb2NhbEZpbGU6IHN0cmluZywgcmVtb3RlRmlsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGFsbCByZXF1ZXN0cy4gQWx3YXlzIHN1Y2Nlc3MuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2FuY2VsKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgZnJvbSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==