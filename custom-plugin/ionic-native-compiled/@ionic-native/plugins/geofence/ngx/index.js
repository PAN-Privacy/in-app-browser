import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaFunctionOverride } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Geofence = /** @class */ (function (_super) {
    __extends(Geofence, _super);
    function Geofence() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TransitionType = {
            ENTER: 1,
            EXIT: 2,
            BOTH: 3,
        };
        return _this;
    }
    Geofence.prototype.onTransitionReceived = function () { return cordovaFunctionOverride(this, "onTransitionReceived", {}, arguments); };
    Geofence.prototype.initialize = function () { return cordova(this, "initialize", {}, arguments); };
    Geofence.prototype.addOrUpdate = function (geofences) { return cordova(this, "addOrUpdate", {}, arguments); };
    Geofence.prototype.remove = function (geofenceId) { return cordova(this, "remove", {}, arguments); };
    Geofence.prototype.removeAll = function () { return cordova(this, "removeAll", {}, arguments); };
    Geofence.prototype.getWatched = function () { return cordova(this, "getWatched", {}, arguments); };
    /**
     * Called when the user clicks a geofence notification. iOS and Android only.
     *
     * @returns {Observable<any>}
     */
    Geofence.prototype.onNotificationClicked = function () {
        return new Observable(function (observer) {
            typeof window !== 'undefined' &&
                window.geofence &&
                (window.geofence.onNotificationClicked = observer.next.bind(observer));
            return function () { return (window.geofence.onNotificationClicked = function () { }); };
        });
    };
    Geofence.pluginName = "Geofence";
    Geofence.plugin = "cordova-plugin-geofence";
    Geofence.pluginRef = "geofence";
    Geofence.repo = "https://github.com/cowbell/cordova-plugin-geofence";
    Geofence.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    Geofence.decorators = [
        { type: Injectable }
    ];
    return Geofence;
}(IonicNativePlugin));
export { Geofence };
//# sourceMappingURL=data:application/json;base64,