var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var GooglePlayGamesServicesOriginal = /** @class */ (function (_super) {
    __extends(GooglePlayGamesServicesOriginal, _super);
    function GooglePlayGamesServicesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GooglePlayGamesServicesOriginal.prototype.auth = function () { return cordova(this, "auth", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.signOut = function () { return cordova(this, "signOut", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.isSignedIn = function () { return cordova(this, "isSignedIn", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showPlayer = function () { return cordova(this, "showPlayer", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.submitScore = function (data) { return cordova(this, "submitScore", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.submitScoreNow = function (data) { return cordova(this, "submitScoreNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.getPlayerScore = function (data) { return cordova(this, "getPlayerScore", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showAllLeaderboards = function () { return cordova(this, "showAllLeaderboards", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showLeaderboard = function (data) { return cordova(this, "showLeaderboard", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.unlockAchievement = function (data) { return cordova(this, "unlockAchievement", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.unlockAchievementNow = function (data) { return cordova(this, "unlockAchievementNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.incrementAchievement = function (data) { return cordova(this, "incrementAchievement", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.incrementAchievementNow = function (data) { return cordova(this, "incrementAchievementNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showAchievements = function () { return cordova(this, "showAchievements", {}, arguments); };
    GooglePlayGamesServicesOriginal.pluginName = "GooglePlayGamesServices";
    GooglePlayGamesServicesOriginal.plugin = "cordova-plugin-play-games-services";
    GooglePlayGamesServicesOriginal.pluginRef = "plugins.playGamesServices";
    GooglePlayGamesServicesOriginal.repo = "https://github.com/artberri/cordova-plugin-play-games-services";
    GooglePlayGamesServicesOriginal.platforms = ["Android"];
    GooglePlayGamesServicesOriginal.install = "ionic cordova plugin add cordova-plugin-play-games-services --variable APP_ID=\"YOUR_APP_ID";
    return GooglePlayGamesServicesOriginal;
}(IonicNativePlugin));
var GooglePlayGamesServices = new GooglePlayGamesServicesOriginal();
export { GooglePlayGamesServices };
//# sourceMappingURL=data:application/json;base64,