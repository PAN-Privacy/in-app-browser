import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Httpd = /** @class */ (function (_super) {
    __extends(Httpd, _super);
    function Httpd() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Httpd.prototype.startServer = function (options) { return cordova(this, "startServer", { "observable": true, "clearFunction": "stopServer" }, arguments); };
    Httpd.prototype.getUrl = function () { return cordova(this, "getUrl", {}, arguments); };
    Httpd.prototype.getLocalPath = function () { return cordova(this, "getLocalPath", {}, arguments); };
    Httpd.pluginName = "Httpd";
    Httpd.plugin = "cordova-plugin-httpd";
    Httpd.pluginRef = "cordova.plugins.CorHttpd";
    Httpd.repo = "https://github.com/floatinghotpot/cordova-httpd";
    Httpd.platforms = ["Android", "iOS", "macOS"];
    Httpd.decorators = [
        { type: Injectable }
    ];
    return Httpd;
}(IonicNativePlugin));
export { Httpd };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2h0dHBkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdURQLHlCQUFpQjs7OztJQVUxQywyQkFBVyxhQUFDLE9BQXNCO0lBU2xDLHNCQUFNO0lBU04sNEJBQVk7Ozs7Ozs7Z0JBN0JiLFVBQVU7O2dCQXhEWDtFQXlEMkIsaUJBQWlCO1NBQS9CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBIdHRwZE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHB1YmxpYyByb290IGRpcmVjdG9yeSBmb3IgeW91ciB3ZWIgc2VydmVyLiBUaGlzIHBhdGggaXMgcmVsYXRpdmUgdG8geW91ciBhcHAncyB3d3cgZGlyZWN0b3J5LlxuICAgKiBEZWZhdWx0IGlzIGN1cnJlbnQgZGlyZWN0b3J5LlxuICAgKi9cbiAgd3d3X3Jvb3Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcG9ydCBudW1iZXIgdG8gdXNlLlxuICAgKiBEZWZhdWx0IGlzIDg4ODhcbiAgICovXG4gIHBvcnQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIGZhbHNlIHdpbGwgYWxsb3cgcmVtb3RlIGFjY2VzcyB0byB5b3VyIHdlYiBzZXJ2ZXIgKG92ZXIgYW55IElQKS5cbiAgICogRGVmYXVsdCBpcyBmYWxzZS5cbiAgICovXG4gIGxvY2FsaG9zdF9vbmx5PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBIdHRwZFxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWJlZGRlZCBodHRwZCBmb3IgQ29yZG92YSBhcHBzLiBMaWdodCB3ZWlnaHQgSFRUUCBzZXJ2ZXIuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEh0dHBkLCBIdHRwZE9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2h0dHBkL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBodHRwZDogSHR0cGQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiBsZXQgb3B0aW9uczogSHR0cGRPcHRpb25zID0ge1xuICogICAgICB3d3dfcm9vdDogJ2h0dHBkX3Jvb3QnLCAvLyByZWxhdGl2ZSBwYXRoIHRvIGFwcCdzIHd3dyBkaXJlY3RvcnlcbiAqICAgICAgcG9ydDogODAsXG4gKiAgICAgIGxvY2FsaG9zdF9vbmx5OiBmYWxzZVxuICogIH1cbiAqXG4gKiB0aGlzLmh0dHBkLnN0YXJ0U2VydmVyKG9wdGlvbnMpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdTZXJ2ZXIgaXMgbGl2ZScpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogSHR0cGRPcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSHR0cGQnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1odHRwZCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Db3JIdHRwZCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZmxvYXRpbmdob3Rwb3QvY29yZG92YS1odHRwZCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdtYWNPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHdlYiBzZXJ2ZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIHtIdHRwZE9wdGlvbnN9XG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPHN0cmluZz59IFJldHVybnMgYW4gT2JzZXJ2YWJsZS4gU3Vic2NyaWJlIHRvIHJlY2VpdmUgdGhlIFVSTCBmb3IgeW91ciB3ZWIgc2VydmVyIChpZiBzdWNjZWVkZWQpLiBVbnN1YnNjcmliZSB0byBzdG9wIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcFNlcnZlcicsXG4gIH0pXG4gIHN0YXJ0U2VydmVyKG9wdGlvbnM/OiBIdHRwZE9wdGlvbnMpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBVUkwgb2YgdGhlIHJ1bm5pbmcgc2VydmVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgVVJMIG9mIHRoZSB3ZWIgc2VydmVyLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRVcmwoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbCBwYXRoIG9mIHRoZSBydW5uaW5nIHdlYnNlcnZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGxvY2FsIHBhdGggb2YgdGhlIHdlYiBzZXJ2ZXIuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldExvY2FsUGF0aCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19