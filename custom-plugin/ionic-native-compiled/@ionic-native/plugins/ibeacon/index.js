var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IBeaconOriginal = /** @class */ (function (_super) {
    __extends(IBeaconOriginal, _super);
    function IBeaconOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IBeaconOriginal.prototype.Delegate = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                var delegate = new window.cordova.plugins.locationManager.Delegate();
                delegate.didChangeAuthorizationStatus = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didChangeAuthorizationStatus = cb);
                    });
                };
                delegate.didDetermineStateForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didDetermineStateForRegion = cb);
                    });
                };
                delegate.didEnterRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didEnterRegion = cb);
                    });
                };
                delegate.didExitRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didExitRegion = cb);
                    });
                };
                delegate.didRangeBeaconsInRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didRangeBeaconsInRegion = cb);
                    });
                };
                delegate.didStartMonitoringForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didStartMonitoringForRegion = cb);
                    });
                };
                delegate.monitoringDidFailForRegionWithError = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.monitoringDidFailForRegionWithError = cb);
                    });
                };
                delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidStartAdvertising = cb);
                    });
                };
                delegate.peripheralManagerDidUpdateState = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidUpdateState = cb);
                    });
                };
                window.cordova.plugins.locationManager.setDelegate(delegate);
                return delegate;
            }
        })();
    };
    IBeaconOriginal.prototype.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new window.cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);
            }
        })();
    };
    IBeaconOriginal.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    IBeaconOriginal.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    IBeaconOriginal.prototype.onDomDelegateReady = function () { return cordova(this, "onDomDelegateReady", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableBluetooth = function () { return cordova(this, "enableBluetooth", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableBluetooth = function () { return cordova(this, "disableBluetooth", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startMonitoringForRegion = function (region) { return cordova(this, "startMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestStateForRegion = function (region) { return cordova(this, "requestStateForRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getAuthorizationStatus = function () { return cordova(this, "getAuthorizationStatus", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getMonitoredRegions = function () { return cordova(this, "getMonitoredRegions", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.getRangedRegions = function () { return cordova(this, "getRangedRegions", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isRangingAvailable = function () { return cordova(this, "isRangingAvailable", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isMonitoringAvailableForClass = function (region) { return cordova(this, "isMonitoringAvailableForClass", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.startAdvertising = function (region, measuredPower) { return cordova(this, "startAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.stopAdvertising = function (region) { return cordova(this, "stopAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isAdvertisingAvailable = function () { return cordova(this, "isAdvertisingAvailable", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.isAdvertising = function () { return cordova(this, "isAdvertising", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableDebugLogs = function () { return cordova(this, "disableDebugLogs", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableDebugNotifications = function () { return cordova(this, "enableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.disableDebugNotifications = function () { return cordova(this, "disableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.enableDebugLogs = function () { return cordova(this, "enableDebugLogs", { "otherPromise": true }, arguments); };
    IBeaconOriginal.prototype.appendToDeviceLog = function (message) { return cordova(this, "appendToDeviceLog", { "otherPromise": true }, arguments); };
    IBeaconOriginal.pluginName = "IBeacon";
    IBeaconOriginal.plugin = "cordova-plugin-ibeacon";
    IBeaconOriginal.pluginRef = "cordova.plugins.locationManager";
    IBeaconOriginal.repo = "https://github.com/petermetz/cordova-plugin-ibeacon";
    IBeaconOriginal.platforms = ["Android", "iOS"];
    return IBeaconOriginal;
}(IonicNativePlugin));
var IBeacon = new IBeaconOriginal();
export { IBeacon };
//# sourceMappingURL=data:application/json;base64,