import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IBeacon = /** @class */ (function (_super) {
    __extends(IBeacon, _super);
    function IBeacon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IBeacon.prototype.Delegate = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                var delegate = new window.cordova.plugins.locationManager.Delegate();
                delegate.didChangeAuthorizationStatus = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didChangeAuthorizationStatus = cb);
                    });
                };
                delegate.didDetermineStateForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didDetermineStateForRegion = cb);
                    });
                };
                delegate.didEnterRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didEnterRegion = cb);
                    });
                };
                delegate.didExitRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didExitRegion = cb);
                    });
                };
                delegate.didRangeBeaconsInRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didRangeBeaconsInRegion = cb);
                    });
                };
                delegate.didStartMonitoringForRegion = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.didStartMonitoringForRegion = cb);
                    });
                };
                delegate.monitoringDidFailForRegionWithError = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.monitoringDidFailForRegionWithError = cb);
                    });
                };
                delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidStartAdvertising = cb);
                    });
                };
                delegate.peripheralManagerDidUpdateState = function (pluginResult) {
                    return new Observable(function (observer) {
                        var cb = function (data) { return observer.next(data); };
                        return (delegate.peripheralManagerDidUpdateState = cb);
                    });
                };
                window.cordova.plugins.locationManager.setDelegate(delegate);
                return delegate;
            }
        })();
    };
    IBeacon.prototype.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new window.cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);
            }
        })();
    };
    IBeacon.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    IBeacon.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    IBeacon.prototype.onDomDelegateReady = function () { return cordova(this, "onDomDelegateReady", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableBluetooth = function () { return cordova(this, "enableBluetooth", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableBluetooth = function () { return cordova(this, "disableBluetooth", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startMonitoringForRegion = function (region) { return cordova(this, "startMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestStateForRegion = function (region) { return cordova(this, "requestStateForRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getAuthorizationStatus = function () { return cordova(this, "getAuthorizationStatus", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", { "otherPromise": true }, arguments); };
    IBeacon.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getMonitoredRegions = function () { return cordova(this, "getMonitoredRegions", { "otherPromise": true }, arguments); };
    IBeacon.prototype.getRangedRegions = function () { return cordova(this, "getRangedRegions", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isRangingAvailable = function () { return cordova(this, "isRangingAvailable", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isMonitoringAvailableForClass = function (region) { return cordova(this, "isMonitoringAvailableForClass", { "otherPromise": true }, arguments); };
    IBeacon.prototype.startAdvertising = function (region, measuredPower) { return cordova(this, "startAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.stopAdvertising = function (region) { return cordova(this, "stopAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isAdvertisingAvailable = function () { return cordova(this, "isAdvertisingAvailable", { "otherPromise": true }, arguments); };
    IBeacon.prototype.isAdvertising = function () { return cordova(this, "isAdvertising", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableDebugLogs = function () { return cordova(this, "disableDebugLogs", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableDebugNotifications = function () { return cordova(this, "enableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeacon.prototype.disableDebugNotifications = function () { return cordova(this, "disableDebugNotifications", { "otherPromise": true }, arguments); };
    IBeacon.prototype.enableDebugLogs = function () { return cordova(this, "enableDebugLogs", { "otherPromise": true }, arguments); };
    IBeacon.prototype.appendToDeviceLog = function (message) { return cordova(this, "appendToDeviceLog", { "otherPromise": true }, arguments); };
    IBeacon.pluginName = "IBeacon";
    IBeacon.plugin = "cordova-plugin-ibeacon";
    IBeacon.pluginRef = "cordova.plugins.locationManager";
    IBeacon.repo = "https://github.com/petermetz/cordova-plugin-ibeacon";
    IBeacon.platforms = ["Android", "iOS"];
    IBeacon.decorators = [
        { type: Injectable }
    ];
    return IBeacon;
}(IonicNativePlugin));
export { IBeacon };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2liZWFjb24vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8saURBQW9ELE1BQU0sb0JBQW9CLENBQUM7QUFDdEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE0UkwsMkJBQWlCOzs7O0lBUTVDLDBCQUFROzs7bURBQW9CO2dCQUMxQixJQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFdkUsUUFBUSxDQUFDLDRCQUE0QixHQUFHLFVBQUMsWUFBa0M7b0JBQ3pFLE9BQU8sSUFBSSxVQUFVLENBQXNCLFVBQUMsUUFBYTt3QkFDdkQsSUFBTSxFQUFFLEdBQUcsVUFBQyxJQUF5QixJQUFLLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQzt3QkFDOUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDdEQsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDO2dCQUVGLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxVQUFDLFlBQWtDO29CQUN2RSxPQUFPLElBQUksVUFBVSxDQUFzQixVQUFDLFFBQWE7d0JBQ3ZELElBQU0sRUFBRSxHQUFHLFVBQUMsSUFBeUIsSUFBSyxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQW5CLENBQW1CLENBQUM7d0JBQzlELE9BQU8sQ0FBQyxRQUFRLENBQUMsMEJBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ3BELENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FB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QyxDQUFDO2dCQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzdELE9BQU8sUUFBUSxDQUFDO2FBQ2pCOzs7SUFlRCw4QkFBWSxhQUNWLFNBQWlCLEVBQ2pCLElBQVksRUFDWixLQUFjLEVBQ2QsS0FBYyxFQUNkLHlCQUFtQzs7O21EQUNyQjtnQkFDZCxPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FDNUQsU0FBUyxFQUNULElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLHlCQUF5QixDQUMxQixDQUFDO2FBQ0g7OztJQU1ELDZCQUFXO0lBVVgsNkJBQVcsYUFBQyxRQUF5QjtJQXlCckMsb0NBQWtCO0lBVWxCLG9DQUFrQjtJQVdsQixpQ0FBZTtJQVdmLGtDQUFnQjtJQXNCaEIsMENBQXdCLGFBQUMsTUFBYztJQW1CdkMseUNBQXVCLGFBQUMsTUFBYztJQWtCdEMsdUNBQXFCLGFBQUMsTUFBYztJQW1CcEMsNkNBQTJCLGFBQUMsTUFBYztJQW1CMUMsNENBQTBCLGFBQUMsTUFBYztJQVd6Qyx3Q0FBc0I7SUFjdEIsK0NBQTZCO0lBVzdCLDRDQUEwQjtJQVUxQixxQ0FBbUI7SUFVbkIsa0NBQWdCO0lBVWhCLG9DQUFrQjtJQWNsQiwrQ0FBNkIsYUFBQyxNQUFjO0lBc0I1QyxrQ0FBZ0IsYUFBQyxNQUFjLEVBQUUsYUFBc0I7SUFhdkQsaUNBQWUsYUFBQyxNQUFjO0lBVTlCLHdDQUFzQjtJQVV0QiwrQkFBYTtJQVliLGtDQUFnQjtJQWFoQiwwQ0FBd0I7SUFZeEIsMkNBQXlCO0lBWXpCLGlDQUFlO0lBZWYsbUNBQWlCLGFBQUMsT0FBZTs7Ozs7OztnQkEzZGxDLFVBQVU7O2tCQTdSWDtFQThSNkIsaUJBQWlCO1NBQWpDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhQ2hlY2ssIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGNvbnN0IGNvcmRvdmE6IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBCZWFjb24ge1xuICAvKipcbiAgICogVGhlIHBoeXNpY2FsIGRldmljZSdzIGlkZW50aWZpZXIuXG4gICAqL1xuICB1dWlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBiZWFjb24ncyBtYWpvciBpZGVudGlmaWVyIG51bWJlci5cbiAgICovXG4gIG1ham9yOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBiZWFjb24ncyBtaW5vciBpZGVudGlmaWVyIG51bWJlci5cbiAgICovXG4gIG1pbm9yOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBwcm94aW1pdHkgb2YgdGhlIGJlYWNvbiByZWxhdGl2ZSB0byB0aGUgcGhvbmUuXG4gICAqXG4gICAqIFBvc3NpYmxlIG9wdGlvbnMgYXJlOlxuICAgKiBQcm94aW1pdHlJbW1lZGlhdGVcbiAgICogUHJveGltaXR5TmVhclxuICAgKiBQcm94aW1pdHlGYXJcbiAgICogUHJveGltaXR5VW5rbm93blxuICAgKi9cbiAgcHJveGltaXR5OiAnUHJveGltaXR5SW1tZWRpYXRlJyB8ICdQcm94aW1pdHlOZWFyJyB8ICdQcm94aW1pdHlGYXInIHwgJ1Byb3hpbWl0eVVua25vd24nO1xuXG4gIC8qKlxuICAgKiBUcmFuc21pc3Npb24gUG93ZXIgb2YgdGhlIGJlYWNvbi4gQSBjb25zdGFudCBlbWl0dGVkIGJ5IHRoZSBiZWFjb24gd2hpY2ggaW5kaWNhdGVzIHdoYXQncyB0aGUgZXhwZWN0ZWQgUlNTSSBhdCBhIGRpc3RhbmNlIG9mIDEgbWV0ZXIgdG8gdGhlIGJlYWNvbi5cbiAgICovXG4gIHR4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJlY2VpdmVkIFNpZ25hbCBTdHJlbmd0aCBJbmRpY2F0b3IuIFRoZSBzdHJlbmd0aCBvZiB0aGUgYmVhY29uJ3Mgc2lnbmFsIHdoZW4gaXQgcmVhY2hlcyB0aGUgZGV2aWNlLlxuICAgKiAgUlNTSSByYW5nZXMgZnJvbSBhcHJveCAtMjYgKGEgZmV3IGluY2hlcykgdG8gLTEwMCAoNDAtNTAgbSBkaXN0YW5jZSkuXG4gICAqL1xuICByc3NpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBhY2N1cmFjeSBvZiB0aGUgcmFuZ2luZy5cbiAgICovXG4gIGFjY3VyYWN5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmVhY29uUmVnaW9uIHtcbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcmVnaW9uLlxuICAgKi9cbiAgaWRlbnRpZmllcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhlIGJlYWNvbiBpZGVudGlmaWVyIHRoZSBkZXZpY2Ugd2lsbCBcIndhdGNoXCIgZm9yLiBNYW55IGJlYWNvbnMgY2FuIHNoYXJlIHRoZSBzYW1lIHV1aWQuXG4gICAqL1xuICB1dWlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBiZWFjb24ncyBtYWpvciBpZGVudGlmaWVyIG51bWJlci4gT3B0aW9uYWwsIG9mIG5vdGhpbmcgaXMgc3VwcGxpZWRcbiAgICogdGhlIHBsdWdpbiB3aWxsIHRyZWF0IGl0IGFzIGEgd2lsZGNhcmQuXG4gICAqL1xuICBtYWpvcj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGJlYWNvbidzIG1pbm9yIGlkZW50aWZpZXIgbnVtYmVyLiBPcHRpb25hbCwgb2Ygbm90aGluZyBpcyBzdXBwbGllZFxuICAgKiB0aGUgcGx1Z2luIHdpbGwgdHJlYXQgaXQgYXMgYSB3aWxkY2FyZC5cbiAgICovXG4gIG1pbm9yPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSB0aGUgZGV2aWNlIHdpbGwgc2NhbiBmb3IgYmVhY29ucyBhbmQgZGV0ZXJtaW5lIHJlZ2lvbiBzdGF0ZSBhbnl0aW1lXG4gICAqIHRoZSBkZXZpY2UncyBzY3JlZW4gaXMgdHVybmVkIG9uIG9yIG9mZi4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAqL1xuICBub3RpZnlFbnRyeVN0YXRlT25EaXNwbGF5PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaXJjdWxhclJlZ2lvbiB7XG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHJlZ2lvbi5cbiAgICovXG4gIGlkZW50aWZpZXI6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxhdGl0dWRlIG9mIHRoaXMgcmVnaW9uLlxuICAgKi9cbiAgbGF0aXR1ZGU6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxvbmdpdHVkZSBvZiB0aGlzIHJlZ2lvbi5cbiAgICovXG4gIGxvbmdpdHVkZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcmFkaXVzIG9mIHRoZSBnZW9mZW5jZSBmb3IgdGhpcyByZWdpb24uXG4gICAqL1xuICByYWRpdXM6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVnaW9uID0gQmVhY29uUmVnaW9uIHwgQ2lyY3VsYXJSZWdpb247XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJlYWNvblBsdWdpblJlc3VsdCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZGVsZWdhdGUgZnVuY3Rpb24gdGhhdCBwcm9kdWNlZCB0aGUgUGx1Z2luUmVzdWx0IG9iamVjdC5cbiAgICovXG4gIGV2ZW50VHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVnaW9uIHRoYXQgdHJpZ2dlcmVkIHRoZSBldmVudC5cbiAgICovXG4gIHJlZ2lvbjogUmVnaW9uO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBiZWFjb24gb2JqZWN0c1xuICAgKi9cbiAgYmVhY29uczogQmVhY29uW107XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGxvY2F0aW9uIHBlcm1pc3Npb24gZm9yIGlPUy5cbiAgICovXG4gIGF1dGhvcml6YXRpb25TdGF0dXM6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0YXRlIG9mIHRoZSBwaG9uZSBpbiByZWxhdGlvbiB0byB0aGUgcmVnaW9uLiBJbnNpZGUvb3V0c2lkZSBmb3IgZXhhbXBsZS5cbiAgICovXG4gIHN0YXRlOiAnQ0xSZWdpb25TdGF0ZUluc2lkZScgfCAnQ0xSZWdpb25TdGF0ZU91dHNpZGUnO1xuXG4gIC8qKlxuICAgKiBFcnJvciBtZXNzYWdlLCB1c2VkIG9ubHkgd2l0aCBtb25pdG9yaW5nRGlkRmFpbEZvclJlZ2lvbldpdGhFcnJvciBkZWxlZ2F0ZS5cbiAgICovXG4gIGVycm9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJlYWNvbkRlbGVnYXRlIHtcbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxvY2F0aW9uIHBlcm1pc3Npb24gYXV0aG9yaXphdGlvbiBzdGF0dXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPHN0cmluZz59IFJldHVybnMgYSBzdHJpbmcuXG4gICAqL1xuICBkaWRDaGFuZ2VBdXRob3JpemF0aW9uU3RhdHVzKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcblxuICAvKipcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICogd2hlbiB0aGUgbmF0aXZlIGxheWVyIGlzIGFibGUgdG8gZGV0ZXJtaW5lIHRoZSBkZXZpY2UncyBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBldmVudCBpcyBjYWxsZWQgd2hlbiB0aGUgcGhvbmUgYmVnaW5zIHN0YXJ0cyBtb25pdG9yaW5nLFxuICAgKiB3aGVuIHJlcXVlc3RTdGF0ZUZvclJlZ2lvbiBpcyBjYWxsZWQsIGV0Yy5cbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBJQmVhY29uUGx1Z2luUmVzdWx0IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCwgcmVnaW9uLCBhbmQgYmVhY29uKHMpLlxuICAgKi9cbiAgZGlkRGV0ZXJtaW5lU3RhdGVGb3JSZWdpb24oKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcblxuICAvKipcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICogd2hlbiB0aGUgcGhvbmUgZW50ZXJzIGEgcmVnaW9uIHRoYXQgaXQgd2FzIGFza2VkIHRvIG1vbml0b3IuXG4gICAqXG4gICAqIElmIHRoZSB1c2VyIGhhcyBnaXZlbiB0aGUgYXBwIEFsd2F5cy1Mb2NhdGlvbiBwZXJtaXNzaW9uLCB0aGlzIGZ1bmN0aW9uXG4gICAqICB3aWxsIGJlIGNhbGxlZCBldmVuIHdoZW4gdGhlIGFwcCBpcyBub3QgcnVubmluZyBvbiBpT1MuXG4gICAqIFRoZSBhcHAgd2lsbCBydW4gc2lsZW50bHkgaW4gdGhlIGJhY2tncm91bmQgZm9yIGEgc21hbGwgYW1vdW50IG9mIHRpbWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+fSBSZXR1cm5zIGEgSUJlYWNvblBsdWdpblJlc3VsdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXZlbnQsIHJlZ2lvbiwgYW5kIGJlYWNvbihzKS5cbiAgICovXG4gIGRpZEVudGVyUmVnaW9uKCk6IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD47XG5cbiAgLyoqXG4gICAqIEFuIE9ic2VydmFibGUgdGhhdCBwdWJsaXNoZXMgZXZlbnQgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAqIHdoZW4gdGhlIHBob25lIGV4aXRzIGEgcmVnaW9uIHRoYXQgaXQgd2FzIGFza2VkIHRvIG1vbml0b3IuXG4gICAqXG4gICAqIElmIHRoZSB1c2VyIGhhcyBnaXZlbiB0aGUgYXBwIEFsd2F5cy1Mb2NhdGlvbiBwZXJtaXNzaW9uLCB0aGlzIGZ1bmN0aW9uXG4gICAqICB3aWxsIGJlIGNhbGxlZCBldmVuIHdoZW4gdGhlIGFwcCBpcyBub3QgcnVubmluZyBvbiBpT1MuXG4gICAqIFRoZSBhcHAgd2lsbCBydW4gc2lsZW50bHkgaW4gdGhlIGJhY2tncm91bmQgZm9yIGEgc21hbGwgYW1vdW50IG9mIHRpbWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+fSBSZXR1cm5zIGEgSUJlYWNvblBsdWdpblJlc3VsdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXZlbnQsIHJlZ2lvbiwgYW5kIGJlYWNvbihzKS5cbiAgICovXG4gIGRpZEV4aXRSZWdpb24oKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcblxuICAvKipcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICogIGVhY2ggdGltZSB0aGF0IHRoZSBkZXZpY2UgcmFuZ2VzIGJlYWNvbnMuIE1vZGVybiBBbmRyb2lkIGFuZCBpT1MgZGV2aWNlcyByYW5nZVxuICAgKiBhcHJveGltYXRlbHkgb25jZSBwZXIgc2Vjb25kLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXG4gICAqL1xuICBkaWRSYW5nZUJlYWNvbnNJblJlZ2lvbigpOiBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBBbiBPYnNlcnZhYmxlIHRoYXQgcHVibGlzaGVzIGV2ZW50IGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgKiAgd2hlbiB0aGUgZGV2aWNlIGJlZ2lucyBtb25pdG9yaW5nIGEgcmVnaW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXG4gICAqL1xuICBkaWRTdGFydE1vbml0b3JpbmdGb3JSZWdpb24oKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcblxuICAvKipcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICogIHdoZW4gdGhlIGRldmljZSBmYWlscyB0byBtb25pdG9yIGEgcmVnaW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXG4gICAqL1xuICBtb25pdG9yaW5nRGlkRmFpbEZvclJlZ2lvbldpdGhFcnJvcigpOiBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBBbiBPYnNlcnZhYmxlIHRoYXQgcHVibGlzaGVzIGV2ZW50IGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgKiAgd2hlbiB0aGUgZGV2aWNlIGJlZ2lucyBhZHZlcnRpc2luZyBhcyBhbiBpQmVhY29uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pn0gUmV0dXJucyBhIElCZWFjb25QbHVnaW5SZXN1bHQgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LCByZWdpb24sIGFuZCBiZWFjb24ocykuXG4gICAqL1xuICBwZXJpcGhlcmFsTWFuYWdlckRpZFN0YXJ0QWR2ZXJ0aXNpbmcoKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0PjtcblxuICAvKipcbiAgICogQW4gT2JzZXJ2YWJsZSB0aGF0IHB1Ymxpc2hlcyBldmVudCBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICogd2hlbiB0aGUgc3RhdGUgb2YgdGhlIHBlcmlwaGVyYWwgbWFuYWdlcidzIHN0YXRlIHVwZGF0ZXMuXG4gICAqXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+fSBSZXR1cm5zIGEgSUJlYWNvblBsdWdpblJlc3VsdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXZlbnQsIHJlZ2lvbiwgYW5kIGJlYWNvbihzKS5cbiAgICovXG4gIHBlcmlwaGVyYWxNYW5hZ2VyRGlkVXBkYXRlU3RhdGUoKTogT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pjtcbn1cblxuLyoqXG4gKiBAbmFtZSBJQmVhY29uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIGlCZWFjb25zLlxuICpcbiAqICBUaGUgcGx1Z2luJ3MgQVBJIGNsb3NlbHkgbWltaWNzIHRoZSBvbmUgZXhwb3NlZCB0aHJvdWdoIHRoZSBbQ0xMb2NhdGlvbk1hbmFnZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2lvcy9kb2N1bWVudGF0aW9uL0NvcmVMb2NhdGlvbi9SZWZlcmVuY2UvQ0xMb2NhdGlvbk1hbmFnZXJfQ2xhc3MvaW5kZXguaHRtbCkgaW50cm9kdWNlZCBpbiBpT1MgNy5cbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJQmVhY29uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pYmVhY29uL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpYmVhY29uOiBJQmVhY29uKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogLy8gUmVxdWVzdCBwZXJtaXNzaW9uIHRvIHVzZSBsb2NhdGlvbiBvbiBpT1NcbiAqIHRoaXMuaWJlYWNvbi5yZXF1ZXN0QWx3YXlzQXV0aG9yaXphdGlvbigpO1xuICogLy8gY3JlYXRlIGEgbmV3IGRlbGVnYXRlIGFuZCByZWdpc3RlciBpdCB3aXRoIHRoZSBuYXRpdmUgbGF5ZXJcbiAqIGxldCBkZWxlZ2F0ZSA9IHRoaXMuaWJlYWNvbi5EZWxlZ2F0ZSgpO1xuICpcbiAqIC8vIFN1YnNjcmliZSB0byBzb21lIG9mIHRoZSBkZWxlZ2F0ZSdzIGV2ZW50IGhhbmRsZXJzXG4gKiBkZWxlZ2F0ZS5kaWRSYW5nZUJlYWNvbnNJblJlZ2lvbigpXG4gKiAgIC5zdWJzY3JpYmUoXG4gKiAgICAgZGF0YSA9PiBjb25zb2xlLmxvZygnZGlkUmFuZ2VCZWFjb25zSW5SZWdpb246ICcsIGRhdGEpLFxuICogICAgIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoKVxuICogICApO1xuICogZGVsZWdhdGUuZGlkU3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uKClcbiAqICAgLnN1YnNjcmliZShcbiAqICAgICBkYXRhID0+IGNvbnNvbGUubG9nKCdkaWRTdGFydE1vbml0b3JpbmdGb3JSZWdpb246ICcsIGRhdGEpLFxuICogICAgIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoKVxuICogICApO1xuICogZGVsZWdhdGUuZGlkRW50ZXJSZWdpb24oKVxuICogICAuc3Vic2NyaWJlKFxuICogICAgIGRhdGEgPT4ge1xuICogICAgICAgY29uc29sZS5sb2coJ2RpZEVudGVyUmVnaW9uOiAnLCBkYXRhKTtcbiAqICAgICB9XG4gKiAgICk7XG4gKlxuICogbGV0IGJlYWNvblJlZ2lvbiA9IHRoaXMuaWJlYWNvbi5CZWFjb25SZWdpb24oJ2Rlc2tCZWFjb24nLCdGNzgyNkRBNi1BU0RGLUFTREYtODAyNC1CQzVCNzFFMDg5M0UnKTtcbiAqXG4gKiB0aGlzLmliZWFjb24uc3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uKGJlYWNvblJlZ2lvbilcbiAqICAgLnRoZW4oXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ05hdGl2ZSBsYXllciByZWNlaXZlZCB0aGUgcmVxdWVzdCB0byBtb25pdG9yaW5nJyksXG4gKiAgICAgZXJyb3IgPT4gY29uc29sZS5lcnJvcignTmF0aXZlIGxheWVyIGZhaWxlZCB0byBiZWdpbiBtb25pdG9yaW5nOiAnLCBlcnJvcilcbiAqICAgKTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEJlYWNvblxuICogQmVhY29uUmVnaW9uXG4gKiBDaXJjdWxhclJlZ2lvblxuICogSUJlYWNvblBsdWdpblJlc3VsdFxuICogSUJlYWNvbkRlbGVnYXRlXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0lCZWFjb24nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pYmVhY29uJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmxvY2F0aW9uTWFuYWdlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGV0ZXJtZXR6L2NvcmRvdmEtcGx1Z2luLWliZWFjb24nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSUJlYWNvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGFyZSBkZWxlZ2F0ZXMgYmV0d2VlbiB0aGUge0BsaW5rIExvY2F0aW9uTWFuYWdlcn0gYW5kXG4gICAqIHRoZSBjb2RlIHRoYXQgY29uc3VtZXMgdGhlIG1lc3NhZ2VzIGdlbmVyYXRlZCBvbiBpbiB0aGUgbmF0aXZlIGxheWVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7SUJlYWNvbkRlbGVnYXRlfSBBbiBpbnN0YW5jZSBvZiB0aGUgdHlwZSB7QHR5cGUgRGVsZWdhdGV9LlxuICAgKi9cbiAgQENvcmRvdmFDaGVjayh7IHN5bmM6IHRydWUgfSlcbiAgRGVsZWdhdGUoKTogSUJlYWNvbkRlbGVnYXRlIHtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IG5ldyB3aW5kb3cuY29yZG92YS5wbHVnaW5zLmxvY2F0aW9uTWFuYWdlci5EZWxlZ2F0ZSgpO1xuXG4gICAgZGVsZWdhdGUuZGlkQ2hhbmdlQXV0aG9yaXphdGlvblN0YXR1cyA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5kaWRDaGFuZ2VBdXRob3JpemF0aW9uU3RhdHVzID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlbGVnYXRlLmRpZERldGVybWluZVN0YXRlRm9yUmVnaW9uID0gKHBsdWdpblJlc3VsdD86IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgICByZXR1cm4gKGRlbGVnYXRlLmRpZERldGVybWluZVN0YXRlRm9yUmVnaW9uID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlbGVnYXRlLmRpZEVudGVyUmVnaW9uID0gKHBsdWdpblJlc3VsdD86IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgICByZXR1cm4gKGRlbGVnYXRlLmRpZEVudGVyUmVnaW9uID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlbGVnYXRlLmRpZEV4aXRSZWdpb24gPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+KChvYnNlcnZlcjogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGNiID0gKGRhdGE6IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IG9ic2VydmVyLm5leHQoZGF0YSk7XG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUuZGlkRXhpdFJlZ2lvbiA9IGNiKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBkZWxlZ2F0ZS5kaWRSYW5nZUJlYWNvbnNJblJlZ2lvbiA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5kaWRSYW5nZUJlYWNvbnNJblJlZ2lvbiA9IGNiKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBkZWxlZ2F0ZS5kaWRTdGFydE1vbml0b3JpbmdGb3JSZWdpb24gPSAocGx1Z2luUmVzdWx0PzogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPElCZWFjb25QbHVnaW5SZXN1bHQ+KChvYnNlcnZlcjogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGNiID0gKGRhdGE6IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IG9ic2VydmVyLm5leHQoZGF0YSk7XG4gICAgICAgIHJldHVybiAoZGVsZWdhdGUuZGlkU3RhcnRNb25pdG9yaW5nRm9yUmVnaW9uID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlbGVnYXRlLm1vbml0b3JpbmdEaWRGYWlsRm9yUmVnaW9uV2l0aEVycm9yID0gKHBsdWdpblJlc3VsdD86IElCZWFjb25QbHVnaW5SZXN1bHQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxJQmVhY29uUGx1Z2luUmVzdWx0Pigob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjYiA9IChkYXRhOiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgICByZXR1cm4gKGRlbGVnYXRlLm1vbml0b3JpbmdEaWRGYWlsRm9yUmVnaW9uV2l0aEVycm9yID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlbGVnYXRlLnBlcmlwaGVyYWxNYW5hZ2VyRGlkU3RhcnRBZHZlcnRpc2luZyA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5wZXJpcGhlcmFsTWFuYWdlckRpZFN0YXJ0QWR2ZXJ0aXNpbmcgPSBjYik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZGVsZWdhdGUucGVyaXBoZXJhbE1hbmFnZXJEaWRVcGRhdGVTdGF0ZSA9IChwbHVnaW5SZXN1bHQ/OiBJQmVhY29uUGx1Z2luUmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUJlYWNvblBsdWdpblJlc3VsdD4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY2IgPSAoZGF0YTogSUJlYWNvblBsdWdpblJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgICAgcmV0dXJuIChkZWxlZ2F0ZS5wZXJpcGhlcmFsTWFuYWdlckRpZFVwZGF0ZVN0YXRlID0gY2IpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHdpbmRvdy5jb3Jkb3ZhLnBsdWdpbnMubG9jYXRpb25NYW5hZ2VyLnNldERlbGVnYXRlKGRlbGVnYXRlKTtcbiAgICByZXR1cm4gZGVsZWdhdGU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCZWFjb25SZWdpb25cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXIgQHNlZSB7Q0xSZWdpb259XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1dWlkIFRoZSBwcm94aW1pdHkgSUQgb2YgdGhlIGJlYWNvbiBiZWluZyB0YXJnZXRlZC5cbiAgICogVGhpcyB2YWx1ZSBtdXN0IG5vdCBiZSBibGFuayBub3IgaW52YWxpZCBhcyBhIFVVSUQuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtYWpvciBUaGUgbWFqb3IgdmFsdWUgdGhhdCB5b3UgdXNlIHRvIGlkZW50aWZ5IG9uZSBvciBtb3JlIGJlYWNvbnMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtaW5vciBUaGUgbWlub3IgdmFsdWUgdGhhdCB5b3UgdXNlIHRvIGlkZW50aWZ5IGEgc3BlY2lmaWMgYmVhY29uLlxuICAgKiBAcGFyYW0ge0JPT0x9IG5vdGlmeUVudHJ5U3RhdGVPbkRpc3BsYXlcbiAgICpcbiAgICogQHJldHVybnMge0JlYWNvblJlZ2lvbn0gUmV0dXJucyB0aGUgQmVhY29uUmVnaW9uIHRoYXQgd2FzIGNyZWF0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soeyBzeW5jOiB0cnVlIH0pXG4gIEJlYWNvblJlZ2lvbihcbiAgICBpZGVudGlmZXI6IHN0cmluZyxcbiAgICB1dWlkOiBzdHJpbmcsXG4gICAgbWFqb3I/OiBudW1iZXIsXG4gICAgbWlub3I/OiBudW1iZXIsXG4gICAgbm90aWZ5RW50cnlTdGF0ZU9uRGlzcGxheT86IGJvb2xlYW5cbiAgKTogQmVhY29uUmVnaW9uIHtcbiAgICByZXR1cm4gbmV3IHdpbmRvdy5jb3Jkb3ZhLnBsdWdpbnMubG9jYXRpb25NYW5hZ2VyLkJlYWNvblJlZ2lvbihcbiAgICAgIGlkZW50aWZlcixcbiAgICAgIHV1aWQsXG4gICAgICBtYWpvcixcbiAgICAgIG1pbm9yLFxuICAgICAgbm90aWZ5RW50cnlTdGF0ZU9uRGlzcGxheVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0lCZWFjb25EZWxlZ2F0ZX0gUmV0dXJucyB0aGUgSUJlYWNvbkRlbGVnYXRlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldERlbGVnYXRlKCk6IElCZWFjb25EZWxlZ2F0ZSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUJlYWNvbkRlbGVnYXRlfSBkZWxlZ2F0ZSBBbiBpbnN0YW5jZSBvZiBhIGRlbGVnYXRlIHRvIHJlZ2lzdGVyIHdpdGggdGhlIG5hdGl2ZSBsYXllci5cbiAgICpcbiAgICogQHJldHVybnMge0lCZWFjb25EZWxlZ2F0ZX0gUmV0dXJucyB0aGUgSUJlYWNvbkRlbGVnYXRlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldERlbGVnYXRlKGRlbGVnYXRlOiBJQmVhY29uRGVsZWdhdGUpOiBJQmVhY29uRGVsZWdhdGUge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoZSBuYXRpdmUgbGF5ZXIgdGhhdCB0aGUgY2xpZW50IHNpZGUgaXMgcmVhZHkgdG8gY29uc3VtZSBtZXNzYWdlcy5cbiAgICogUmVhZGluZXNzIGhlcmUgbWVhbnMgdGhhdCBpdCBoYXMgYSB7SUJlYWNvbkRlbGVnYXRlfSBzZXQgYnkgdGhlIGNvbnN1bWVyIGphdmFzY3JpcHRcbiAgICogY29kZS5cbiAgICpcbiAgICogVGhlIHtMb2NhdGlvbk1hbmFnZXIuc2V0RGVsZWdhdGUoKX0gd2lsbCBpbXBsaWNpdGx5IGNhbGwgdGhpcyBtZXRob2QgYXMgd2VsbCxcbiAgICogdGhlcmVmb3JlIHRoZSBvbmx5IGNhc2Ugd2hlbiB5b3UgaGF2ZSB0byBjYWxsIHRoaXMgbWFudWFsbHkgaXMgaWYgeW91IGRvbid0XG4gICAqIHdpc2ggdG8gc3BlY2lmeSBhIHtJQmVhY29uRGVsZWdhdGV9IG9mIHlvdXJzLlxuICAgKlxuICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIHNpZ25hbGluZyBtZWNoYW5pc20gaXMgdG8gbWFrZSB0aGUgZXZlbnRzIHdvcmsgd2hlbiB0aGVcbiAgICogYXBwIGlzIGJlaW5nIHdva2VuIHVwIGJ5IHRoZSBPcGVyYXRpbmcgU3lzdGVtIHRvIGdpdmUgaXQgYSBjaGFuY2UgdG8gaGFuZGxlXG4gICAqIHJlZ2lvbiBtb25pdG9yaW5nIGV2ZW50cyBmb3IgZXhhbXBsZS5cbiAgICpcbiAgICogSWYgeW91IGRvbid0IHNldCBhIHtJQmVhY29uRGVsZWdhdGV9IGFuZCBkb24ndCBjYWxsIHRoaXMgbWV0aG9kIG1hbnVhbGx5LCBhbiBlcnJvclxuICAgKiBtZXNzYWdlIGdldCBlbWl0dGVkIGluIHRoZSBuYXRpdmUgcnVudGltZSBhbmQgdGhlIERPTSBhcyB3ZWxsIGFmdGVyIGEgY2VydGFpblxuICAgKiBwZXJpb2Qgb2YgdGltZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIHJlcXVlc3QgYW5kIHN0YXJ0ZWQgdG8gc2VuZCBldmVudHMuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBvbkRvbURlbGVnYXRlUmVhZHkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYmx1ZXRvb3RoIGlzIHN3aXRjaGVkIG9uLCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSB7Qm9vbGVhbn1cbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIGJsdWV0b290aCBpcyBhY3RpdmUuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBpc0JsdWV0b290aEVuYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgQmx1ZXRvb3RoIHVzaW5nIHRoZSBuYXRpdmUgTGF5ZXIuIChBTkRST0lEIE9OTFkpXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aGVuIEJsdWV0b290aFxuICAgKiBjb3VsZCBiZSBlbmFibGVkLiBJZiBub3QsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGVuYWJsZUJsdWV0b290aCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgQmx1ZXRvb3RoIHVzaW5nIHRoZSBuYXRpdmUgTGF5ZXIuIChBTkRST0lEIE9OTFkpXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aGVuIEJsdWV0b290aFxuICAgKiBjb3VsZCBiZSBlbmFibGVkLiBJZiBub3QsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGRpc2FibGVCbHVldG9vdGgoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG1vbml0b3JpbmcgdGhlIHNwZWNpZmllZCByZWdpb24uXG4gICAqXG4gICAqIElmIGEgcmVnaW9uIG9mIHRoZSBzYW1lIHR5cGUgd2l0aCB0aGUgc2FtZSBpZGVudGlmaWVyIGlzIGFscmVhZHkgYmVpbmdcbiAgICogbW9uaXRvcmVkIGZvciB0aGlzIGFwcGxpY2F0aW9uLFxuICAgKiBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSBtb25pdG9yaW5nLiBGb3IgY2lyY3VsYXIgcmVnaW9ucywgdGhlIHJlZ2lvblxuICAgKiBtb25pdG9yaW5nIHNlcnZpY2Ugd2lsbCBwcmlvcml0aXplXG4gICAqIHJlZ2lvbnMgYnkgdGhlaXIgc2l6ZSwgZmF2b3Jpbmcgc21hbGxlciByZWdpb25zIG92ZXIgbGFyZ2VyIHJlZ2lvbnMuXG4gICAqXG4gICAqIFRoaXMgaXMgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSByZWZsZWN0ZWQgaW4gbW9uaXRvcmVkUmVnaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIG1vbml0b3JpbmcgcmVxdWVzdC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHN0YXJ0TW9uaXRvcmluZ0ZvclJlZ2lvbihyZWdpb246IFJlZ2lvbik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgbW9uaXRvcmluZyB0aGUgc3BlY2lmaWVkIHJlZ2lvbi4gIEl0IGlzIHZhbGlkIHRvIGNhbGxcbiAgICogc3RvcE1vbml0b3JpbmdGb3JSZWdpb246IGZvciBhIHJlZ2lvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGZvciBtb25pdG9yaW5nXG4gICAqIHdpdGggYSBkaWZmZXJlbnQgbG9jYXRpb24gbWFuYWdlciBvYmplY3QsIGR1cmluZyB0aGlzIG9yIHByZXZpb3VzXG4gICAqIGxhdW5jaGVzIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIFRoaXMgaXMgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSByZWZsZWN0ZWQgaW4gbW9uaXRvcmVkUmVnaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSByZXF1ZXN0IHRvIHN0b3AgbW9uaXRvcmluZy5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHN0b3BNb25pdG9yaW5nRm9yUmVnaW9uKHJlZ2lvbjogUmVnaW9uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3Qgc3RhdGUgdGhlIGZvciBzcGVjaWZpZWQgcmVnaW9uLiBXaGVuIHJlc3VsdCBpcyByZWFkeVxuICAgKiBkaWREZXRlcm1pbmVTdGF0ZUZvclJlZ2lvbiBpcyB0cmlnZ2VyZWQuIFRoaXMgY2FuIGJlIGFueSByZWdpb24sXG4gICAqIGFsc28gdGhvc2Ugd2hpY2ggaXMgbm90IGN1cnJlbnRseSBtb25pdG9yZWQuXG4gICAqXG4gICAqIFRoaXMgaXMgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSByZWZsZWN0ZWQgaW4gbW9uaXRvcmVkUmVnaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSByZXF1ZXN0IHRvIHN0b3AgbW9uaXRvcmluZy5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHJlcXVlc3RTdGF0ZUZvclJlZ2lvbihyZWdpb246IFJlZ2lvbik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCByYW5naW5nIHRoZSBzcGVjaWZpZWQgYmVhY29uIHJlZ2lvbi5cbiAgICpcbiAgICogSWYgYSByZWdpb24gb2YgdGhlIHNhbWUgdHlwZSB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBiZWluZ1xuICAgKiBtb25pdG9yZWQgZm9yIHRoaXMgYXBwbGljYXRpb24sIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIG1vbml0b3JpbmcuXG4gICAqXG4gICAqIFRoaXMgaXMgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSByZWZsZWN0ZWQgaW4gcmFuZ2VkUmVnaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7QmVhY29uUmVnaW9ufSB3aGljaCB3aWxsIGJlIG1vbml0b3JlZFxuICAgKiBieSB0aGUgb3BlcmF0aW5nIHN5c3RlbS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSBtb25pdG9yaW5nIHJlcXVlc3QuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzdGFydFJhbmdpbmdCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCByYW5naW5nIHRoZSBzcGVjaWZpZWQgcmVnaW9uLiAgSXQgaXMgdmFsaWQgdG8gY2FsbFxuICAgKiBzdG9wTW9uaXRvcmluZ0ZvclJlZ2lvbjogZm9yIGEgcmVnaW9uIHRoYXQgd2FzIHJlZ2lzdGVyZWQgZm9yIHJhbmdpbmdcbiAgICogd2l0aCBhIGRpZmZlcmVudCBsb2NhdGlvbiBtYW5hZ2VyIG9iamVjdCwgZHVyaW5nIHRoaXMgb3IgcHJldmlvdXNcbiAgICogbGF1bmNoZXMgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogVGhpcyBpcyBkb25lIGFzeW5jaHJvbm91c2x5IGFuZCBtYXkgbm90IGJlIGltbWVkaWF0ZWx5IHJlZmxlY3RlZCBpbiByYW5nZWRSZWdpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ2lvbn0gcmVnaW9uIEFuIGluc3RhbmNlIG9mIHtCZWFjb25SZWdpb259IHdoaWNoIHdpbGwgYmUgbW9uaXRvcmVkXG4gICAqIGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIHJlcXVlc3QgdG8gc3RvcCBtb25pdG9yaW5nLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgc3RvcFJhbmdpbmdCZWFjb25zSW5SZWdpb24ocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyB0aGUgbmF0aXZlIGxheWVyIHRvIGRldGVybWluZSB0aGUgY3VycmVudCBhdXRob3JpemF0aW9uIGluIGVmZmVjdC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8SUJlYWNvblBsdWdpblJlc3VsdD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggdGhlXG4gICAqIHJlcXVlc3RlZCBhdXRob3JpemF0aW9uIHN0YXR1cy5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGdldEF1dGhvcml6YXRpb25TdGF0dXMoKTogUHJvbWlzZTxJQmVhY29uUGx1Z2luUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBpT1MgOCBhbmQgYWJvdmUgb25seS4gVGhlIHBlcm1pc3Npb24gbW9kZWwgaGFzIGNoYW5nZWQgYnkgQXBwbGUgaW4gaU9TIDgsIG1ha2luZyBpdCBuZWNlc3NhcnkgZm9yIGFwcHMgdG9cbiAgICogZXhwbGljaXRseSByZXF1ZXN0IHBlcm1pc3Npb25zIHZpYSBtZXRob2RzIGxpa2UgdGhlc2U6XG4gICAqIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9wcmVyZWxlYXNlL2lPUy9kb2N1bWVudGF0aW9uL0NvcmVMb2NhdGlvbi9SZWZlcmVuY2UvQ0xMb2NhdGlvbk1hbmFnZXJfQ2xhc3MvaW5kZXguaHRtbCMvL2FwcGxlX3JlZi9vY2MvaW5zdG0vQ0xMb2NhdGlvbk1hbmFnZXIvcmVxdWVzdFdoZW5JblVzZUF1dGhvcml6YXRpb25cIj5yZXF1ZXN0V2hlbkluVXNlQXV0aG9yaXphdGlvbjwvYT5cbiAgICogPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3ByZXJlbGVhc2UvaU9TL2RvY3VtZW50YXRpb24vQ29yZUxvY2F0aW9uL1JlZmVyZW5jZS9DTExvY2F0aW9uTWFuYWdlcl9DbGFzcy9pbmRleC5odG1sIy8vYXBwbGVfcmVmL29jYy9pbnN0bS9DTExvY2F0aW9uTWFuYWdlci9yZXF1ZXN0QWx3YXlzQXV0aG9yaXphdGlvblwiPnJlcXVlc3RBbHdheXNBdXRob3JpemF0aW9uPC9hPlxuICAgKlxuICAgKiBJZiB5b3UgYXJlIHVzaW5nIHRoaXMgcGx1Z2luIG9uIEFuZHJvaWQgZGV2aWNlcyBvbmx5LCB5b3Ugd2lsbCBuZXZlciBoYXZlIHRvIHVzZSB0aGlzLCBub3Ige0Bjb2RlIHJlcXVlc3RBbHdheXNBdXRob3JpemF0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSByZXF1ZXN0IGRpYWxvZyBpcyBzaG93bi5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHJlcXVlc3RXaGVuSW5Vc2VBdXRob3JpemF0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWUgdGhlIGRvY3VtZW50YXRpb24gb2Yge0Bjb2RlIHJlcXVlc3RXaGVuSW5Vc2VBdXRob3JpemF0aW9ufSBmb3IgZnVydGhlciBkZXRhaWxzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2hlbiB0aGUgbmF0aXZlIGxheWVyXG4gICAqIHNob3dzIHRoZSByZXF1ZXN0IGRpYWxvZy5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHJlcXVlc3RBbHdheXNBdXRob3JpemF0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZWdpb25bXT59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYW4ge0FycmF5fVxuICAgKiBvZiB7UmVnaW9ufSBpbnN0YW5jZXMgdGhhdCBhcmUgYmVpbmcgbW9uaXRvcmVkIGJ5IHRoZSBuYXRpdmUgbGF5ZXIuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBnZXRNb25pdG9yZWRSZWdpb25zKCk6IFByb21pc2U8UmVnaW9uW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVnaW9uW10+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aXRoIGFuIHtBcnJheX1cbiAgICogb2Yge1JlZ2lvbn0gaW5zdGFuY2VzIHRoYXQgYXJlIGJlaW5nIHJhbmdlZCBieSB0aGUgbmF0aXZlIGxheWVyLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZ2V0UmFuZ2VkUmVnaW9ucygpOiBQcm9taXNlPFJlZ2lvbltdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgcmFuZ2luZyBpcyBhdmFpbGFibGUgb3Igbm90LCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSB7Qm9vbGVhbn1cbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIHJhbmdpbmcgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGlzUmFuZ2luZ0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiByZWdpb24gdHlwZSBpcyBzdXBwb3J0ZWQgb3Igbm90LCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdpb259IHJlZ2lvbiBBbiBpbnN0YW5jZSBvZiB7UmVnaW9ufSB3aGljaCB3aWxsIGJlIGNoZWNrZWRcbiAgICogYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aXRoIGEge0Jvb2xlYW59XG4gICAqIGluZGljYXRpbmcgd2hldGhlciB0aGUgcmVnaW9uIHR5cGUgaXMgc3VwcG9ydGVkIG9yIG5vdC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGlzTW9uaXRvcmluZ0F2YWlsYWJsZUZvckNsYXNzKHJlZ2lvbjogUmVnaW9uKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFkdmVydGlzaW5nIHRoZSBzcGVjaWZpZWQgcmVnaW9uLlxuICAgKlxuICAgKiBJZiBhIHJlZ2lvbiBhIGRpZmZlcmVudCBpZGVudGlmaWVyIGlzIGFscmVhZHkgYmVpbmcgYWR2ZXJ0aXNlZCBmb3JcbiAgICogdGhpcyBhcHBsaWNhdGlvbiwgaXQgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBuZXcgaWRlbnRpZmllci5cbiAgICpcbiAgICogVGhpcyBjYWxsIHdpbGwgYWNjZXB0IGEgdmFsaWQgYmVhY29uIGV2ZW4gd2hlbiBubyBCbHVlVG9vdGggaXMgYXZhaWxhYmxlLFxuICAgKiBhbmQgd2lsbCBzdGFydCB3aGVuIEJsdWVUb290aCBpcyBwb3dlcmVkIG9uLiBTZWUge0lCZWFjb25EZWxlZ2F0ZS59XG4gICAqXG4gICAqIEBwYXJhbSB7UmVnaW9ufSByZWdpb24gQW4gaW5zdGFuY2Ugb2Yge1JlZ2lvbn0gd2hpY2ggd2lsbCBiZSBhZHZlcnRpc2VkXG4gICAqIGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtLlxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IG1lYXN1cmVkUG93ZXI6IE9wdGlvbmFsIHBhcmFtZXRlciwgaWYgbGVmdCBlbXB0eSwgdGhlIGRldmljZSB3aWxsXG4gICAqIHVzZSBpdCdzIG93biBkZWZhdWx0IHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcbiAgICogbmF0aXZlIGxheWVyIGFja25vd2xlZGdlZCB0aGUgZGlzcGF0Y2ggb2YgdGhlIGFkdmVydGlzaW5nIHJlcXVlc3QuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzdGFydEFkdmVydGlzaW5nKHJlZ2lvbjogUmVnaW9uLCBtZWFzdXJlZFBvd2VyPzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgYWR2ZXJ0aXNpbmcgYXMgYSBiZWFjb24uXG4gICAqXG4gICAqIFRoaXMgaXMgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSByZWZsZWN0ZWQgaW4gaXNBZHZlcnRpc2luZy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIGFzIHNvb24gYXMgdGhlXG4gICAqIG5hdGl2ZSBsYXllciBhY2tub3dsZWRnZWQgdGhlIGRpc3BhdGNoIG9mIHRoZSByZXF1ZXN0IHRvIHN0b3AgYWR2ZXJ0aXNpbmcuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzdG9wQWR2ZXJ0aXNpbmcocmVnaW9uOiBSZWdpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhZHZlcnRpc2luZyBpcyBhdmFpbGFibGUgb3Igbm90LCBhY2NvcmRpbmcgdG8gdGhlIG5hdGl2ZSBsYXllci5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSB7Qm9vbGVhbn1cbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIGFkdmVydGlzaW5nIGlzIGF2YWlsYWJsZSBvciBub3QuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBpc0FkdmVydGlzaW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGFkdmVydGlzaW5nIGlzIGN1cnJlbnRseSBhY3RpdmUsIGFjY29yZGluZyB0byB0aGUgbmF0aXZlIGxheWVyLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCBhIHtCb29sZWFufVxuICAgKiBpbmRpY2F0aW5nIHdoZXRoZXIgYWR2ZXJ0aXNpbmcgaXMgYWN0aXZlLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgaXNBZHZlcnRpc2luZygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgZGVidWcgbG9nZ2luZyBpbiB0aGUgbmF0aXZlIGxheWVyLiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IHdhbnRcbiAgICogdG8gcHJldmVudCB0aGlzIHBsdWdpbiBmcm9tIHdyaXRpbmcgdG8gdGhlIGRldmljZSBsb2dzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGVcbiAgICogbmF0aXZlIGxheWVyIGhhcyBzZXQgdGhlIGxvZ2dpbmcgbGV2ZWwgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBkaXNhYmxlRGVidWdMb2dzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBwb3N0aW5nIG9mIGRlYnVnIG5vdGlmaWNhdGlvbnMgaW4gdGhlIG5hdGl2ZSBsYXllci4gVXNlIHRoaXMgbWV0aG9kIGlmIHlvdSB3YW50XG4gICAqIHRvIGFsbG93IHRoZSBwbHVnaW4gdGhlIHBvc3RpbmcgbG9jYWwgbm90aWZpY2F0aW9ucy5cbiAgICogVGhpcyBjYW4gYmUgdmVyeSBoZWxwZnVsIHdoZW4gZGVidWdnaW5nIGhvdyB0byBhcHBzIGJlaGF2ZSB3aGVuIGxhdW5jaGVkIGludG8gdGhlIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgZmxhZyB0byBlbmFibGVkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZW5hYmxlRGVidWdOb3RpZmljYXRpb25zKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgcG9zdGluZyBvZiBkZWJ1ZyBub3RpZmljYXRpb25zIGluIHRoZSBuYXRpdmUgbGF5ZXIuIFVzZSB0aGlzIG1ldGhvZCBpZiB5b3Ugd2FudFxuICAgKiB0byBwcmV2ZW50IHRoZSBwbHVnaW4gZnJvbSBwb3N0aW5nIGxvY2FsIG5vdGlmaWNhdGlvbnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgZmxhZyB0byBkaXNhYmxlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGRpc2FibGVEZWJ1Z05vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgZGVidWcgbG9nZ2luZyBpbiB0aGUgbmF0aXZlIGxheWVyLiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IHdhbnRcbiAgICogYSBkZWJ1ZyB0aGUgaW5uZXIgd29ya2luZ3Mgb2YgdGhpcyBwbHVnaW4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCBhcyBzb29uIGFzIHRoZVxuICAgKiBuYXRpdmUgbGF5ZXIgaGFzIHNldCB0aGUgbG9nZ2luZyBsZXZlbCBhY2NvcmRpbmdseS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGVuYWJsZURlYnVnTG9ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgcHJvdmlkZWQgW21lc3NhZ2VdIHRvIHRoZSBkZXZpY2UgbG9ncy5cbiAgICogTm90ZTogSWYgZGVidWcgbG9nZ2luZyBpcyB0dXJuZWQgb2ZmLCB0aGlzIHdvbid0IGRvIGFueXRoaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQgdG8gdGhlIGRldmljZSBsb2dzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWQgd2l0aCB0aGUgbG9nXG4gICAqIG1lc3NhZ2UgcmVjZWl2ZWQgYnkgdGhlIG5hdGl2ZSBsYXllciBmb3IgYXBwZW5kaW5nLiBUaGUgcmV0dXJuZWQgbWVzc2FnZVxuICAgKiBpcyBleHBlY3RlZCB0byBiZSBlcXVpdmFsZW50IHRvIHRoZSBvbmUgcHJvdmlkZWQgaW4gdGhlIG9yaWdpbmFsIGNhbGwuXG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBhcHBlbmRUb0RldmljZUxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==