import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var Comparison;
(function (Comparison) {
    /**
     * The less than or equal to operator.
     */
    Comparison["LE"] = "LE";
    /**
     * The less than operator.
     */
    Comparison["LT"] = "LT";
    /**
     * The equality operator.
     */
    Comparison["EQ"] = "EQ";
    /**
     * The not equal to operator.
     */
    Comparison["NE"] = "NE";
    /**
     * The greater than operator.
     */
    Comparison["GT"] = "GT";
    /**
     * The greater than or equal to operator.
     */
    Comparison["GE"] = "GE";
})(Comparison || (Comparison = {}));
/**
 * All available message flags. Set or remove flag using "setFlag()".
 */
export var FlagEnum;
(function (FlagEnum) {
    /**
     * "ANSWERED" message flag
     */
    FlagEnum["ANSWERED"] = "ANSWERED";
    /**
     * "DRAFT" message flag
     */
    FlagEnum["DRAFT"] = "DRAFT";
    /**
     * "FLAGGED" message flag
     */
    FlagEnum["FLAGGED"] = "FLAGGED";
    /**
     * "RECENT" message flag
     */
    FlagEnum["RECENT"] = "RECENT";
    /**
     * "SEEN" message flag
     */
    FlagEnum["SEEN"] = "SEEN";
    /**
     * "USER" message flag
     */
    FlagEnum["USER"] = "USER";
    /**
     * "DELETED" message flag. Note: Add this flag to delete the message from the mailbox
     */
    FlagEnum["DELETED"] = "DELETED";
})(FlagEnum || (FlagEnum = {}));
var Imap = /** @class */ (function (_super) {
    __extends(Imap, _super);
    function Imap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Imap.prototype.connect = function (clientData) { return cordova(this, "connect", {}, arguments); };
    Imap.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    Imap.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    Imap.prototype.listMailFolders = function () { return cordova(this, "listMailFolders", {}, arguments); };
    Imap.prototype.getMessageCountByFolderName = function (folderName) { return cordova(this, "getMessageCountByFolderName", {}, arguments); };
    Imap.prototype.searchMessagesByDatePeriod = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "searchMessagesByDatePeriod", {}, arguments); };
    Imap.prototype.listMessagesHeadersByConsecutiveNumber = function (folderName, start, end) { return cordova(this, "listMessagesHeadersByConsecutiveNumber", {}, arguments); };
    Imap.prototype.listMessagesHeadersByDate = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "listMessagesHeadersByDate", {}, arguments); };
    Imap.prototype.getFullMessageData = function (folderName, messageNumber) { return cordova(this, "getFullMessageData", {}, arguments); };
    Imap.prototype.copyToFolder = function (sourceFolder, destinationFolder, messageNums) { return cordova(this, "copyToFolder", {}, arguments); };
    Imap.prototype.setFlag = function (folderName, messageNums, flag, status) { return cordova(this, "setFlag", {}, arguments); };
    Imap.pluginName = "Imap";
    Imap.plugin = "cordova-plugin-imap";
    Imap.pluginRef = "imap";
    Imap.repo = "https://github.com/aleksandar888/cordova-plugin-imap.git";
    Imap.platforms = ["Android"];
    Imap.decorators = [
        { type: Injectable }
    ];
    return Imap;
}(IonicNativePlugin));
export { Imap };
//# sourceMappingURL=data:application/json;base64,