var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IndexAppContentOriginal = /** @class */ (function (_super) {
    __extends(IndexAppContentOriginal, _super);
    function IndexAppContentOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexAppContentOriginal.prototype.isIndexingAvailable = function () { return cordova(this, "isIndexingAvailable", {}, arguments); };
    IndexAppContentOriginal.prototype.setItems = function (items) { return cordova(this, "setItems", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForDomains = function (domains) { return cordova(this, "clearItemsForDomains", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForIdentifiers = function (identifiers) { return cordova(this, "clearItemsForIdentifiers", {}, arguments); };
    IndexAppContentOriginal.prototype.onItemPressed = function () { return cordovaFunctionOverride(this, "onItemPressed", {}, arguments); };
    IndexAppContentOriginal.prototype.setIndexingInterval = function (intervalMinutes) { return cordova(this, "setIndexingInterval", {}, arguments); };
    IndexAppContentOriginal.pluginName = "IndexAppContent";
    IndexAppContentOriginal.plugin = "cordova-plugin-indexappcontent";
    IndexAppContentOriginal.pluginRef = "window.plugins.indexAppContent";
    IndexAppContentOriginal.repo = "https://github.com/johanblomgren/cordova-plugin-indexappcontent";
    IndexAppContentOriginal.platforms = ["iOS"];
    return IndexAppContentOriginal;
}(IonicNativePlugin));
var IndexAppContent = new IndexAppContentOriginal();
export { IndexAppContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luZGV4LWFwcC1jb250ZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVEQUErRCxNQUFNLG9CQUFvQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdUVHLG1DQUFpQjs7OztJQU9wRCw2Q0FBbUI7SUFVbkIsa0NBQVEsYUFBQyxLQUFrQjtJQVUzQiw4Q0FBb0IsYUFBQyxPQUFpQjtJQVV0QyxrREFBd0IsYUFBQyxXQUFxQjtJQVU5Qyx1Q0FBYTtJQVViLDZDQUFtQixhQUFDLGVBQXVCOzs7Ozs7MEJBbEk3QztFQXlFcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhRnVuY3Rpb25PdmVycmlkZSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhJdGVtIHtcbiAgZG9tYWluOiBzdHJpbmc7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKipcbiAgICogVXJsIHRvIGltYWdlXG4gICAqL1xuICB1cmw6IHN0cmluZztcblxuICAvKipcbiAgICogSXRlbSBrZXl3b3Jkc1xuICAgKi9cbiAga2V5d29yZHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTGlmZXRpbWUgaW4gbWludXRlc1xuICAgKi9cbiAgbGlmZXRpbWU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgSW5kZXggQXBwIENvbnRlbnRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGEgSmF2YXNjcmlwdCBBUEkgdG8gaW50ZXJhY3Qgd2l0aCBDb3JlIFNwb3RsaWdodCBvbiBpT1MgKD0+IGlPUyA5KS5cbiAqIFlvdSBjYW4gYWRkLCB1cGRhdGUgYW5kIGRlbGV0ZSBpdGVtcyB0byB0aGUgc3BvdGxpZ2h0IHNlYXJjaCBpbmRleC5cbiAqIFNwb3RsaWdodCBTZWFyY2ggd2lsbCBpbmNsdWRlIHRoZXNlIGl0ZW1zIGluIHRoZSByZXN1bHQgbGlzdC4gWW91IGNhbiBkZWVwLWxpbmsgdGhlIHNlYXJjaCByZXN1bHRzIHdpdGggeW91ciBhcHAuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbmRleEFwcENvbnRlbnQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2luZGV4LWFwcC1jb250ZW50L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5kZXhBcHBDb250ZW50OiBJbmRleEFwcENvbnRlbnQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHZhciBpdGVtcyA9IFtcbiAqICAgICAge1xuICogICAgICAgIGRvbWFpbjogJ2NvbS5teS5kb21haW4nLFxuICogICAgICAgIGlkZW50aWZpZXI6ICc4OGFzZGY3ZHNmJyxcbiAqICAgICAgICB0aXRsZTogJ0ZvbycsXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdCYXInLFxuICogICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhdGlvbi9vZi9teS9pbWFnZS5qcGcnLFxuICogICAgfSxcbiAqICAgIHtcbiAqICAgICAgICBkb21haW46ICdjb20ub3RoZXIuZG9tYWluJyxcbiAqICAgICAgICBpZGVudGlmaWVyOiAnOWFzZDY3ZzZhJyxcbiAqICAgICAgICB0aXRsZTogJ0JheicsXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdXb290JyxcbiAqICAgICAgICB1cmw6ICdodHRwOi8vbG9jYXRpb24vb2YvbXkvaW1hZ2UyLmpwZycsXG4gKiAgICAgfVxuICogXTtcbiAqXG4gKiB0aGlzLmluZGV4QXBwQ29udGVudC5zZXRJdGVtcyhpdGVtcylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJbmRleEFwcENvbnRlbnQnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbmRleGFwcGNvbnRlbnQnLFxuICBwbHVnaW5SZWY6ICd3aW5kb3cucGx1Z2lucy5pbmRleEFwcENvbnRlbnQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYmxvbWdyZW4vY29yZG92YS1wbHVnaW4taW5kZXhhcHBjb250ZW50JyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbmRleEFwcENvbnRlbnQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIHRvIGluZGV4IGFwcCBjb250ZW50IG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgYXQgYWxsIGR1ZSB0byBkZXZpY2UgbGltaXRhdGlvbnMgb3IgdXNlciBzZXR0aW5ncy5cbiAgICogVGhlcmVmb3JlIGl0J3MgaGlnaGx5IHJlY29tbWVuZGVkIHRvIGNoZWNrIHVwZnJvbnQgaWYgaW5kZXhpbmcgaXMgcG9zc2libGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0cnVlIGlmIGluZGV4aW5nIGlzIGF2YWlsYWJsZSwgZmFsc2UgaWYgbm90XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzSW5kZXhpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvciBjaGFuZ2UgaXRlbXMgdG8gc3BvdGxpZ2h0IGluZGV4XG4gICAqIEBwYXJhbSB7SW5kZXhJdGVtW119IGl0ZW1zIEFycmF5IG9mIGl0ZW1zIHRvIGluZGV4XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBpZiBpbmRleCBzZXQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRJdGVtcyhpdGVtczogSW5kZXhJdGVtW10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaXRlbXMgc3RvcmVkIGZvciBhIGdpdmVuIGFycmF5IG9mIGRvbWFpbnNcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gZG9tYWlucyBBcnJheSBvZiBkb21haW5zIHRvIGNsZWFyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmVzb2x2ZSBpZiBzdWNjZXNzZnVsbHlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xlYXJJdGVtc0ZvckRvbWFpbnMoZG9tYWluczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaXRlbXMgc3RvcmVkIGZvciBhIGdpdmVuIGFycmF5IG9mIGlkZW50aWZpZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGlkZW50aWZpZXJzIEFycmF5IG9mIGlkZW50aWZpZXJzIHRvIGNsZWFyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmVzb2x2ZSBpZiBzdWNjZXNzZnVsbHlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xlYXJJdGVtc0ZvcklkZW50aWZpZXJzKGlkZW50aWZpZXJzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHVzZXIgdGFwcyBvbiBhIHNlYXJjaCByZXN1bHQgaW4gc3BvdGxpZ2h0IHRoZW4gdGhlIGFwcCB3aWxsIGJlIGxhdW5jaGVkLlxuICAgKiBZb3UgY2FuIHJlZ2lzdGVyIGEgSmF2YXNjcmlwdCBoYW5kbGVyIHRvIGdldCBpbmZvcm1lZCB3aGVuIHRoaXMgaGFwcGVucy5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gaGUgdXNlciBwcmVzc2VzIG9uIHRoZSBob21lIHNjcmVlbiBpY29uXG4gICAqL1xuICBAQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUoKVxuICBvbkl0ZW1QcmVzc2VkKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBtaWdodCB3YW50IHRvIGF2b2lkIHRvIHVwZGF0ZSBzcG90bGlnaHQgaW5kZXggdG9vIGZyZXF1ZW50bHkuXG4gICAqIFdpdGhvdXQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGEgc3Vic2VxdWVudCBjYWxsIHRvIG1hbmlwdWxhdGUgdGhlIGluZGV4IGlzIG9ubHkgcG9zc2libGUgYWZ0ZXIgMTQ0MCBtaW51dGVzICg9IDI0IGhvdXJzKSFcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsTWludXRlcyB2YWx1ZSA9PiAwXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEluZGV4aW5nSW50ZXJ2YWwoaW50ZXJ2YWxNaW51dGVzOiBudW1iZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==