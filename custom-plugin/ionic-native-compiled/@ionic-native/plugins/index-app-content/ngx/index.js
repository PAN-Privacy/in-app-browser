import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IndexAppContent = /** @class */ (function (_super) {
    __extends(IndexAppContent, _super);
    function IndexAppContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexAppContent.prototype.isIndexingAvailable = function () { return cordova(this, "isIndexingAvailable", {}, arguments); };
    IndexAppContent.prototype.setItems = function (items) { return cordova(this, "setItems", {}, arguments); };
    IndexAppContent.prototype.clearItemsForDomains = function (domains) { return cordova(this, "clearItemsForDomains", {}, arguments); };
    IndexAppContent.prototype.clearItemsForIdentifiers = function (identifiers) { return cordova(this, "clearItemsForIdentifiers", {}, arguments); };
    IndexAppContent.prototype.onItemPressed = function () { return cordovaFunctionOverride(this, "onItemPressed", {}, arguments); };
    IndexAppContent.prototype.setIndexingInterval = function (intervalMinutes) { return cordova(this, "setIndexingInterval", {}, arguments); };
    IndexAppContent.pluginName = "IndexAppContent";
    IndexAppContent.plugin = "cordova-plugin-indexappcontent";
    IndexAppContent.pluginRef = "window.plugins.indexAppContent";
    IndexAppContent.repo = "https://github.com/johanblomgren/cordova-plugin-indexappcontent";
    IndexAppContent.platforms = ["iOS"];
    IndexAppContent.decorators = [
        { type: Injectable }
    ];
    return IndexAppContent;
}(IonicNativePlugin));
export { IndexAppContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luZGV4LWFwcC1jb250ZW50L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVEQUErRCxNQUFNLG9CQUFvQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdUVHLG1DQUFpQjs7OztJQU9wRCw2Q0FBbUI7SUFVbkIsa0NBQVEsYUFBQyxLQUFrQjtJQVUzQiw4Q0FBb0IsYUFBQyxPQUFpQjtJQVV0QyxrREFBd0IsYUFBQyxXQUFxQjtJQVU5Qyx1Q0FBYTtJQVViLDZDQUFtQixhQUFDLGVBQXVCOzs7Ozs7O2dCQTFENUMsVUFBVTs7MEJBeEVYO0VBeUVxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBJbmRleEl0ZW0ge1xuICBkb21haW46IHN0cmluZztcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVcmwgdG8gaW1hZ2VcbiAgICovXG4gIHVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJdGVtIGtleXdvcmRzXG4gICAqL1xuICBrZXl3b3Jkcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBMaWZldGltZSBpbiBtaW51dGVzXG4gICAqL1xuICBsaWZldGltZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBJbmRleCBBcHAgQ29udGVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBnaXZlcyB5b3UgYSBKYXZhc2NyaXB0IEFQSSB0byBpbnRlcmFjdCB3aXRoIENvcmUgU3BvdGxpZ2h0IG9uIGlPUyAoPT4gaU9TIDkpLlxuICogWW91IGNhbiBhZGQsIHVwZGF0ZSBhbmQgZGVsZXRlIGl0ZW1zIHRvIHRoZSBzcG90bGlnaHQgc2VhcmNoIGluZGV4LlxuICogU3BvdGxpZ2h0IFNlYXJjaCB3aWxsIGluY2x1ZGUgdGhlc2UgaXRlbXMgaW4gdGhlIHJlc3VsdCBsaXN0LiBZb3UgY2FuIGRlZXAtbGluayB0aGUgc2VhcmNoIHJlc3VsdHMgd2l0aCB5b3VyIGFwcC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEluZGV4QXBwQ29udGVudCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW5kZXgtYXBwLWNvbnRlbnQvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbmRleEFwcENvbnRlbnQ6IEluZGV4QXBwQ29udGVudCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdmFyIGl0ZW1zID0gW1xuICogICAgICB7XG4gKiAgICAgICAgZG9tYWluOiAnY29tLm15LmRvbWFpbicsXG4gKiAgICAgICAgaWRlbnRpZmllcjogJzg4YXNkZjdkc2YnLFxuICogICAgICAgIHRpdGxlOiAnRm9vJyxcbiAqICAgICAgICBkZXNjcmlwdGlvbjogJ0JhcicsXG4gKiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2F0aW9uL29mL215L2ltYWdlLmpwZycsXG4gKiAgICB9LFxuICogICAge1xuICogICAgICAgIGRvbWFpbjogJ2NvbS5vdGhlci5kb21haW4nLFxuICogICAgICAgIGlkZW50aWZpZXI6ICc5YXNkNjdnNmEnLFxuICogICAgICAgIHRpdGxlOiAnQmF6JyxcbiAqICAgICAgICBkZXNjcmlwdGlvbjogJ1dvb3QnLFxuICogICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhdGlvbi9vZi9teS9pbWFnZTIuanBnJyxcbiAqICAgICB9XG4gKiBdO1xuICpcbiAqIHRoaXMuaW5kZXhBcHBDb250ZW50LnNldEl0ZW1zKGl0ZW1zKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0luZGV4QXBwQ29udGVudCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWluZGV4YXBwY29udGVudCcsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLmluZGV4QXBwQ29udGVudCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vam9oYW5ibG9tZ3Jlbi9jb3Jkb3ZhLXBsdWdpbi1pbmRleGFwcGNvbnRlbnQnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEluZGV4QXBwQ29udGVudCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gdG8gaW5kZXggYXBwIGNvbnRlbnQgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBhdCBhbGwgZHVlIHRvIGRldmljZSBsaW1pdGF0aW9ucyBvciB1c2VyIHNldHRpbmdzLlxuICAgKiBUaGVyZWZvcmUgaXQncyBoaWdobHkgcmVjb21tZW5kZWQgdG8gY2hlY2sgdXBmcm9udCBpZiBpbmRleGluZyBpcyBwb3NzaWJsZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRydWUgaWYgaW5kZXhpbmcgaXMgYXZhaWxhYmxlLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNJbmRleGluZ0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkIG9yIGNoYW5nZSBpdGVtcyB0byBzcG90bGlnaHQgaW5kZXhcbiAgICogQHBhcmFtIHtJbmRleEl0ZW1bXX0gaXRlbXMgQXJyYXkgb2YgaXRlbXMgdG8gaW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGlmIGluZGV4IHNldCB3YXMgc3VjY2Vzc2Z1bGx5XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEl0ZW1zKGl0ZW1zOiBJbmRleEl0ZW1bXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpdGVtcyBzdG9yZWQgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgZG9tYWluc1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBkb21haW5zIEFycmF5IG9mIGRvbWFpbnMgdG8gY2xlYXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlIGlmIHN1Y2Nlc3NmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhckl0ZW1zRm9yRG9tYWlucyhkb21haW5zOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpdGVtcyBzdG9yZWQgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgaWRlbnRpZmllcnNcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gaWRlbnRpZmllcnMgQXJyYXkgb2YgaWRlbnRpZmllcnMgdG8gY2xlYXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlIGlmIHN1Y2Nlc3NmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhckl0ZW1zRm9ySWRlbnRpZmllcnMoaWRlbnRpZmllcnM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSWYgdXNlciB0YXBzIG9uIGEgc2VhcmNoIHJlc3VsdCBpbiBzcG90bGlnaHQgdGhlbiB0aGUgYXBwIHdpbGwgYmUgbGF1bmNoZWQuXG4gICAqIFlvdSBjYW4gcmVnaXN0ZXIgYSBKYXZhc2NyaXB0IGhhbmRsZXIgdG8gZ2V0IGluZm9ybWVkIHdoZW4gdGhpcyBoYXBwZW5zLlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiBoZSB1c2VyIHByZXNzZXMgb24gdGhlIGhvbWUgc2NyZWVuIGljb25cbiAgICovXG4gIEBDb3Jkb3ZhRnVuY3Rpb25PdmVycmlkZSgpXG4gIG9uSXRlbVByZXNzZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogWW91IG1pZ2h0IHdhbnQgdG8gYXZvaWQgdG8gdXBkYXRlIHNwb3RsaWdodCBpbmRleCB0b28gZnJlcXVlbnRseS5cbiAgICogV2l0aG91dCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gYSBzdWJzZXF1ZW50IGNhbGwgdG8gbWFuaXB1bGF0ZSB0aGUgaW5kZXggaXMgb25seSBwb3NzaWJsZSBhZnRlciAxNDQwIG1pbnV0ZXMgKD0gMjQgaG91cnMpIVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxNaW51dGVzIHZhbHVlID0+IDBcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0SW5kZXhpbmdJbnRlcnZhbChpbnRlcnZhbE1pbnV0ZXM6IG51bWJlcikge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19