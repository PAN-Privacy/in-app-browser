var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IntercomOriginal = /** @class */ (function (_super) {
    __extends(IntercomOriginal, _super);
    function IntercomOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntercomOriginal.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    IntercomOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    IntercomOriginal.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    IntercomOriginal.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    IntercomOriginal.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    IntercomOriginal.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    IntercomOriginal.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    IntercomOriginal.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    IntercomOriginal.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    IntercomOriginal.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    IntercomOriginal.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    IntercomOriginal.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    IntercomOriginal.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    IntercomOriginal.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    IntercomOriginal.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    IntercomOriginal.prototype.displayCarousel = function (carouselId) { return cordova(this, "displayCarousel", {}, arguments); };
    IntercomOriginal.prototype.displayArticle = function (articleId) { return cordova(this, "displayArticle", {}, arguments); };
    IntercomOriginal.prototype.setBottomPadding = function (bottomPadding) { return cordova(this, "setBottomPadding", {}, arguments); };
    IntercomOriginal.pluginName = "Intercom";
    IntercomOriginal.plugin = "cordova-plugin-intercom";
    IntercomOriginal.pluginRef = "intercom";
    IntercomOriginal.repo = "https://github.com/intercom/intercom-cordova";
    IntercomOriginal.platforms = ["Android", "iOS"];
    return IntercomOriginal;
}(IonicNativePlugin));
var Intercom = new IntercomOriginal();
export { Intercom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ludGVyY29tL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWdDMUMsNEJBQWlCOzs7O0lBTzdDLHlDQUFzQixhQUFDLE9BQVk7SUFVbkMsMkNBQXdCLGFBQUMsT0FBWTtJQVNyQyx3QkFBSztJQVNMLHlCQUFNO0lBWU4sZ0NBQWEsYUFBQyxVQUFrQixFQUFFLFVBQWU7SUFVakQsOEJBQVcsYUFBQyxVQUFrQjtJQVU5Qiw2QkFBVSxhQUFDLFVBQWU7SUFXMUIsMkJBQVEsYUFBQyxTQUFpQixFQUFFLFFBQWE7SUFTekMsbUNBQWdCO0lBU2hCLHlDQUFzQjtJQVV0QiwyREFBd0MsYUFBQyxjQUFzQjtJQVMvRCwyQ0FBd0I7SUFTeEIsb0NBQWlCO0lBU2pCLDBDQUF1QjtJQVV2Qix3Q0FBcUIsYUFBQyxVQUFrQjtJQVV4Qyw0Q0FBeUIsYUFBQyxVQUFrQjtJQVM1QyxnQ0FBYTtJQVNiLGtDQUFlO0lBVWYsMENBQXVCLGFBQUMsS0FBYTtJQVVyQyxrQ0FBZSxhQUFDLFVBQWtCO0lBVWxDLGlDQUFjLGFBQUMsU0FBaUI7SUFVaEMsbUNBQWdCLGFBQUMsYUFBOEI7Ozs7OzttQkFuUGpEO0VBZ0M4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEludGVyY29tXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgYSBwbHVnaW4gdGhhdCBhbGxvd3MgeW91ciBJb25pYyBhcHAgdG8gdXNlIEludGVyY29tIGZvciBpT1MgYW5kL29yIEludGVyY29tIGZvciBBbmRyb2lkLlxuICogRm9sbG93IHRoZSBvZmZpY2FsIGRvY3VtZW50YXRpb24gdG8gc2V0dXAgdGhpcyBwbHVnaW4gY29ycmVjdGx5OiBodHRwczovL2RldmVsb3BlcnMuaW50ZXJjb20uY29tL2RvY3MvY29yZG92YS1waG9uZWdhcC1jb25maWd1cmF0aW9uXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbnRlcmNvbSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW50ZXJjb20vbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbnRlcmNvbTogSW50ZXJjb20pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuaW50ZXJjb20ucmVnaXN0ZXJVbmlkZW50aWZpZWRVc2VyKCk7XG4gKiAuLi5cbiAqIHRoaXMuaW50ZXJjb20ucmVnaXN0ZXJGb3JQdXNoKCk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSW50ZXJjb20nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbnRlcmNvbScsXG4gIHBsdWdpblJlZjogJ2ludGVyY29tJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pbnRlcmNvbS9pbnRlcmNvbS1jb3Jkb3ZhJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEludGVyY29tIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmVnaXN0ZXIgYSBpZGVudGlmaWVkIHVzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVySWRlbnRpZmllZFVzZXIob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSB1bmlkZW50aWZpZWQgdXNlclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7YW55fSBPcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJVbmlkZW50aWZpZWRVc2VyKG9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgcmVzZXRzIHRoZSBJbnRlcmNvbSBpbnRlZ3JhdGlvbidzIGNhY2hlIG9mIHlvdXIgdXNlcidzIGlkZW50aXR5IGFuZCB3aXBlcyB0aGUgc2xhdGUgY2xlYW4uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzZXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dvdXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHNlY3VyZUhhc2gge3N0cmluZ31cbiAgICogQHBhcmFtIHNlY3VyZURhdGEge2FueX1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKiBAZGVwcmVjYXRlZCBVc2Ugc2V0VXNlckhhc2ggaW5zdGVhZCBhcyBvZiBJbnRlcmNvbSBDb3Jkb3ZhIDQuMC4wIGFuZCBoaWdoZXIgaHR0cHM6Ly9naXRodWIuY29tL2ludGVyY29tL2ludGVyY29tLWNvcmRvdmEvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kIzQwMC0yMDE3LTA4LTI5XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFNlY3VyZU1vZGUoc2VjdXJlSGFzaDogc3RyaW5nLCBzZWN1cmVEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc2VjdXJlSGFzaCB7c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFVzZXJIYXNoKHNlY3VyZUhhc2g6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIHthbnl9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBkYXRlVXNlcihhdHRyaWJ1dGVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBtZXRhRGF0YSB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBtZXRhRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5TWVzc2VuZ2VyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheU1lc3NhZ2VDb21wb3NlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gaW5pdGlhbE1lc3NhZ2Uge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5TWVzc2FnZUNvbXBvc2VyV2l0aEluaXRpYWxNZXNzYWdlKGluaXRpYWxNZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlDb252ZXJzYXRpb25zTGlzdCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlIZWxwQ2VudGVyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWFkQ29udmVyc2F0aW9uQ291bnQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHZpc2liaWxpdHkge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRMYXVuY2hlclZpc2liaWxpdHkodmlzaWJpbGl0eTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHZpc2liaWxpdHkge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRJbkFwcE1lc3NhZ2VWaXNpYmlsaXR5KHZpc2liaWxpdHk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGlkZU1lc3NlbmdlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyRm9yUHVzaCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZW5kUHVzaFRva2VuVG9JbnRlcmNvbSh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNhcm91c2VsSWQge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5Q2Fyb3VzZWwoY2Fyb3VzZWxJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGFydGljbGVJZCB7c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlBcnRpY2xlKGFydGljbGVJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGJvdHRvbVBhZGRpbmcge3N0cmluZyB8IG51bWJlcn1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRCb3R0b21QYWRkaW5nKGJvdHRvbVBhZGRpbmc6IHN0cmluZyB8IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=