import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var Intercom = /** @class */ (function (_super) {
    __extends(Intercom, _super);
    function Intercom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Intercom.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    Intercom.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    Intercom.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    Intercom.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Intercom.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    Intercom.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    Intercom.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    Intercom.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    Intercom.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    Intercom.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    Intercom.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    Intercom.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    Intercom.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    Intercom.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    Intercom.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    Intercom.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    Intercom.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    Intercom.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    Intercom.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    Intercom.prototype.displayCarousel = function (carouselId) { return cordova(this, "displayCarousel", {}, arguments); };
    Intercom.prototype.displayArticle = function (articleId) { return cordova(this, "displayArticle", {}, arguments); };
    Intercom.prototype.setBottomPadding = function (bottomPadding) { return cordova(this, "setBottomPadding", {}, arguments); };
    Intercom.pluginName = "Intercom";
    Intercom.plugin = "cordova-plugin-intercom";
    Intercom.pluginRef = "intercom";
    Intercom.repo = "https://github.com/intercom/intercom-cordova";
    Intercom.platforms = ["Android", "iOS"];
    Intercom.decorators = [
        { type: Injectable }
    ];
    return Intercom;
}(IonicNativePlugin));
export { Intercom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ludGVyY29tL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQStCYiw0QkFBaUI7Ozs7SUFPN0MseUNBQXNCLGFBQUMsT0FBWTtJQVVuQywyQ0FBd0IsYUFBQyxPQUFZO0lBU3JDLHdCQUFLO0lBU0wseUJBQU07SUFZTixnQ0FBYSxhQUFDLFVBQWtCLEVBQUUsVUFBZTtJQVVqRCw4QkFBVyxhQUFDLFVBQWtCO0lBVTlCLDZCQUFVLGFBQUMsVUFBZTtJQVcxQiwyQkFBUSxhQUFDLFNBQWlCLEVBQUUsUUFBYTtJQVN6QyxtQ0FBZ0I7SUFTaEIseUNBQXNCO0lBVXRCLDJEQUF3QyxhQUFDLGNBQXNCO0lBUy9ELDJDQUF3QjtJQVN4QixvQ0FBaUI7SUFTakIsMENBQXVCO0lBVXZCLHdDQUFxQixhQUFDLFVBQWtCO0lBVXhDLDRDQUF5QixhQUFDLFVBQWtCO0lBUzVDLGdDQUFhO0lBU2Isa0NBQWU7SUFVZiwwQ0FBdUIsYUFBQyxLQUFhO0lBVXJDLGtDQUFlLGFBQUMsVUFBa0I7SUFVbEMsaUNBQWMsYUFBQyxTQUFpQjtJQVVoQyxtQ0FBZ0IsYUFBQyxhQUE4Qjs7Ozs7OztnQkFwTmhELFVBQVU7O21CQS9CWDtFQWdDOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBJbnRlcmNvbVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIGEgcGx1Z2luIHRoYXQgYWxsb3dzIHlvdXIgSW9uaWMgYXBwIHRvIHVzZSBJbnRlcmNvbSBmb3IgaU9TIGFuZC9vciBJbnRlcmNvbSBmb3IgQW5kcm9pZC5cbiAqIEZvbGxvdyB0aGUgb2ZmaWNhbCBkb2N1bWVudGF0aW9uIHRvIHNldHVwIHRoaXMgcGx1Z2luIGNvcnJlY3RseTogaHR0cHM6Ly9kZXZlbG9wZXJzLmludGVyY29tLmNvbS9kb2NzL2NvcmRvdmEtcGhvbmVnYXAtY29uZmlndXJhdGlvblxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW50ZXJjb20gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ludGVyY29tL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW50ZXJjb206IEludGVyY29tKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmludGVyY29tLnJlZ2lzdGVyVW5pZGVudGlmaWVkVXNlcigpO1xuICogLi4uXG4gKiB0aGlzLmludGVyY29tLnJlZ2lzdGVyRm9yUHVzaCgpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ludGVyY29tJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW50ZXJjb20nLFxuICBwbHVnaW5SZWY6ICdpbnRlcmNvbScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW50ZXJjb20vaW50ZXJjb20tY29yZG92YScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbnRlcmNvbSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgaWRlbnRpZmllZCB1c2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIHthbnl9IE9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlcklkZW50aWZpZWRVc2VyKG9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgdW5pZGVudGlmaWVkIHVzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyVW5pZGVudGlmaWVkVXNlcihvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHJlc2V0cyB0aGUgSW50ZXJjb20gaW50ZWdyYXRpb24ncyBjYWNoZSBvZiB5b3VyIHVzZXIncyBpZGVudGl0eSBhbmQgd2lwZXMgdGhlIHNsYXRlIGNsZWFuLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc2V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBzZWN1cmVIYXNoIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBzZWN1cmVEYXRhIHthbnl9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHNldFVzZXJIYXNoIGluc3RlYWQgYXMgb2YgSW50ZXJjb20gQ29yZG92YSA0LjAuMCBhbmQgaGlnaGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9pbnRlcmNvbS9pbnRlcmNvbS1jb3Jkb3ZhL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCM0MDAtMjAxNy0wOC0yOVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRTZWN1cmVNb2RlKHNlY3VyZUhhc2g6IHN0cmluZywgc2VjdXJlRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHNlY3VyZUhhc2gge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRVc2VySGFzaChzZWN1cmVIYXNoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVwZGF0ZVVzZXIoYXR0cmlidXRlczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gbWV0YURhdGEge2FueX1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dFdmVudChldmVudE5hbWU6IHN0cmluZywgbWV0YURhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheU1lc3NlbmdlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlNZXNzYWdlQ29tcG9zZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGluaXRpYWxNZXNzYWdlIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheU1lc3NhZ2VDb21wb3NlcldpdGhJbml0aWFsTWVzc2FnZShpbml0aWFsTWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5Q29udmVyc2F0aW9uc0xpc3QoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5SGVscENlbnRlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVucmVhZENvbnZlcnNhdGlvbkNvdW50KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2aXNpYmlsaXR5IHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0TGF1bmNoZXJWaXNpYmlsaXR5KHZpc2liaWxpdHk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2aXNpYmlsaXR5IHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0SW5BcHBNZXNzYWdlVmlzaWJpbGl0eSh2aXNpYmlsaXR5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhpZGVNZXNzZW5nZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlckZvclB1c2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFB1c2hUb2tlblRvSW50ZXJjb20odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjYXJvdXNlbElkIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheUNhcm91c2VsKGNhcm91c2VsSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhcnRpY2xlSWQge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5QXJ0aWNsZShhcnRpY2xlSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBib3R0b21QYWRkaW5nIHtzdHJpbmcgfCBudW1iZXJ9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0Qm90dG9tUGFkZGluZyhib3R0b21QYWRkaW5nOiBzdHJpbmcgfCBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19