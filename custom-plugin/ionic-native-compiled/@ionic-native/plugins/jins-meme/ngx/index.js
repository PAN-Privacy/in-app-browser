import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, checkAvailability, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var JinsMeme = /** @class */ (function (_super) {
    __extends(JinsMeme, _super);
    function JinsMeme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JinsMeme.prototype.setAppClientID = function (appClientId, clientSecret) { return cordova(this, "setAppClientID", {}, arguments); };
    JinsMeme.prototype.startScan = function () { return cordova(this, "startScan", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": true }, arguments); };
    JinsMeme.prototype.stopScan = function () { return cordova(this, "stopScan", {}, arguments); };
    JinsMeme.prototype.connect = function (target) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Observable(function (observer) {
                    var data = cordova.plugins.JinsMemePlugin.connect(target, observer.next.bind(observer), observer.complete.bind(observer), observer.error.bind(observer));
                    return data;
                });
            }
        })();
    };
    JinsMeme.prototype.setAutoConnect = function (flag) { return cordova(this, "setAutoConnect", {}, arguments); };
    JinsMeme.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    JinsMeme.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    JinsMeme.prototype.startDataReport = function () { return cordova(this, "startDataReport", { "observable": true, "clearFunction": "stopDataReport", "clearWithArgs": true }, arguments); };
    JinsMeme.prototype.stopDataReport = function () { return cordova(this, "stopDataReport", {}, arguments); };
    JinsMeme.prototype.getSDKVersion = function () { return cordova(this, "getSDKVersion", {}, arguments); };
    JinsMeme.prototype.getConnectedByOthers = function () { return cordova(this, "getConnectedByOthers", {}, arguments); };
    JinsMeme.prototype.isCalibrated = function () { return cordova(this, "isCalibrated", {}, arguments); };
    JinsMeme.prototype.getConnectedDeviceType = function () { return cordova(this, "getConnectedDeviceType", {}, arguments); };
    JinsMeme.prototype.getConnectedDeviceSubType = function () { return cordova(this, "getConnectedDeviceSubType", {}, arguments); };
    JinsMeme.prototype.getFWVersion = function () { return cordova(this, "getFWVersion", {}, arguments); };
    JinsMeme.prototype.getHWVersion = function () { return cordova(this, "getHWVersion", {}, arguments); };
    JinsMeme.prototype.isDataReceiving = function () { return cordova(this, "isDataReceiving", {}, arguments); };
    JinsMeme.pluginName = "JINS MEME";
    JinsMeme.plugin = "cordova-plugin-jins-meme";
    JinsMeme.pluginRef = "JinsMemePlugin";
    JinsMeme.repo = "https://github.com/BlyncSync/cordova-plugin-jins-meme";
    JinsMeme.platforms = ["Android", "iOS"];
    JinsMeme.decorators = [
        { type: Injectable }
    ];
    return JinsMeme;
}(IonicNativePlugin));
export { JinsMeme };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ppbnMtbWVtZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxpREFBb0QsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXNDSiw0QkFBaUI7Ozs7SUFXN0MsaUNBQWMsYUFBQyxXQUFtQixFQUFFLFlBQW9CO0lBWXhELDRCQUFTO0lBUVQsMkJBQVE7SUFXUiwwQkFBTyxhQUFDLE1BQWM7OzttREFBbUI7Z0JBQ3ZDLE9BQU8sSUFBSSxVQUFVLENBQU0sVUFBQyxRQUFhO29CQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQ2pELE1BQU0sRUFDTixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ2hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM5QixDQUFDO29CQUNGLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2FBQ0o7OztJQVFELGlDQUFjLGFBQUMsSUFBYTtJQVE1Qiw4QkFBVztJQVFYLDZCQUFVO0lBWVYsa0NBQWU7SUFRZixpQ0FBYztJQVNkLGdDQUFhO0lBUWIsdUNBQW9CO0lBUXBCLCtCQUFZO0lBUVoseUNBQXNCO0lBUXRCLDRDQUF5QjtJQVF6QiwrQkFBWTtJQVFaLCtCQUFZO0lBUVosa0NBQWU7Ozs7Ozs7Z0JBbEtoQixVQUFVOzttQkF2Q1g7RUF3QzhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUNoZWNrLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSBjb25zdCBjb3Jkb3ZhOiBhbnk7XG5cbi8qKlxuICogQG5hbWUgSmlucyBNZW1lXG4gKiBAZGVzY3JpcHRpb25cbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBKSU5TIE1FTUUgU0RLXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBKaW5zTWVtZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvamlucy1tZW1lL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBqaW5zTWVtZTogSmluc01lbWUpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuamluc01lbWUuc2V0QXBwQ2xpZW50SUQoYXBwQ2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcpLnRoZW4oXG4gKiAgIC8vIEJsdWV0b290aCBzaG91bGQgYmUgZW5hYmxlZCBhbmQgdGhlIEpJTlMgTUVNRSBwb3dlcmVkIG9uIChibGlua2luZyBibHVlIGxpZ2h0KVxuICogICB0aGlzLmppbnNNZW1lLnN0YXJ0U2NhbigpLnN1YnNjcmliZSgobWVtZV9hZGRyKSA9PiB7XG4gKiAgICAgdGhpcy5qaW5zTWVtZS5jb25uZWN0KG1lbWVfYWRkcikuc3Vic2NyaWJlKChjb25uZWN0UmVzdWx0KSA9PiB7XG4gKiAgICAgICB0aGlzLm1lbWVTZXJ2aWNlLnN0YXJ0RGF0YVJlcG9ydCgpLnN1YnNjcmliZSgoZGF0YVJlcG9ydCkgPT4ge1xuICogICAgICAgICBjb25zb2xlLmxvZyhkYXRhUmVwb3J0KTtcbiAqICAgICAgIH0pO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIC5jYXRjaChjb25zb2xlLmxvZygnamluc01lbWUuc2V0QXBwQ2xpZW50SUQgYXV0aGVudGljYXRpb24gZXJyb3InKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSklOUyBNRU1FJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tamlucy1tZW1lJyxcbiAgcGx1Z2luUmVmOiAnSmluc01lbWVQbHVnaW4nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0JseW5jU3luYy9jb3Jkb3ZhLXBsdWdpbi1qaW5zLW1lbWUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSmluc01lbWUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBBdXRoZW50aWNhdGlvbiBhbmQgYXV0aG9yaXphdGlvbiBvZiBBcHAgYW5kIFNESy5cbiAgICogTXVzdCBjYWxsIHRoaXMgbWV0aG9kIGZpcnN0LlxuICAgKiBTaWduIHVwIGZvciBhbiBhcHAgSUQgKGFuZCBnZXQgYW4gYXBwL2NsaWVudCBzZWNyZXQpIGF0IGRldmVsb3BlcnMuamlucy5jb21cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNldEFwcENsaWVudElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRTZWNyZXRcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0QXBwQ2xpZW50SUQoYXBwQ2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogU3RhcnRzIHNjYW5uaW5nIGZvciBKSU5TIE1FTUUuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcFNjYW4nLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gIH0pXG4gIHN0YXJ0U2NhbigpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogU3RvcHMgc2Nhbm5pbmcgSklOUyBNRU1FLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wU2NhbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogRXN0YWJsaXNoZXMgY29ubmVjdGlvbiB0byBKSU5TIE1FTUUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIGNvbm5lY3QodGFyZ2V0OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxhbnk+KChvYnNlcnZlcjogYW55KSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gY29yZG92YS5wbHVnaW5zLkppbnNNZW1lUGx1Z2luLmNvbm5lY3QoXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUuYmluZChvYnNlcnZlciksXG4gICAgICAgIG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGF1dG8gY29ubmVjdGlvbiBtb2RlLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZsYWdcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0QXV0b0Nvbm5lY3QoZmxhZzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjb25uZWN0aW9uIHRvIEpJTlMgTUVNRSBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNDb25uZWN0ZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGZyb20gSklOUyBNRU1FLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBTdGFydHMgcmVjZWl2aW5nIHJlYWx0aW1lIGRhdGEuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcERhdGFSZXBvcnQnLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gIH0pXG4gIHN0YXJ0RGF0YVJlcG9ydCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogU3RvcHMgcmVjZWl2aW5nIGRhdGEuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BEYXRhUmVwb3J0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFNESyB2ZXJzaW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRTREtWZXJzaW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpJTlMgTUVNRSBjb25uZWN0ZWQgd2l0aCBvdGhlciBhcHBzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRDb25uZWN0ZWRCeU90aGVycygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjYWxpYnJhdGlvbiBzdGF0dXNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNDYWxpYnJhdGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGRldmljZSB0eXBlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRDb25uZWN0ZWREZXZpY2VUeXBlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGhhcmR3YXJlIHZlcnNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldENvbm5lY3RlZERldmljZVN1YlR5cGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgRlcgVmVyc2lvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0RldWZXJzaW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEhXIFZlcnNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEhXVmVyc2lvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyByZXNwb25zZSBhYm91dCB3aGV0aGVyIGRhdGEgd2FzIHJlY2VpdmVkIG9yIG5vdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNEYXRhUmVjZWl2aW5nKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=