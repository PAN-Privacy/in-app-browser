var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var JumioNetverifyConfig = /** @class */ (function () {
    function JumioNetverifyConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioNetverifyConfig;
}());
export { JumioNetverifyConfig };
var JumioDocVerificationConfig = /** @class */ (function () {
    function JumioDocVerificationConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioDocVerificationConfig;
}());
export { JumioDocVerificationConfig };
var JumioAuthenticationConfig = /** @class */ (function () {
    function JumioAuthenticationConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioAuthenticationConfig;
}());
export { JumioAuthenticationConfig };
var BAMConfig = /** @class */ (function () {
    function BAMConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return BAMConfig;
}());
export { BAMConfig };
var NetverifyDocumentData = /** @class */ (function () {
    function NetverifyDocumentData() {
    }
    return NetverifyDocumentData;
}());
export { NetverifyDocumentData };
var MRZData = /** @class */ (function () {
    function MRZData() {
    }
    return MRZData;
}());
export { MRZData };
var BAMCardInformation = /** @class */ (function () {
    function BAMCardInformation() {
    }
    return BAMCardInformation;
}());
export { BAMCardInformation };
var JumioOriginal = /** @class */ (function (_super) {
    __extends(JumioOriginal, _super);
    function JumioOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JumioOriginal.prototype.initNetverify = function (apiToken, apiSecret, dataCenter, netverifyConfig) { return cordova(this, "initNetverify", {}, arguments); };
    JumioOriginal.prototype.startNetverify = function () { return cordova(this, "startNetverify", { "callbackOrder": "reverse" }, arguments); };
    JumioOriginal.prototype.initDocumentVerification = function (apiToken, apiSecret, dataCenter, docVerificationConfig) { return cordova(this, "initDocumentVerification", {}, arguments); };
    JumioOriginal.prototype.startDocumentVerification = function () { return cordova(this, "startDocumentVerification", { "callbackOrder": "reverse" }, arguments); };
    JumioOriginal.prototype.initAuthentication = function (apiToken, apiSecret, dataCenter, authenticationConfig) { return cordova(this, "initAuthentication", {}, arguments); };
    JumioOriginal.prototype.startAuthentication = function () { return cordova(this, "startAuthentication", { "callbackOrder": "reverse" }, arguments); };
    JumioOriginal.prototype.initBAM = function (apiToken, apiSecret, dataCenter, bamConfig) { return cordova(this, "initBAM", {}, arguments); };
    JumioOriginal.prototype.startBAM = function () { return cordova(this, "startBAM", { "callbackOrder": "reverse" }, arguments); };
    JumioOriginal.pluginName = "Jumio";
    JumioOriginal.plugin = "jumio-cordova";
    JumioOriginal.pluginRef = "Jumio";
    JumioOriginal.repo = "https://github.com/danielzen/jumio-cordova";
    JumioOriginal.platforms = ["Android", "iOS"];
    return JumioOriginal;
}(IonicNativePlugin));
var Jumio = new JumioOriginal();
export { Jumio };
//# sourceMappingURL=data:application/json;base64,