import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var KeychainTouchId = /** @class */ (function (_super) {
    __extends(KeychainTouchId, _super);
    function KeychainTouchId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeychainTouchId.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    KeychainTouchId.prototype.save = function (key, password, userAuthenticationRequired) { return cordova(this, "save", {}, arguments); };
    KeychainTouchId.prototype.verify = function (key, message) { return cordova(this, "verify", {}, arguments); };
    KeychainTouchId.prototype.has = function (key) { return cordova(this, "has", {}, arguments); };
    KeychainTouchId.prototype.delete = function (key) { return cordova(this, "delete", {}, arguments); };
    KeychainTouchId.prototype.setLocale = function (locale) { return cordova(this, "setLocale", {}, arguments); };
    KeychainTouchId.pluginName = "KeychainTouchId";
    KeychainTouchId.plugin = "cordova-plugin-keychain-touch-id";
    KeychainTouchId.pluginRef = "plugins.touchid";
    KeychainTouchId.repo = "https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id";
    KeychainTouchId.platforms = ["Android", "iOS"];
    KeychainTouchId.decorators = [
        { type: Injectable }
    ];
    return KeychainTouchId;
}(IonicNativePlugin));
export { KeychainTouchId };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tleWNoYWluLXRvdWNoLWlkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWtDbkMsbUNBQWlCOzs7O0lBTXBELHFDQUFXO0lBWVgsOEJBQUksYUFBQyxHQUFXLEVBQUUsUUFBZ0IsRUFBRSwwQkFBbUM7SUFZdkUsZ0NBQU0sYUFBQyxHQUFXLEVBQUUsT0FBZTtJQVVuQyw2QkFBRyxhQUFDLEdBQVc7SUFVZixnQ0FBTSxhQUFDLEdBQVc7SUFTbEIsbUNBQVMsYUFBQyxNQUFjOzs7Ozs7O2dCQTVEekIsVUFBVTs7MEJBbENYO0VBbUNxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBCaW9tZXRyeVR5cGUgPSAnZmFjZScgfCAndG91Y2gnO1xuXG4vKipcbiAqIEBuYW1lIEtleWNoYWluIFRvdWNoIElkXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgY29yZG92YSBwbHVnaW4gYWRkaW5nIHRoZSBpT1MgVG91Y2hJRCAvIEFuZHJvaWQgZmluZ2VycHJpbnQgdG8geW91clxuICogYXBwIGFuZCBhbGxvd2luZyB5b3UgdG8gc3RvcmUgYSBwYXNzd29yZCBzZWN1cmVseSBpbiB0aGUgZGV2aWNlIGtleWNoYWluLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgS2V5Y2hhaW5Ub3VjaElkIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9rZXljaGFpbi10b3VjaC1pZC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleWNoYWluVG91Y2hJZDogS2V5Y2hhaW5Ub3VjaElkKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5rZXljaGFpblRvdWNoSWQuaXNBdmFpbGFibGUoKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0tleWNoYWluVG91Y2hJZCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWtleWNoYWluLXRvdWNoLWlkJyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy50b3VjaGlkJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zamhvZWtzbWEvY29yZG92YS1wbHVnaW4ta2V5Y2hhaW4tdG91Y2gtaWQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgS2V5Y2hhaW5Ub3VjaElkIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2hlY2sgaWYgVG91Y2ggSUQgLyBGaW5nZXJwcmludCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGVyZSBpcyBoYXJkd2FyZSBzdXBwb3J0XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8QmlvbWV0cnlUeXBlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY3J5cHRzIGFuZCBTYXZlcyBhIHBhc3N3b3JkIHVuZGVyIHRoZSBrZXkgaW4gdGhlIGRldmljZSBrZXljaGFpbiwgd2hpY2ggY2FuIGJlIHJldHJpZXZlZCBhZnRlclxuICAgKiBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uIHVzaW5nIGZpbmdlcnByaW50XG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byBzdG9yZVxuICAgKiBAcGFyYW0gcGFzc3dvcmQge3N0cmluZ30gdGhlIHBhc3N3b3JkIHlvdSB3YW50IHRvIGVuY3J5cHQgYW5kIHN0b3JlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGVyZSBpcyBhIHJlc3VsdFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzYXZlKGtleTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCB1c2VyQXV0aGVudGljYXRpb25SZXF1aXJlZDogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZmluZ2VycHJpbnQgZGlhbG9nLCBmb3IgdGhlIGdpdmVuIGtleSwgc2hvd2luZyBhbiBhZGRpdGlvbmFsIG1lc3NhZ2UuIFByb21pc2Ugd2lsbCByZXNvbHZlXG4gICAqIHdpdGggdGhlIHBhc3N3b3JkIHN0b3JlZCBpbiBrZXljaGFpbiBvciB3aWxsIHJlc29sdmUgYW4gZXJyb3IgY29kZSwgd2hlcmUgLTEgaW5kaWNhdGVkIG5vdCBhdmFpbGFibGUuXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byByZXRyaWV2ZSBmcm9tIGtleWNoYWluXG4gICAqIEBwYXJhbSBtZXNzYWdlIHtzdHJpbmd9IGEgbWVzc2FnZSB0byB0aGUgdXNlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUga2V5IHZhbHVlIGlzIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgb3IgYW4gZXJyb3JcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyaWZ5KGtleTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBwYXNzd29yZCBzdG9yZWQgd2l0aGluIHRoZSBrZXljaGFpbiBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIGNoZWNrIGZyb20ga2V5Y2hhaW5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHN1Y2Nlc3MgaWYgdGhlIGtleSBpcyBhdmFpbGFibGUgb3IgZmFpbHVyZSBpZiBrZXkgaXMgbm90LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBoYXMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgcGFzc3dvcmQgc3RvcmVkIHVuZGVyIGdpdmVuIGtleSBmcm9tIHRoZSBrZXljaGFpbi5cbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIGRlbGV0ZSBmcm9tIGtleWNoYWluXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBzdWNjZXNzIGlmIHRoZSBrZXkgaXMgZGVsZXRlZCBvciBmYWlsdXJlIGlmIGtleSBpcyBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVsZXRlKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGxhbmd1YWdlIG9mIHRoZSBmaW5nZXJwcmludCBkaWFsb2dcbiAgICogQHBhcmFtIGxvY2FsZSB7c3RyaW5nfSBsb2NhbGUgc3VidGFnIGZyb20gW3RoaXMgbGlzdF0oaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbGFuZ3VhZ2Utc3VidGFnLXJlZ2lzdHJ5L2xhbmd1YWdlLXN1YnRhZy1yZWdpc3RyeSkuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldExvY2FsZShsb2NhbGU6IHN0cmluZyk6IHZvaWQge31cbn1cbiJdfQ==