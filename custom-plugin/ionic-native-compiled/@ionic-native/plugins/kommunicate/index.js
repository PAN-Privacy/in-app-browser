var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var KommunicateOriginal = /** @class */ (function (_super) {
    __extends(KommunicateOriginal, _super);
    function KommunicateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KommunicateOriginal.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    KommunicateOriginal.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    KommunicateOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    KommunicateOriginal.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    KommunicateOriginal.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    KommunicateOriginal.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    KommunicateOriginal.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    KommunicateOriginal.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    KommunicateOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    KommunicateOriginal.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    KommunicateOriginal.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    KommunicateOriginal.pluginName = "Kommunicate";
    KommunicateOriginal.plugin = "kommunicate-cordova-plugin";
    KommunicateOriginal.pluginRef = "kommunicate";
    KommunicateOriginal.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    KommunicateOriginal.platforms = ["Android", "Browser", "iOS"];
    return KommunicateOriginal;
}(IonicNativePlugin));
var Kommunicate = new KommunicateOriginal();
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tvbW11bmljYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTZDdkMsK0JBQWlCOzs7O0lBa0JoRCwyQkFBSyxhQUFDLE1BQVc7SUFVakIsOENBQXdCO0lBVXhCLGdDQUFVO0lBV1YsaURBQTJCLGFBQUMsS0FBYTtJQVV6Qyx3Q0FBa0I7SUFnQmxCLGtEQUE0QixhQUFDLGtCQUF1QjtJQVlwRCwwQ0FBb0IsYUFBQyxrQkFBdUI7SUFXNUMsNkNBQXVCLGFBQUMsSUFBUztJQVVqQyw0QkFBTTtJQVlOLHFDQUFlLGFBQUMsSUFBUztJQWlCekIseUNBQW1CLGFBQUMsaUJBQXNCOzs7Ozs7c0JBdkw1QztFQThDaUMsaUJBQWlCO1NBQXJDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBLb21tdW5pY2F0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgcGx1Z2luIGZvciB0aGUgS29tbXVuaWNhdGUgU0RLLlxuICogV2l0aCB0aGUgaGVscCBvZiB0aGlzIHBsdWdpbiwgeW91IGNhbiBlYXNpbHkgYWRkIGh1bWFuICsgYm90IGNoYXQgc3VwcG9ydCBmdW5jdGlvbmFsaXR5IHRvIHlvdSBhcHAuXG4gKiBSZWZlciB0bzogVE9ETzogaW5zZXJ0IHNpdGUgbGlua1xuICogRm9yIGRvY3VtZW50YXRpb246IFRPRE86IGluc2VydCBsaW5rXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBLb21tdW5pY2F0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvS29tbXVuaWNhdGUnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUga29tbXVuaWNhdGU6IEtvbW11bmljYXRlKSB7IH1cbiAqIC8vYWxzbyBhZGQgWy4uLiwgS29tbXVuaWNhdGUsIC4uLiBdIGluc2lkZSB0aGUgcHJvdmlkZXJzIGFycmF5LCBpZiByZXF1aXJlZFxuICpcbiAqIHZhciBrbVVzZXIgPSB7XG4gKiAgICB1c2VySWQgOiAncmFuZG9tc3RyaW5nJyxcbiAqICAgIGF1dGhlbnRpY2F0aW9uVHlwZUlkIDogMVxuICogfTtcbiAqXG4gKiB0aGlzLmtvbW11bmljYXRlLmxvZ2luKGttVXNlcilcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhcIlN1Y2Vzc2Z1bGx5IGxvZ2dlZCBpbi5cIiArIHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihcIkVycm9yIGxvZ2dpbmcgaW4uXCIgKyBlcnJvcikpO1xuICpcbiAqIHZhciBjb252ZXJzYXRpb25PYmplY3QgPSB7XG4gKiAgICBpc1VuaXF1ZSA6IGZhbHNlXG4gKiB9O1xuICpcbiAqIHRoaXMua29tbXVuaWNhdGUuY29udmVyc2F0aW9uQnVpbGRlcihjb252ZXJhdGlvbk9iamVjdClcbiAqICAgLnRoZW4oKGNsaWVudENoYW5uZWxLZXk6IGFueSkgPT4gY29uc29sZS5sb2coXCJLb21tdW5pY2F0ZSBjcmVhdGUgY29udmVyc2F0aW9uIHN1Y2Nlc3NmdWwgdGhlIGNsaWVudENoYW5uZWxLZXkgaXMgOiBcIiArIGNsaWVudENoYW5uZWxLZXkpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBjb252ZXJzYXRpb24uXCIgKyBlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0tvbW11bmljYXRlJyxcbiAgcGx1Z2luOiAna29tbXVuaWNhdGUtY29yZG92YS1wbHVnaW4nLFxuICBwbHVnaW5SZWY6ICdrb21tdW5pY2F0ZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vS29tbXVuaWNhdGUtaW8vS29tbXVuaWNhdGUtQ29yZG92YS1Jb25pYy1QaG9uZUdhcC1DaGF0LVBsdWdpbicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEtvbW11bmljYXRlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogTG9naW4gdGhlIHVzZXIgd2l0aCB0aGUgZGV0YWlscyBwYXNzZWQgaW5cbiAgICogQ3JlYXRlcyBhIG5ldyB1c2VyIHdpdGggdGhlIGRldGFpbHMgcHJvdmlkZWQgdGhlcmUgaXMgbm8gZXhpc3RpbmcgdXNlclxuICAgKlxuICAgKiB2YXIga21Vc2VyID0ge1xuICAgKiAgICAndXNlcklkJyA6ICd1c2VySWQnLCAgIC8vUmVwbGFjZSBpdCB3aXRoIHRoZSB1c2VySWQgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyXG4gICAqICAgICdwYXNzd29yZCcgOiAncGFzc3dvcmQnLCAgLy9yZXBsYWNlIHdpdGggcGFzc3dvcmRcbiAgICogICAgJ2F1dGhlbnRpY2F0aW9uVHlwZUlkJyA6IDEsXG4gICAqICAgICdpbWFnZUxpbmsnIDogPGltYWdlLWxpbmstZm9yLXVzZXI+XG4gICAqICAgICdhcHBsaWNhdGlvbklkJyA6ICc8QVBQX0lEPicsICAvL3JlcGxhY2UgdGhpcyB3aXRoIHlvdXIgQVBQX0lEIGZyb20gQXBwbG96aWMgRGFzaGJvYXJkXG4gICAqICAgICdkZXZpY2VBcG5zVHlwZScgOiAwICAgIC8vU2V0IDAgZm9yIERldmVsb3BtZW50IGFuZCAxIGZvciBEaXN0cmlidXRpb24gKFJlbGVhc2UpXG4gICAqIH07XG4gICAqXG4gICAqIEBwYXJhbSBrbVVzZXIge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ2luKGttVXNlcjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgZm9yIHB1c2ggbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJQdXNoTm90aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFueSB1c2VyIGlzIGxvZ2dlZCBpbiBvciBub3RcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0xvZ2dlZEluKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgdG9rZW4gZm9yIHB1c2ggbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ30gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVwZGF0ZVB1c2hOb3RpZmljYXRpb25Ub2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGF1bmNoIHRoZSBjb252ZXJzYXRpb24gc2NyZWVuIChpdCBjb250YWlucyBhbGwgdGhlIGV4aXN0aW5nIGNvbnZlcnNhdGlvbnMpXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGF1bmNoQ29udmVyc2F0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdW5jaCB0aGUgY29udmVyc2F0aW9uIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuIGNoYW5uZWwoY29udmVyc2F0aW9uKSBrZXlcbiAgICpcbiAgICogbGV0IGNvbnZPYmogPSB7XG4gICAqICAgJ2NsaWVudENoYW5uZWxLZXknIDogY2xpZW50Q2hhbm5lbEtleSwgLy9wYXNzIHRoZSBjbGllbnRDaGFubmVsS2V5IGhlcmVcbiAgICogICAndGFrZU9yZGVyJyA6IHRydWUgLy9za2lwIGNoYXQgbGlzdCBvbiBiYWNrIHByZXNzLCBwYXNzIGZhbHNlIGlmIHlvdSB3YW50IHRvIHNob3cgY2hhdCBsaXN0IG9uIGJhY2sgcHJlc3NcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvbk9iamVjdCB7YW55fSB0aGUgY2hhbm5lbCBrZXkgYW5kIG90aGVyIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGF1bmNoUGFydGljdWxhckNvbnZlcnNhdGlvbihjb252ZXJzYXRpb25PYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgbmV3IGNvbnZlcnNhdGlvbiwgZGV0YWlscyBhYm91dCB0aGUgY29udmVyc2F0aW9uIHRvIGJlIHBhc3NlZCBhcyBwYXJhbWV0ZXJzXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSBjb252ZXJhdGlvblBhcmFtcyB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnROZXdDb252ZXJzYXRpb24oY29udmVyc2F0aW9uUGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHB1c2ggbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZS9mYWxzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHByb2Nlc3NQdXNoTm90aWZpY2F0aW9uKGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdGhlIGN1cnJlbnQgdXNlclxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ291dCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhIHNpbmdsZSBjaGF0IChjb252ZXJzYXRpb24pXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydFNpbmdsZUNoYXQoZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGF1bmNoZXMgYSBjb252ZXJzYXRpb24gd2l0aCB0aGUgcHJvcGVydGllcyBwYXNzZWQgaW4gdGhlIGNvbnZlcnNhdGlvbiBwYXJhbVxuICAgKlxuICAgKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xuICAgKiAgICdpc1VuaXF1ZScgOiBmYWxzZSxcbiAgICogICAnYWdlbnRJZHMnOlsnPEFHRU5UX0lEPiddLCAgLy9MaXN0IG9mIGFnZW50SWRzLiBBR0VOVF9JRCBpcyB0aGUgZW1haWxJRCB1c2VkIHRvIHNpZ251cCBvbiBLb21tdW5pY2F0ZVxuICAgKiAgICdib3RJZHMnOiBbJzxCT1RfSUQ+J10gIC8vTGlzdCBvZiBib3RJZHMuIEdvIHRvIE1hbmFnZSBCb3RzKGh0dHBzOi8vZGFzaGJvYXJkLmtvbW11bmljYXRlLmlvL2JvdHMvbWFuYWdlLWJvdHMpIC0+IENvcHkgYm90SURcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvbk9iamVjdCB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29udmVyc2F0aW9uQnVpbGRlcihjb252ZXJhdGlvbk9iamVjdDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==