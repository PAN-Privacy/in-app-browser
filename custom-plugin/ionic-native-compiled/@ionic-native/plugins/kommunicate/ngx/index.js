import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Kommunicate = /** @class */ (function (_super) {
    __extends(Kommunicate, _super);
    function Kommunicate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Kommunicate.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    Kommunicate.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    Kommunicate.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    Kommunicate.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    Kommunicate.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    Kommunicate.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    Kommunicate.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    Kommunicate.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    Kommunicate.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Kommunicate.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    Kommunicate.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    Kommunicate.pluginName = "Kommunicate";
    Kommunicate.plugin = "kommunicate-cordova-plugin";
    Kommunicate.pluginRef = "kommunicate";
    Kommunicate.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    Kommunicate.platforms = ["Android", "Browser", "iOS"];
    Kommunicate.decorators = [
        { type: Injectable }
    ];
    return Kommunicate;
}(IonicNativePlugin));
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tvbW11bmljYXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTZDdkMsK0JBQWlCOzs7O0lBa0JoRCwyQkFBSyxhQUFDLE1BQVc7SUFVakIsOENBQXdCO0lBVXhCLGdDQUFVO0lBV1YsaURBQTJCLGFBQUMsS0FBYTtJQVV6Qyx3Q0FBa0I7SUFnQmxCLGtEQUE0QixhQUFDLGtCQUF1QjtJQVlwRCwwQ0FBb0IsYUFBQyxrQkFBdUI7SUFXNUMsNkNBQXVCLGFBQUMsSUFBUztJQVVqQyw0QkFBTTtJQVlOLHFDQUFlLGFBQUMsSUFBUztJQWlCekIseUNBQW1CLGFBQUMsaUJBQXNCOzs7Ozs7O2dCQTFJM0MsVUFBVTs7c0JBN0NYO0VBOENpQyxpQkFBaUI7U0FBckMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIEtvbW11bmljYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBwbHVnaW4gZm9yIHRoZSBLb21tdW5pY2F0ZSBTREsuXG4gKiBXaXRoIHRoZSBoZWxwIG9mIHRoaXMgcGx1Z2luLCB5b3UgY2FuIGVhc2lseSBhZGQgaHVtYW4gKyBib3QgY2hhdCBzdXBwb3J0IGZ1bmN0aW9uYWxpdHkgdG8geW91IGFwcC5cbiAqIFJlZmVyIHRvOiBUT0RPOiBpbnNlcnQgc2l0ZSBsaW5rXG4gKiBGb3IgZG9jdW1lbnRhdGlvbjogVE9ETzogaW5zZXJ0IGxpbmtcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEtvbW11bmljYXRlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9Lb21tdW5pY2F0ZSc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBrb21tdW5pY2F0ZTogS29tbXVuaWNhdGUpIHsgfVxuICogLy9hbHNvIGFkZCBbLi4uLCBLb21tdW5pY2F0ZSwgLi4uIF0gaW5zaWRlIHRoZSBwcm92aWRlcnMgYXJyYXksIGlmIHJlcXVpcmVkXG4gKlxuICogdmFyIGttVXNlciA9IHtcbiAqICAgIHVzZXJJZCA6ICdyYW5kb21zdHJpbmcnLFxuICogICAgYXV0aGVudGljYXRpb25UeXBlSWQgOiAxXG4gKiB9O1xuICpcbiAqIHRoaXMua29tbXVuaWNhdGUubG9naW4oa21Vc2VyKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKFwiU3VjZXNzZnVsbHkgbG9nZ2VkIGluLlwiICsgcmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9nZ2luZyBpbi5cIiArIGVycm9yKSk7XG4gKlxuICogdmFyIGNvbnZlcnNhdGlvbk9iamVjdCA9IHtcbiAqICAgIGlzVW5pcXVlIDogZmFsc2VcbiAqIH07XG4gKlxuICogdGhpcy5rb21tdW5pY2F0ZS5jb252ZXJzYXRpb25CdWlsZGVyKGNvbnZlcmF0aW9uT2JqZWN0KVxuICogICAudGhlbigoY2xpZW50Q2hhbm5lbEtleTogYW55KSA9PiBjb25zb2xlLmxvZyhcIktvbW11bmljYXRlIGNyZWF0ZSBjb252ZXJzYXRpb24gc3VjY2Vzc2Z1bCB0aGUgY2xpZW50Q2hhbm5lbEtleSBpcyA6IFwiICsgY2xpZW50Q2hhbm5lbEtleSkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIGNvbnZlcnNhdGlvbi5cIiArIGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnS29tbXVuaWNhdGUnLFxuICBwbHVnaW46ICdrb21tdW5pY2F0ZS1jb3Jkb3ZhLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ2tvbW11bmljYXRlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Lb21tdW5pY2F0ZS1pby9Lb21tdW5pY2F0ZS1Db3Jkb3ZhLUlvbmljLVBob25lR2FwLUNoYXQtUGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgS29tbXVuaWNhdGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBMb2dpbiB0aGUgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHBhc3NlZCBpblxuICAgKiBDcmVhdGVzIGEgbmV3IHVzZXIgd2l0aCB0aGUgZGV0YWlscyBwcm92aWRlZCB0aGVyZSBpcyBubyBleGlzdGluZyB1c2VyXG4gICAqXG4gICAqIHZhciBrbVVzZXIgPSB7XG4gICAqICAgICd1c2VySWQnIDogJ3VzZXJJZCcsICAgLy9SZXBsYWNlIGl0IHdpdGggdGhlIHVzZXJJZCBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICogICAgJ3Bhc3N3b3JkJyA6ICdwYXNzd29yZCcsICAvL3JlcGxhY2Ugd2l0aCBwYXNzd29yZFxuICAgKiAgICAnYXV0aGVudGljYXRpb25UeXBlSWQnIDogMSxcbiAgICogICAgJ2ltYWdlTGluaycgOiA8aW1hZ2UtbGluay1mb3ItdXNlcj5cbiAgICogICAgJ2FwcGxpY2F0aW9uSWQnIDogJzxBUFBfSUQ+JywgIC8vcmVwbGFjZSB0aGlzIHdpdGggeW91ciBBUFBfSUQgZnJvbSBBcHBsb3ppYyBEYXNoYm9hcmRcbiAgICogICAgJ2RldmljZUFwbnNUeXBlJyA6IDAgICAgLy9TZXQgMCBmb3IgRGV2ZWxvcG1lbnQgYW5kIDEgZm9yIERpc3RyaWJ1dGlvbiAoUmVsZWFzZSlcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGttVXNlciB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9naW4oa21Vc2VyOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBmb3IgcHVzaCBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlclB1c2hOb3RpZmljYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW55IHVzZXIgaXMgbG9nZ2VkIGluIG9yIG5vdFxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzTG9nZ2VkSW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0b2tlbiBmb3IgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiB7c3RyaW5nfSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBkYXRlUHVzaE5vdGlmaWNhdGlvblRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggdGhlIGNvbnZlcnNhdGlvbiBzY3JlZW4gKGl0IGNvbnRhaW5zIGFsbCB0aGUgZXhpc3RpbmcgY29udmVyc2F0aW9ucylcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsYXVuY2hDb252ZXJzYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGF1bmNoIHRoZSBjb252ZXJzYXRpb24gaWRlbnRpZmllZCBieSB0aGUgZ2l2ZW4gY2hhbm5lbChjb252ZXJzYXRpb24pIGtleVxuICAgKlxuICAgKiBsZXQgY29udk9iaiA9IHtcbiAgICogICAnY2xpZW50Q2hhbm5lbEtleScgOiBjbGllbnRDaGFubmVsS2V5LCAvL3Bhc3MgdGhlIGNsaWVudENoYW5uZWxLZXkgaGVyZVxuICAgKiAgICd0YWtlT3JkZXInIDogdHJ1ZSAvL3NraXAgY2hhdCBsaXN0IG9uIGJhY2sgcHJlc3MsIHBhc3MgZmFsc2UgaWYgeW91IHdhbnQgdG8gc2hvdyBjaGF0IGxpc3Qgb24gYmFjayBwcmVzc1xuICAgKiB9O1xuICAgKlxuICAgKiBAcGFyYW0gY29udmVyc2F0aW9uT2JqZWN0IHthbnl9IHRoZSBjaGFubmVsIGtleSBhbmQgb3RoZXIgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsYXVuY2hQYXJ0aWN1bGFyQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbk9iamVjdDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgY29udmVyc2F0aW9uLCBkZXRhaWxzIGFib3V0IHRoZSBjb252ZXJzYXRpb24gdG8gYmUgcGFzc2VkIGFzIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGNvbnZlcmF0aW9uUGFyYW1zIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydE5ld0NvbnZlcnNhdGlvbihjb252ZXJzYXRpb25QYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlL2ZhbHNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcHJvY2Vzc1B1c2hOb3RpZmljYXRpb24oZGF0YTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ291dCB0aGUgY3VycmVudCB1c2VyXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgc2luZ2xlIGNoYXQgKGNvbnZlcnNhdGlvbilcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGRhdGEge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0U2luZ2xlQ2hhdChkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyBhIGNvbnZlcnNhdGlvbiB3aXRoIHRoZSBwcm9wZXJ0aWVzIHBhc3NlZCBpbiB0aGUgY29udmVyc2F0aW9uIHBhcmFtXG4gICAqXG4gICAqIHZhciBjb252ZXJzYXRpb25PYmplY3QgPSB7XG4gICAqICAgJ2lzVW5pcXVlJyA6IGZhbHNlLFxuICAgKiAgICdhZ2VudElkcyc6Wyc8QUdFTlRfSUQ+J10sICAvL0xpc3Qgb2YgYWdlbnRJZHMuIEFHRU5UX0lEIGlzIHRoZSBlbWFpbElEIHVzZWQgdG8gc2lnbnVwIG9uIEtvbW11bmljYXRlXG4gICAqICAgJ2JvdElkcyc6IFsnPEJPVF9JRD4nXSAgLy9MaXN0IG9mIGJvdElkcy4gR28gdG8gTWFuYWdlIEJvdHMoaHR0cHM6Ly9kYXNoYm9hcmQua29tbXVuaWNhdGUuaW8vYm90cy9tYW5hZ2UtYm90cykgLT4gQ29weSBib3RJRFxuICAgKiB9O1xuICAgKlxuICAgKiBAcGFyYW0gY29udmVyc2F0aW9uT2JqZWN0IHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb252ZXJzYXRpb25CdWlsZGVyKGNvbnZlcmF0aW9uT2JqZWN0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19