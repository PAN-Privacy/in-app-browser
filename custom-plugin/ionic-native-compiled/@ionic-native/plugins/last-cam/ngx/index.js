import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var LastCam = /** @class */ (function (_super) {
    __extends(LastCam, _super);
    function LastCam() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LastCam.prototype.startCamera = function (options) { return cordova(this, "startCamera", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    LastCam.prototype.stopCamera = function () { return cordova(this, "stopCamera", {}, arguments); };
    LastCam.prototype.switchCamera = function () { return cordova(this, "switchCamera", {}, arguments); };
    LastCam.prototype.switchFlash = function () { return cordova(this, "switchFlash", {}, arguments); };
    LastCam.prototype.takePicture = function () { return cordova(this, "takePicture", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.startVideoCapture = function () { return cordova(this, "startVideoCapture", {}, arguments); };
    LastCam.prototype.stopVideoCapture = function () { return cordova(this, "stopVideoCapture", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.recordingTimer = function () { return cordova(this, "recordingTimer", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.watchRecordingTimer = function () { return cordova(this, "watchRecordingTimer", { "successIndex": 0, "errorIndex": 1, "observable": true }, arguments); };
    LastCam.pluginName = "LastCam";
    LastCam.plugin = "cordova-plugin-last-cam";
    LastCam.pluginRef = "LastCam";
    LastCam.repo = "https://github.com/bengejd/cordova-plugin-last-cam";
    LastCam.platforms = ["iOS"];
    LastCam.decorators = [
        { type: Injectable }
    ];
    return LastCam;
}(IonicNativePlugin));
export { LastCam };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xhc3QtY2FtL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBb0NMLDJCQUFpQjs7OztJQVU1Qyw2QkFBVyxhQUFDLE9BQThCO0lBUzFDLDRCQUFVO0lBU1YsOEJBQVk7SUFTWiw2QkFBVztJQVlYLDZCQUFXO0lBU1gsbUNBQWlCO0lBWWpCLGtDQUFnQjtJQVloQixnQ0FBYztJQWFkLHFDQUFtQjs7Ozs7OztnQkFoR3BCLFVBQVU7O2tCQXJDWDtFQXNDNkIsaUJBQWlCO1NBQWpDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBMYXN0Q2FtU3RhcnR1cE9wdGlvbnMge1xuICAvKiogVGhlIGxlZnQgZWRnZSBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xuICB4PzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgdG9wIGVkZ2UgaW4gcGl4ZWxzLCBkZWZhdWx0IDAgKi9cbiAgeT86IG51bWJlcjtcblxuICAvKiogVGhlIHdpZHRoIGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLndpZHRoICovXG4gIHdpZHRoPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgaGVpZ2h0IGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLmhlaWdodCAqL1xuICBoZWlnaHQ/OiBudW1iZXI7XG5cbiAgLyoqIENob29zZSB0aGUgY2FtZXJhIHRvIHVzZSAnZnJvbnQnIG9yICdiYWNrJywgZGVmYXVsdCAnZnJvbnQnICovXG4gIGNhbWVyYT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBMYXN0Q2FtXG4gKiBAZGVzY3JpcHRpb25cbiAqIExhc3QgQ2FtIGlzIGEgQ2FtZXJhIFByZXZpZXcgcGx1Z2luIHRoYXQgYWxsb3dzIHlvdSB0byB0YWtlIGNhcHR1cmUgYm90aCBWaWRlb3MgYW5kIGltYWdlcyBpbiBhXG4gKiBjdXN0b20gaHRtbCBwcmV2aWV3IG9mIHlvdXIgY2hvaWNlLlxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBMYXN0Q2FtU3RhcnR1cE9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdMYXN0Q2FtJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbGFzdC1jYW0nLFxuICBwbHVnaW5SZWY6ICdMYXN0Q2FtJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iZW5nZWpkL2NvcmRvdmEtcGx1Z2luLWxhc3QtY2FtJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMYXN0Q2FtIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU3RhcnRzIHRoZSBjYW1lcmEgcHJldmlldyBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtMYXN0Q2FtU3RhcnR1cE9wdGlvbnN9IG9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICB9KVxuICBzdGFydENhbWVyYShvcHRpb25zOiBMYXN0Q2FtU3RhcnR1cE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgY2FtZXJhIHByZXZpZXcgaW5zdGFuY2UuIChpT1MpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcENhbWVyYSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2ggZnJvbSB0aGUgcmVhciBjYW1lcmEgYW5kIGZyb250IGNhbWVyYSwgaWYgYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN3aXRjaENhbWVyYSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2ggdGhlIGZsYXNoIG1vZGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3dpdGNoRmxhc2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGFrZSB0aGUgcGljdHVyZSAoYmFzZTY0KVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHRha2VQaWN0dXJlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSB2aWRlbyBjYXB0dXJlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRWaWRlb0NhcHR1cmUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIHZpZGVvIGNhcHR1cmVcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBzdG9wVmlkZW9DYXB0dXJlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb21pc2Ugb2YgdGhlIHJlY29yZGluZ1RpbWVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHJlY29yZGluZ1RpbWVyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmFibGUgb2YgdGhlIHJlY29yZGluZ1RpbWVyLlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgd2F0Y2hSZWNvcmRpbmdUaW1lcigpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19