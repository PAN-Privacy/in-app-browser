var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var LaunchReviewOriginal = /** @class */ (function (_super) {
    __extends(LaunchReviewOriginal, _super);
    function LaunchReviewOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LaunchReviewOriginal.prototype.launch = function (appId) { return cordova(this, "launch", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    LaunchReviewOriginal.prototype.rating = function () { return cordova(this, "rating", { "observable": true }, arguments); };
    LaunchReviewOriginal.prototype.isRatingSupported = function () { return cordova(this, "isRatingSupported", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    LaunchReviewOriginal.pluginName = "LaunchReview";
    LaunchReviewOriginal.plugin = "cordova-launch-review";
    LaunchReviewOriginal.pluginRef = "LaunchReview";
    LaunchReviewOriginal.repo = "https://github.com/dpa99c/cordova-launch-review";
    LaunchReviewOriginal.platforms = ["Android", "iOS"];
    return LaunchReviewOriginal;
}(IonicNativePlugin));
var LaunchReview = new LaunchReviewOriginal();
export { LaunchReview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xhdW5jaC1yZXZpZXcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFtQ0EsZ0NBQWlCOzs7O0lBVWpELDZCQUFNLGFBQUMsS0FBYztJQWNyQiw2QkFBTTtJQVVOLHdDQUFpQjs7Ozs7O3VCQXZFbkI7RUFxQ2tDLGlCQUFpQjtTQUF0QyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgTGF1bmNoIFJldmlld1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQXNzaXN0cyBpbiBsZWF2aW5nIHVzZXIgcmV2aWV3cy9yYXRpbmdzIGluIHRoZSBBcHAgU3RvcmVzLlxuICogLSBMYXVuY2hlcyB0aGUgcGxhdGZvcm0ncyBBcHAgU3RvcmUgcGFnZSBmb3IgdGhlIGN1cnJlbnQgYXBwIGluIG9yZGVyIGZvciB0aGUgdXNlciB0byBsZWF2ZSBhIHJldmlldy5cbiAqIC0gT24gaU9TICgxMC4zIGFuZCBhYm92ZSkgaW52b2tlcyB0aGUgbmF0aXZlIGluLWFwcCByYXRpbmcgZGlhbG9nIHdoaWNoIGFsbG93cyBhIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCB3aXRob3V0IG5lZWRpbmcgdG8gb3BlbiB0aGUgQXBwIFN0b3JlLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTGF1bmNoUmV2aWV3IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9sYXVuY2gtcmV2aWV3L25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsYXVuY2hSZXZpZXc6IExhdW5jaFJldmlldykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5sYXVuY2hSZXZpZXcubGF1bmNoKClcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBsYXVuY2hlZCBzdG9yZSBhcHAnKSk7XG4gKlxuICogaWYodGhpcy5sYXVuY2hSZXZpZXcuaXNSYXRpbmdTdXBwb3J0ZWQoKSl7XG4gKiAgIHRoaXMubGF1bmNoUmV2aWV3LnJhdGluZygpXG4gKiAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBsYXVuY2hlZCByYXRpbmcgZGlhbG9nJykpO1xuICogfVxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTGF1bmNoUmV2aWV3JyxcbiAgcGx1Z2luOiAnY29yZG92YS1sYXVuY2gtcmV2aWV3JyxcbiAgcGx1Z2luUmVmOiAnTGF1bmNoUmV2aWV3JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1sYXVuY2gtcmV2aWV3JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExhdW5jaFJldmlldyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIExhdW5jaGVzIEFwcCBTdG9yZSBvbiBjdXJyZW50IHBsYXRmb3JtIGluIG9yZGVyIHRvIGxlYXZlIGEgcmV2aWV3IGZvciBnaXZlbiBhcHAuXG4gICAqIEBwYXJhbSBhcHBJZCB7c3RyaW5nfSAtIChvcHRpb25hbCkgdGhlIHBsYXRmb3JtLXNwZWNpZmljIGFwcCBJRCB0byB1c2UgdG8gb3BlbiB0aGUgcGFnZSBpbiB0aGUgc3RvcmUgYXBwLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcGx1Z2luIHdpbGwgdXNlIHRoZSBhcHAgSUQgZm9yIHRoZSBhcHAgaW4gd2hpY2ggdGhlIHBsdWdpbiBpcyBjb250YWluZWQuXG4gICAqIE9uIEFuZHJvaWQgdGhpcyBpcyB0aGUgZnVsbCBwYWNrYWdlIG5hbWUgb2YgdGhlIGFwcC4gRm9yIGV4YW1wbGUsIGZvciBHb29nbGUgTWFwczogYGNvbS5nb29nbGUuYW5kcm9pZC5hcHBzLm1hcHNgXG4gICAqIE9uIGlPUyB0aGlzIGlzIHRoZSBBcHBsZSBJRCBvZiB0aGUgYXBwLiBGb3IgZXhhbXBsZSwgZm9yIEdvb2dsZSBNYXBzOiBgNTg1MDI3MzU0YFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBsYXVuY2goYXBwSWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyB0aGUgbmF0aXZlIGluLWFwcCByYXRpbmcgZGlhbG9nIHdoaWNoIGFsbG93cyBhIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCB3aXRob3V0IG5lZWRpbmcgdG8gb3BlbiB0aGUgQXBwIFN0b3JlLlxuICAgKiBSZXF1aXJlcyBpT1MgMTAuMyBhbmQgYWJvdmU6IENhbGxpbmcgdGhpcyBvbiBhbnkgcGxhdGZvcm0vdmVyc2lvbiBvdGhlciB0aGFuIGlPUyAxMC4zKyB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2suXG4gICAqIFN1Y2Nlc3MgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgdXAgdG8gMyB0aW1lczpcbiAgICogLSBGaXJzdDogYWZ0ZXIgYExhdW5jaFJldmlldy5yYXRpbmcoKWAgaXMgY2FsbGVkIGFuZCB0aGUgcmVxdWVzdCB0byBzaG93IHRoZSBkaWFsb2cgaXMgc3VjY2Vzc2Z1bC4gV2lsbCBiZSBwYXNzZWQgdGhlIHZhbHVlIGByZXF1ZXN0ZWRgLlxuICAgKiAtIFNlY29uZDogaWYgYW5kIHdoZW4gdGhlIFJhdGluZyBkaWFsb2cgaXMgYWN0dWFsbHkgZGlzcGxheWVkLiAgV2lsbCBiZSBwYXNzZWQgdGhlIHZhbHVlIGBzaG93bmAuXG4gICAqIC0gVGhpcmQ6IGlmIGFuZCB3aGVuIHRoZSBSYXRpbmcgZGlhbG9nIGlzIGRpc21pc3NlZC4gIFdpbGwgYmUgcGFzc2VkIHRoZSB2YWx1ZSBgZGlzbWlzc2VkYC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxuICByYXRpbmcoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBjdXJyZW50IHBsYXRmb3JtL3ZlcnNpb24gc3VwcG9ydHMgaW4tYXBwIHJhdGluZ3MgZGlhbG9nLCBpLmUuIGNhbGxpbmcgTGF1bmNoUmV2aWV3LnJhdGluZygpLlxuICAgKiBXaWxsIHJldHVybiB0cnVlIGlmIGN1cnJlbnQgcGxhdGZvcm0gaXMgaU9TIDEwLjMgb3IgYWJvdmUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSwgc3luYzogdHJ1ZSB9KVxuICBpc1JhdGluZ1N1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==