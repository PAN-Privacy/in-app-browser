import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LineLogin = /** @class */ (function (_super) {
    __extends(LineLogin, _super);
    function LineLogin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineLogin.prototype.initialize = function (param) { return cordova(this, "initialize", {}, arguments); };
    LineLogin.prototype.login = function () { return cordova(this, "login", {}, arguments); };
    LineLogin.prototype.loginWeb = function () { return cordova(this, "loginWeb", {}, arguments); };
    LineLogin.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    LineLogin.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    LineLogin.prototype.verifyAccessToken = function () { return cordova(this, "verifyAccessToken", {}, arguments); };
    LineLogin.prototype.refreshAccessToken = function () { return cordova(this, "refreshAccessToken", {}, arguments); };
    LineLogin.pluginName = "LineLogin";
    LineLogin.plugin = "cordova-line-login-plugin";
    LineLogin.pluginRef = "lineLogin";
    LineLogin.repo = "https://github.com/nrikiji/cordova-line-login-plugin";
    LineLogin.install = "ionic cordova plugin add https://github.com/nrikiji/cordova-line-login-plugin.git --variable LINE_CHANNEL_ID=\"your_line_channel_id\"";
    LineLogin.installVariables = ["LINE_CHANNEL_ID"];
    LineLogin.platforms = ["Android", "iOS"];
    LineLogin.decorators = [
        { type: Injectable }
    ];
    return LineLogin;
}(IonicNativePlugin));
export { LineLogin };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xpbmUtbG9naW4vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBbUZ6Qyw2QkFBaUI7Ozs7SUFPOUMsOEJBQVUsYUFBQyxLQUFzQjtJQVNqQyx5QkFBSztJQVVMLDRCQUFRO0lBU1IsMEJBQU07SUFTTixrQ0FBYztJQVNkLHFDQUFpQjtJQVNqQixzQ0FBa0I7Ozs7Ozs7OztnQkEvRG5CLFVBQVU7O29CQW5GWDtFQW9GK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBMaW5lTG9naW5QYXJhbXMge1xuICAvKipcbiAgICogTGluZSBDaGFubmVsIElEXG4gICAqL1xuICBjaGFubmVsX2lkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZUxvZ2luUHJvZmlsZSB7XG4gIC8qKlxuICAgKiBMaW5lIFVzZXIgSURcbiAgICovXG4gIHVzZXJJRDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMaW5lIFByb2ZpbGUgSW1hZ2UgVVJMXG4gICAqL1xuICBwaWN0dXJlVVJMOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpbmUgUHJvZmlsZSBOYW1lXG4gICAqL1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFbWFpbFxuICAgKi9cbiAgZW1haWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZUxvZ2luQWNjZXNzVG9rZW4ge1xuICAvKipcbiAgICogTGluZSBBY2Nlc3MgVG9rZW5cbiAgICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpbmUgQWNjZXNzIFRva2VuIEV4cGlyZSBUaW1lXG4gICAqL1xuICBleHBpcmVUaW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgTGluZSBMb2dpblxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZnVuY3Rpb24gbG9naW4sIGxvZ3Mgb3V0LCBhY3F1aXJlcywgdmVyaWZpZXMsIGFuZCByZWZyZXNoZXMgdGhlIGFjY2VzcyB0b2tlbi4gVGhlIHZlcnNpb24gb2YgTGluZVNESyB5b3UgYXJlIHVzaW5nIGlzIGFzIGZvbGxvd3MuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBMaW5lTG9naW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2xpbmUtbG9naW4vbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsaW5lTG9naW46IExpbmVMb2dpbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMubGluZUxvZ2luLmluaXRpYWxpemUoeyBjaGFubmVsX2lkOiBcInh4eHh4eHh4eHhcIiB9KVxuICpcbiAqIHRoaXMubGluZUxvZ2luLmxvZ2luKClcbiAqICAgLnRoZW4ocmVzdWx0ID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpXG4gKiAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpXG4gKlxuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIExpbmVMb2dpblBhcmFtc1xuICogTGluZUxvZ2luUHJvZmlsZVxuICogTGluZUxvZ2luQWNjZXNzVG9rZW5cbiAqXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTGluZUxvZ2luJyxcbiAgcGx1Z2luOiAnY29yZG92YS1saW5lLWxvZ2luLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ2xpbmVMb2dpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbnJpa2lqaS9jb3Jkb3ZhLWxpbmUtbG9naW4tcGx1Z2luJyxcbiAgaW5zdGFsbDpcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGh0dHBzOi8vZ2l0aHViLmNvbS9ucmlraWppL2NvcmRvdmEtbGluZS1sb2dpbi1wbHVnaW4uZ2l0IC0tdmFyaWFibGUgTElORV9DSEFOTkVMX0lEPVwieW91cl9saW5lX2NoYW5uZWxfaWRcIicsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnTElORV9DSEFOTkVMX0lEJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMaW5lTG9naW4gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplXG4gICAqIEBwYXJhbSBwYXJhbSBMaW5lTG9naW5QYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0aWFsaXplKHBhcmFtOiBMaW5lTG9naW5QYXJhbXMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dpblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dpbigpOiBQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9naW4gd2l0aCBXZWJcbiAgICogKGlPUyBvbmx5KVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dpbldlYigpOiBQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBBY2Nlc3MgVG9rZW5cbiAgICogQHJldHVybiB7UHJvbWlzZTxMaW5lTG9naW5BY2Nlc3NUb2tlbj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEFjY2Vzc1Rva2VuKCk6IFByb21pc2U8TGluZUxvZ2luQWNjZXNzVG9rZW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IEFjY2Vzc1Rva2VuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyaWZ5QWNjZXNzVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaCBBY2Nlc3MgVG9rZW5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWZyZXNoQWNjZXNzVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==