var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var MLKitTranslateOriginal = /** @class */ (function (_super) {
    __extends(MLKitTranslateOriginal, _super);
    function MLKitTranslateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLKitTranslateOriginal.prototype.translate = function (text, targetLanguage, sourceLanguage) { return cordova(this, "translate", {}, arguments); };
    MLKitTranslateOriginal.prototype.identifyLanguage = function (text) { return cordova(this, "identifyLanguage", {}, arguments); };
    MLKitTranslateOriginal.prototype.getDownloadedModels = function () { return cordova(this, "getDownloadedModels", {}, arguments); };
    MLKitTranslateOriginal.prototype.getAvailableModels = function () { return cordova(this, "getAvailableModels", {}, arguments); };
    MLKitTranslateOriginal.prototype.downloadModel = function (code) { return cordova(this, "downloadModel", {}, arguments); };
    MLKitTranslateOriginal.prototype.deleteModel = function (code) { return cordova(this, "deleteModel", {}, arguments); };
    MLKitTranslateOriginal.pluginName = "MLKitTranslate";
    MLKitTranslateOriginal.plugin = "cordova-plugin-mlkit-translate";
    MLKitTranslateOriginal.pluginRef = "MLKitTranslate";
    MLKitTranslateOriginal.repo = "https://github.com/rigelglen/cordova-plugin-mlkit-translate";
    MLKitTranslateOriginal.platforms = ["Android", "iOS"];
    return MLKitTranslateOriginal;
}(IonicNativePlugin));
var MLKitTranslate = new MLKitTranslateOriginal();
export { MLKitTranslate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL21sa2l0LXRyYW5zbGF0ZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnRHBDLGtDQUFpQjs7OztJQVVuRCxrQ0FBUyxhQUFDLElBQVksRUFBRSxjQUFzQixFQUFFLGNBQXVCO0lBVXZFLHlDQUFnQixhQUFDLElBQVk7SUFTN0IsNENBQW1CO0lBU25CLDJDQUFrQjtJQVVsQixzQ0FBYSxhQUFDLElBQVk7SUFVMUIsb0NBQVcsYUFBQyxJQUFZOzs7Ozs7eUJBM0cxQjtFQWlEb0MsaUJBQWlCO1NBQXhDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBsYW5ndWFnZSBvYmplY3Qgd2hpY2ggd2lsbCBiZSByZXR1cm5lZCBieSBgZG93bmxvYWRNb2RlbGAsIGBkZWxldGVNb2RlbGAsIGBnZXRBdmFpbGFibGVNb2RlbHNgIGFuZCBgZ2V0RG93bmxvYWRlZE1vZGVsc2AgbWV0aG9kcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZU1vZGVsIHtcbiAgLyoqXG4gICAqIEJDUC00NyBsYW5ndWFnZSBjb2RlIG9mIHRoZSBsYW5ndWFnZS4gRm9yIGV4YW1wbGU6IGVuXG4gICAqIEZvciBmdWxsIGxpc3Qgb2YgbGFuZ3VhZ2VzIGNvZGVzLCBzZWUgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvbWwta2l0L3RyYW5zbGF0aW9uLWxhbmd1YWdlLXN1cHBvcnRcbiAgICovXG4gIGNvZGU6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzcGxheSBuYW1lIG9mIHRoZSBsYW5ndWFnZS4gRm9yIGV4YW1wbGU6IEVuZ2xpc2hcbiAgICovXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgTUxLaXRUcmFuc2xhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogUGx1Z2luIHRoYXQgaW1wbGVtZW50cyBNTEtpdCBUcmFuc2xhdGlvbiBhbmQgTGFuZ3VhZ2UgSWRlbnRpZmljYXRpb24gZmVhdHVyZXMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBNTEtpdFRyYW5zbGF0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbWwta2l0LXRyYW5zbGF0ZSc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbWxraXRUcmFuc2xhdGU6IE1MS2l0VHJhbnNsYXRlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLm1sa2l0VHJhbnNsYXRlLnRyYW5zbGF0ZSgnSGVsbG8nLCAnZW4nLCAnZXMnKVxuICogICAudGhlbigocmVzdWx0VGV4dDogc3RyaW5nKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBzdHJpbmcpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogTGFuZ3VhZ2VNb2RlbFxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTUxLaXRUcmFuc2xhdGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1tbGtpdC10cmFuc2xhdGUnLFxuICBwbHVnaW5SZWY6ICdNTEtpdFRyYW5zbGF0ZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcmlnZWxnbGVuL2NvcmRvdmEtcGx1Z2luLW1sa2l0LXRyYW5zbGF0ZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNTEtpdFRyYW5zbGF0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgdGV4dCBmcm9tIG9uZSBsYW5ndWFnZSB0byBhbm90aGVyLiBSZXF1aXJlcyB0aGUgc291cmNlIGFuZCB0YXJnZXQgbGFuZ3VhZ2VzIG5lZWQgdG8gYmUgZG93bmxvYWRlZC5cbiAgICogSWYgbm90IHRoZSBsYW5ndWFnZXMgYXJlIGRvd25sb2FkZWQgaW4gdGhlIGJhY2tncm91bmQgYXV0b21hdGljYWxseS5cbiAgICogQHBhcmFtIHRleHQge3N0cmluZ30gdGV4dCB0byBiZSB0cmFuc2xhdGVkXG4gICAqIEBwYXJhbSB0YXJnZXRMYW5ndWFnZSB7c3RyaW5nfSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gdHJhbnNsYXRlIHRvXG4gICAqIEBwYXJhbSBzb3VyY2VMYW5ndWFnZSB7c3RyaW5nPX0gKG9wdGlvbmFsKSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gdHJhbnNsYXRlIHRvLiBJZiBub3QgcHJvdmlkZWQsIHNvdXJjZSBsYW5ndWFnZSBpcyBpbmZlcnJlZCBmcm9tIHRleHRcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRyYW5zbGF0ZWQgdGV4dFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCB0YXJnZXRMYW5ndWFnZTogc3RyaW5nLCBzb3VyY2VMYW5ndWFnZT86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGxhbmd1YWdlIG9mIGEgc3RyaW5nIG9mIHRleHQuXG4gICAqIEBwYXJhbSB0ZXh0IHtzdHJpbmd9IHRleHQgdG8gYmUgdHJhbnNsYXRlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGlkZW50aWZpZWQgbGFuZ3VhZ2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaWRlbnRpZnlMYW5ndWFnZSh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBvZiBsYW5ndWFnZSBtb2RlbHMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZCB0byB0aGUgZGV2aWNlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExhbmd1YWdlTW9kZWxbXT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBsYW5ndWFnZXMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0RG93bmxvYWRlZE1vZGVscygpOiBQcm9taXNlPExhbmd1YWdlTW9kZWxbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGxhbmd1YWdlIG1vZGVscyB0aGF0IGNhbiBiZSBkb3dubG9hZGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExhbmd1YWdlTW9kZWxbXT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBwb3NzaWJsZSBsYW5ndWFnZXMgdGhhdCBjYW4gYmUgZG93bmxvYWRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0QXZhaWxhYmxlTW9kZWxzKCk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERvd25sb2FkcyBhIHNwZWNpZmllZCBsYW5ndWFnZSBtb2RlbC5cbiAgICogQHBhcmFtIGNvZGUge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIGRvd25sb2FkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZG93bmxvYWRlZCBsYW5ndWFnZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZG93bmxvYWRNb2RlbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhIHNwZWNpZmllZCBsYW5ndWFnZSBtb2RlbC5cbiAgICogQHBhcmFtIGNvZGUge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIGRlbGV0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRlbGV0ZWQgbGFuZ3VhZ2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlbGV0ZU1vZGVsKGNvZGU6IHN0cmluZyk6IFByb21pc2U8TGFuZ3VhZ2VNb2RlbD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19