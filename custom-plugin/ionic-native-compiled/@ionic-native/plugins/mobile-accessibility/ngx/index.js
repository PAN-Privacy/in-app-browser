import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var MobileAccessibility = /** @class */ (function (_super) {
    __extends(MobileAccessibility, _super);
    function MobileAccessibility() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileAccessibility.prototype.isScreenReaderRunning = function () { return cordova(this, "isScreenReaderRunning", {}, arguments); };
    MobileAccessibility.prototype.isVoiceOverRunning = function () { return cordova(this, "isVoiceOverRunning", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isTalkBackRunning = function () { return cordova(this, "isTalkBackRunning", { "platforms": ["Amazon Fire OS", "Android"] }, arguments); };
    MobileAccessibility.prototype.isChromeVoxActive = function () { return cordova(this, "isChromeVoxActive", { "platforms": ["Amazon Fire OS", "Android"] }, arguments); };
    MobileAccessibility.prototype.isBoldTextEnabled = function () { return cordova(this, "isBoldTextEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isClosedCaptioningEnabled = function () { return cordova(this, "isClosedCaptioningEnabled", {}, arguments); };
    MobileAccessibility.prototype.isDarkerSystemColorsEnabled = function () { return cordova(this, "isDarkerSystemColorsEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isGrayscaleEnabled = function () { return cordova(this, "isGrayscaleEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isGuidedAccessEnabled = function () { return cordova(this, "isGuidedAccessEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isInvertColorsEnabled = function () { return cordova(this, "isInvertColorsEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isMonoAudioEnabled = function () { return cordova(this, "isMonoAudioEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isReduceMotionEnabled = function () { return cordova(this, "isReduceMotionEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isReduceTransparencyEnabled = function () { return cordova(this, "isReduceTransparencyEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isSpeakScreenEnabled = function () { return cordova(this, "isSpeakScreenEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isSpeakSelectionEnabled = function () { return cordova(this, "isSpeakSelectionEnabled", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isSwitchControlRunning = function () { return cordova(this, "isSwitchControlRunning", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.isTouchExplorationEnabled = function () { return cordova(this, "isTouchExplorationEnabled", { "platforms": ["Amazon Fire OS", "Android"] }, arguments); };
    MobileAccessibility.prototype.getTextZoom = function () { return cordova(this, "getTextZoom", {}, arguments); };
    MobileAccessibility.prototype.setTextZoom = function (textZoom) { return cordova(this, "setTextZoom", { "sync": true }, arguments); };
    MobileAccessibility.prototype.updateTextZoom = function () { return cordova(this, "updateTextZoom", { "sync": true }, arguments); };
    MobileAccessibility.prototype.usePreferredTextZoom = function (value) { return cordova(this, "usePreferredTextZoom", { "sync": true }, arguments); };
    MobileAccessibility.prototype.postNotification = function (mobileAccessibilityNotification, value) { return cordova(this, "postNotification", { "platforms": ["iOS"] }, arguments); };
    MobileAccessibility.prototype.speak = function (value, queueMode, properties) { return cordova(this, "speak", { "sync": true }, arguments); };
    MobileAccessibility.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    MobileAccessibility.pluginName = "MobileAccessibility";
    MobileAccessibility.plugin = "phonegap-plugin-mobile-accessibility";
    MobileAccessibility.pluginRef = "window.MobileAccessibility";
    MobileAccessibility.repo = "https://github.com/phonegap/phonegap-mobile-accessibility";
    MobileAccessibility.platforms = ["Android Fire OS", "Android", "iOS", "Windows"];
    MobileAccessibility.decorators = [
        { type: Injectable }
    ];
    return MobileAccessibility;
}(IonicNativePlugin));
export { MobileAccessibility };
//# sourceMappingURL=data:application/json;base64,