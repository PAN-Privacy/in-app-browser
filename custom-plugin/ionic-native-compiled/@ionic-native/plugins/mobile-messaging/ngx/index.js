import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DefaultMessageStorage = /** @class */ (function () {
    function DefaultMessageStorage() {
    }
    DefaultMessageStorage.prototype.find = function (messageId, callback) { return cordova(this, "find", { "sync": true }, arguments); };
    DefaultMessageStorage.prototype.findAll = function (callback) { return cordova(this, "findAll", { "sync": true }, arguments); };
    DefaultMessageStorage.prototype.delete = function (messageId, callback) { return cordova(this, "delete", { "sync": true }, arguments); };
    DefaultMessageStorage.prototype.deleteAll = function (callback) { return cordova(this, "deleteAll", { "sync": true }, arguments); };
    return DefaultMessageStorage;
}());
export { DefaultMessageStorage };
var MobileMessaging = /** @class */ (function (_super) {
    __extends(MobileMessaging, _super);
    function MobileMessaging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileMessaging.prototype.init = function (config, onInitError) { return cordova(this, "init", { "sync": true }, arguments); };
    MobileMessaging.prototype.register = function (event) { return cordova(this, "register", { "observable": true }, arguments); };
    MobileMessaging.prototype.on = function (event) { return cordova(this, "on", { "observable": true }, arguments); };
    MobileMessaging.prototype.unregister = function (event) { return cordova(this, "unregister", { "observable": true }, arguments); };
    MobileMessaging.prototype.off = function (event) { return cordova(this, "off", { "observable": true }, arguments); };
    MobileMessaging.prototype.submitEvent = function (event) { return cordova(this, "submitEvent", { "sync": true }, arguments); };
    MobileMessaging.prototype.submitEventImmediately = function (event) { return cordova(this, "submitEventImmediately", { "observable": true }, arguments); };
    MobileMessaging.prototype.saveUser = function (userData) { return cordova(this, "saveUser", {}, arguments); };
    MobileMessaging.prototype.fetchUser = function () { return cordova(this, "fetchUser", {}, arguments); };
    MobileMessaging.prototype.getUser = function () { return cordova(this, "getUser", {}, arguments); };
    MobileMessaging.prototype.saveInstallation = function (installation) { return cordova(this, "saveInstallation", {}, arguments); };
    MobileMessaging.prototype.fetchInstallation = function () { return cordova(this, "fetchInstallation", {}, arguments); };
    MobileMessaging.prototype.getInstallation = function () { return cordova(this, "getInstallation", {}, arguments); };
    MobileMessaging.prototype.setInstallationAsPrimary = function (pushRegistrationId, primary) { return cordova(this, "setInstallationAsPrimary", {}, arguments); };
    MobileMessaging.prototype.personalize = function (context) { return cordova(this, "personalize", {}, arguments); };
    MobileMessaging.prototype.depersonalize = function () { return cordova(this, "depersonalize", {}, arguments); };
    MobileMessaging.prototype.depersonalizeInstallation = function (pushRegistrationId) { return cordova(this, "depersonalizeInstallation", {}, arguments); };
    MobileMessaging.prototype.markMessagesSeen = function (messageIds) { return cordova(this, "markMessagesSeen", {}, arguments); };
    MobileMessaging.prototype.showDialogForError = function (errorCode) { return cordova(this, "showDialogForError", {}, arguments); };
    MobileMessaging.prototype.defaultMessageStorage = function () { return cordova(this, "defaultMessageStorage", { "sync": true }, arguments); };
    MobileMessaging.prototype.showChat = function (config) { return cordova(this, "showChat", {}, arguments); };
    MobileMessaging.pluginName = "MobileMessaging";
    MobileMessaging.plugin = "com-infobip-plugins-mobilemessaging";
    MobileMessaging.pluginRef = "MobileMessaging";
    MobileMessaging.repo = "https://github.com/infobip/mobile-messaging-cordova-plugin";
    MobileMessaging.platforms = ["Android", "iOS"];
    MobileMessaging.decorators = [
        { type: Injectable }
    ];
    return MobileMessaging;
}(IonicNativePlugin));
export { MobileMessaging };
//# sourceMappingURL=data:application/json;base64,