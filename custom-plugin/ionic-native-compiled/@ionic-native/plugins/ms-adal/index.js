var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaInstance, instancePropertyGet, instancePropertySet, checkAvailability } from '@ionic-native/core';
var MSAdalOriginal = /** @class */ (function (_super) {
    __extends(MSAdalOriginal, _super);
    function MSAdalOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MSAdalOriginal.prototype.createAuthenticationContext = function (authority, validateAuthority) {
        if (validateAuthority === void 0) { validateAuthority = true; }
        var authContext;
        if (checkAvailability(MSAdalOriginal.getPluginRef(), null, MSAdalOriginal.getPluginName()) === true) {
            authContext = new (MSAdalOriginal.getPlugin().AuthenticationContext)(authority, validateAuthority);
        }
        return new AuthenticationContext(authContext);
    };
    MSAdalOriginal.pluginName = "MSADAL";
    MSAdalOriginal.plugin = "cordova-plugin-ms-adal";
    MSAdalOriginal.pluginRef = "Microsoft.ADAL";
    MSAdalOriginal.repo = "https://github.com/AzureAD/azure-activedirectory-library-for-cordova";
    MSAdalOriginal.platforms = ["Android", "iOS", "Windows"];
    return MSAdalOriginal;
}(IonicNativePlugin));
var MSAdal = new MSAdalOriginal();
export { MSAdal };
var AuthenticationContext = /** @class */ (function () {
    function AuthenticationContext(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    AuthenticationContext.prototype.acquireTokenAsync = function (resourceUrl, clientId, redirectUrl, userId, extraQueryParameters, claims) { return cordovaInstance(this, "acquireTokenAsync", { "otherPromise": true }, arguments); };
    AuthenticationContext.prototype.acquireTokenSilentAsync = function (resourceUrl, clientId, userId) { return cordovaInstance(this, "acquireTokenSilentAsync", { "otherPromise": true }, arguments); };
    Object.defineProperty(AuthenticationContext.prototype, "authority", {
        get: function () { return instancePropertyGet(this, "authority"); },
        set: function (value) { instancePropertySet(this, "authority", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AuthenticationContext.prototype, "validateAuthority", {
        get: function () { return instancePropertyGet(this, "validateAuthority"); },
        set: function (value) { instancePropertySet(this, "validateAuthority", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AuthenticationContext.prototype, "tokenCache", {
        get: function () { return instancePropertyGet(this, "tokenCache"); },
        set: function (value) { instancePropertySet(this, "tokenCache", value); },
        enumerable: false,
        configurable: true
    });
    return AuthenticationContext;
}());
export { AuthenticationContext };
var AuthenticationSettings = /** @class */ (function () {
    function AuthenticationSettings() {
    }
    AuthenticationSettings.prototype.setUseBroker = function (useBroker) { return cordovaInstance(this, "setUseBroker", { "otherPromise": true }, arguments); };
    return AuthenticationSettings;
}());
export { AuthenticationSettings };
//# sourceMappingURL=data:application/json;base64,