var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeViewOriginal = /** @class */ (function (_super) {
    __extends(NativeViewOriginal, _super);
    function NativeViewOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeViewOriginal.prototype.show = function (packageOrClass, className, extraParams, success, error) { return cordova(this, "show", {}, arguments); };
    NativeViewOriginal.prototype.checkIfAppInstalled = function (config, success, error) { return cordova(this, "checkIfAppInstalled", {}, arguments); };
    NativeViewOriginal.prototype.showMarket = function (config, success, error) { return cordova(this, "showMarket", {}, arguments); };
    NativeViewOriginal.prototype.getBuildVariant = function (config, success, error) { return cordova(this, "getBuildVariant", { "platforms": ["android"] }, arguments); };
    NativeViewOriginal.pluginName = "NativeView";
    NativeViewOriginal.plugin = "cordova-plugin-nativeview";
    NativeViewOriginal.pluginRef = "cordova.plugins.NativeView";
    NativeViewOriginal.repo = "https://github.com/mfdeveloper/cordova-plugin-nativeview";
    NativeViewOriginal.platforms = ["Android", "iOS"];
    return NativeViewOriginal;
}(IonicNativePlugin));
var NativeView = new NativeViewOriginal();
export { NativeView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS12aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEeEMsOEJBQWlCOzs7O0lBbUMvQyx5QkFBSSxhQUNGLGNBQXFDLEVBQ3JDLFNBQWtCLEVBQ2xCLFdBQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLEtBQWdCO0lBY2xCLHdDQUFtQixhQUFDLE1BQW9CLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWE5RSwrQkFBVSxhQUFDLE1BQTBCLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWtCM0Usb0NBQWUsYUFBQyxNQUFnQyxFQUFFLE9BQWtCLEVBQUUsS0FBZ0I7Ozs7OztxQkFoSnhGO0VBMkRnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIE5hdGl2ZVZpZXdcbiAqIEBkZXNjcmlwdGlvbiBTaG93cyB0aGUgbmF0aXZlIHZpZXcuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOYXRpdmVWaWV3IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9uYXRpdmUtdmlldy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZVZpZXc6IE5hdGl2ZVZpZXcpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLm5hdGl2ZVZpZXcuZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRWaWV3IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbmFtZT86IHN0cmluZztcbiAgbWVzc2FnZT86IHN0cmluZztcbiAgdXJpPzogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0QXBwSW5zdGFsbGVkIGV4dGVuZHMgUmVzdWx0VmlldyB7XG4gIHBhY2thZ2VOYW1lPzogc3RyaW5nO1xuICBhcHBsaWNhdGlvbkluZm8/OiBzdHJpbmc7XG4gIGFjdGl2aXR5TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVQYXJhbXMge1xuICBwYWNrYWdlPzogc3RyaW5nO1xuICBwYWNrYWdlTmFtZT86IHN0cmluZztcbiAgcGFja2FnZUFwcD86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB1cmk/OiBzdHJpbmc7XG4gIHN0b3J5Ym9hcmROYW1lPzogc3RyaW5nO1xuICB2aWV3Q29udHJvbGxlck5hbWU/OiBzdHJpbmc7XG4gIHBhcmFtcz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVNYXJrZXRQYXJhbXMgZXh0ZW5kcyBOYXRpdmVQYXJhbXMge1xuICBtYXJrZXRJZD86IHN0cmluZztcbn1cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTmF0aXZlVmlldycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5hdGl2ZXZpZXcnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbWZkZXZlbG9wZXIvY29yZG92YS1wbHVnaW4tbmF0aXZldmlldycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYXRpdmVWaWV3IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU2hvd3MgdGhlIG5hdGl2ZSB2aWV3LlxuICAgKlxuICAgKiBEZWZpbmUgdGhlIGBwYWNrYWdlT3JDbGFzc2AgcGFyYW0gdG8gYSBwYWNrYWdlIChBbmRyb2lkKSBvciBhXG4gICAqIHN0b3J5Ym9hcmQvY2xhc3NuYW1lIChJT1MpXG4gICAqXG4gICAqIGBgYHRzXG4gICAqXG4gICAqIC8vQW5kcm9pZFxuICAgKiBjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldy5zaG93KCdjb20ubXljb21wYW55JywgJ015QWN0aXZpdHknKVxuICAgKiAudGhlbigoKSA9PiB7XG4gICAqICAgIC8vIERvIHNvbWV0aGluZ1xuICAgKiB9KTtcbiAgICpcbiAgICogLy9JT1NcbiAgICogY29yZG92YS5wbHVnaW5zLk5hdGl2ZVZpZXcuc2hvdygnTXlTdG9yeWJvYXJkJywgJ015VUlWaWV3Q29udHJvbGxlcicpXG4gICAqIC50aGVuKCgpID0+IHtcbiAgICogICAgLy8gRG8gc29tZXRoaW5nXG4gICAqIH0pO1xuICAgKlxuICAgKiAvL09SIEJhY2sgdG8gcHJldmlvdXMgVmlldyAoSU9TIG9ubHkpXG4gICAqIGNvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3LnNob3coKS50aGVuKCgpID0+IHtcbiAgICogICAgLy8gRG8gc29tZXRoaW5nXG4gICAqIH0pO1xuICAgKlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtOYXRpdmVQYXJhbXN8c3RyaW5nfSBwYWNrYWdlT3JDbGFzcyBQYWNrYWdlIG9yIGNsYXNzIG5hbWUgb2YgdmlldyB0byBvcGVuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgQ2xhc3MgbmFtZSBvZiB2aWV3IHRvIG9wZW5cbiAgICogQHBhcmFtIHthbnl9IFtleHRyYVBhcmFtc10gW09wdGlvbmFsXSBQYXJhbXMgdG8gc2VuZCB0byBhIE5hdGl2ZSB2aWV3IHRoYXQgd2lsbCBiZSBvcGVuZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIFtPcHRpb25hbF0gQ2FsbGJhY2sgd2hlbiBzdWNjZXNzLCBpZiB5b3UgZG9uJ3Qgd2FudCB1c2UgcHJvbWlzZSBcInRoZW4oKVwiXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtlcnJvcl0gW09wdGlvbmFsXSBDYWxsYmFjayB3aGVuIGVycm9yIGhhcHBlbnMsIGlmIHlvdSBkb24ndCB3YW50IHVzZSBwcm9taXNlIFwiY2F0Y2goKVwiXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3coXG4gICAgcGFja2FnZU9yQ2xhc3M6IE5hdGl2ZVBhcmFtcyB8IHN0cmluZyxcbiAgICBjbGFzc05hbWU/OiBzdHJpbmcsXG4gICAgZXh0cmFQYXJhbXM/OiBhbnksXG4gICAgc3VjY2Vzcz86IEZ1bmN0aW9uLFxuICAgIGVycm9yPzogRnVuY3Rpb25cbiAgKTogUHJvbWlzZTxSZXN1bHRWaWV3PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3BlY2lmaWMgYXBwIGlzIGluc3RhbGxlZFxuICAgKlxuICAgKiBAcGFyYW0ge05hdGl2ZVBhcmFtc30gY29uZmlnXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtzdWNjZXNzXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MuIFVzZSBgLnRoZW4oKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBDYWxsYmFjayBjYWxsYmVkIHdoZW4gYW4gZXJyb3IgaGFwcGVucy4gVXNlIGAuY2F0Y2goKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzdWx0QXBwSW5zdGFsbGVkPn0gUmV0dXJucyBkYXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnN0YWxsZWQgYXBwXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNoZWNrSWZBcHBJbnN0YWxsZWQoY29uZmlnOiBOYXRpdmVQYXJhbXMsIHN1Y2Nlc3M/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbik6IFByb21pc2U8UmVzdWx0QXBwSW5zdGFsbGVkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgc3RvcmUvbWFya2V0IGZvIGluc3RhbGwgYSBzcGVjaWZpYyBhcHBcbiAgICpcbiAgICogQHBhcmFtIHtOYXRpdmVNYXJrZXRQYXJhbXN9IGNvbmZpZyBOYXRpdmUgcGFja2FnZSBhbmQvb3IgbWFya2V0SWQgdG8gc2hvdyBpbiBHb29nbGUgUGxheS9BcHBsZSBTdG9yZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc3VjY2Vzc10gQ2FsbGJhY2sgd2hlbiBzdWNjZXNzLiBVc2UgYC50aGVuKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtlcnJvcl0gQ2FsbGJhY2sgY2FsbGJlZCB3aGVuIGFuIGVycm9yIGhhcHBlbnMuIFVzZSBgLmNhdGNoKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3VsdFZpZXc+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaG93TWFya2V0KGNvbmZpZzogTmF0aXZlTWFya2V0UGFyYW1zLCBzdWNjZXNzPzogRnVuY3Rpb24sIGVycm9yPzogRnVuY3Rpb24pOiBQcm9taXNlPFJlc3VsdFZpZXc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogIyMjIEFORFJPSUQgT05MWVxuICAgKlxuICAgKiBHZXQgdGhlICoqQW5kcm9pZCoqIGN1cnJlbnQgYnVpbGQgdmFyaWFudCBGTEFWT1JcbiAgICogVGhpcyBpcyBncmVhdCBpZiB5b3UgY2hhbmdlIHRoZSBGTEFWT1IgaW4gY29tcGlsZSB0aW1lXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5jYXRjaEVycm9yXSBgY29uZmlnLmNhdGNoRXJyb3JgIFRydWUsIGlmIHlvdSB3aXNoIGNhdGNoIGEgSlNPTiB3aXRoIGVycm9yIGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtzdWNjZXNzXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MuIFVzZSBgLnRoZW4oKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBDYWxsYmFjayBjYWxsYmVkIHdoZW4gYW4gZXJyb3IgaGFwcGVucy4gVXNlIGAuY2F0Y2goKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIGN1cnJlbnQgRkxBVk9SIHN0cmluZ1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydhbmRyb2lkJ10sXG4gIH0pXG4gIGdldEJ1aWxkVmFyaWFudChjb25maWc6IHsgY2F0Y2hFcnJvcj86IGJvb2xlYW4gfSwgc3VjY2Vzcz86IEZ1bmN0aW9uLCBlcnJvcj86IEZ1bmN0aW9uKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==