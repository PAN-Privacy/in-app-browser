import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeView = /** @class */ (function (_super) {
    __extends(NativeView, _super);
    function NativeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeView.prototype.show = function (packageOrClass, className, extraParams, success, error) { return cordova(this, "show", {}, arguments); };
    NativeView.prototype.checkIfAppInstalled = function (config, success, error) { return cordova(this, "checkIfAppInstalled", {}, arguments); };
    NativeView.prototype.showMarket = function (config, success, error) { return cordova(this, "showMarket", {}, arguments); };
    NativeView.prototype.getBuildVariant = function (config, success, error) { return cordova(this, "getBuildVariant", { "platforms": ["android"] }, arguments); };
    NativeView.pluginName = "NativeView";
    NativeView.plugin = "cordova-plugin-nativeview";
    NativeView.pluginRef = "cordova.plugins.NativeView";
    NativeView.repo = "https://github.com/mfdeveloper/cordova-plugin-nativeview";
    NativeView.platforms = ["Android", "iOS"];
    NativeView.decorators = [
        { type: Injectable }
    ];
    return NativeView;
}(IonicNativePlugin));
export { NativeView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS12aWV3L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEeEMsOEJBQWlCOzs7O0lBbUMvQyx5QkFBSSxhQUNGLGNBQXFDLEVBQ3JDLFNBQWtCLEVBQ2xCLFdBQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLEtBQWdCO0lBY2xCLHdDQUFtQixhQUFDLE1BQW9CLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWE5RSwrQkFBVSxhQUFDLE1BQTBCLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWtCM0Usb0NBQWUsYUFBQyxNQUFnQyxFQUFFLE9BQWtCLEVBQUUsS0FBZ0I7Ozs7Ozs7Z0JBdEZ2RixVQUFVOztxQkExRFg7RUEyRGdDLGlCQUFpQjtTQUFwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgTmF0aXZlVmlld1xuICogQGRlc2NyaXB0aW9uIFNob3dzIHRoZSBuYXRpdmUgdmlldy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5hdGl2ZVZpZXcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25hdGl2ZS12aWV3L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlVmlldzogTmF0aXZlVmlldykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMubmF0aXZlVmlldy5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFZpZXcge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBuYW1lPzogc3RyaW5nO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICB1cmk/OiBzdHJpbmc7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRBcHBJbnN0YWxsZWQgZXh0ZW5kcyBSZXN1bHRWaWV3IHtcbiAgcGFja2FnZU5hbWU/OiBzdHJpbmc7XG4gIGFwcGxpY2F0aW9uSW5mbz86IHN0cmluZztcbiAgYWN0aXZpdHlOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZVBhcmFtcyB7XG4gIHBhY2thZ2U/OiBzdHJpbmc7XG4gIHBhY2thZ2VOYW1lPzogc3RyaW5nO1xuICBwYWNrYWdlQXBwPzogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHVyaT86IHN0cmluZztcbiAgc3Rvcnlib2FyZE5hbWU/OiBzdHJpbmc7XG4gIHZpZXdDb250cm9sbGVyTmFtZT86IHN0cmluZztcbiAgcGFyYW1zPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZU1hcmtldFBhcmFtcyBleHRlbmRzIE5hdGl2ZVBhcmFtcyB7XG4gIG1hcmtldElkPzogc3RyaW5nO1xufVxuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdOYXRpdmVWaWV3JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbmF0aXZldmlldycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tZmRldmVsb3Blci9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmV2aWV3JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVZpZXcgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBTaG93cyB0aGUgbmF0aXZlIHZpZXcuXG4gICAqXG4gICAqIERlZmluZSB0aGUgYHBhY2thZ2VPckNsYXNzYCBwYXJhbSB0byBhIHBhY2thZ2UgKEFuZHJvaWQpIG9yIGFcbiAgICogc3Rvcnlib2FyZC9jbGFzc25hbWUgKElPUylcbiAgICpcbiAgICogYGBgdHNcbiAgICpcbiAgICogLy9BbmRyb2lkXG4gICAqIGNvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3LnNob3coJ2NvbS5teWNvbXBhbnknLCAnTXlBY3Rpdml0eScpXG4gICAqIC50aGVuKCgpID0+IHtcbiAgICogICAgLy8gRG8gc29tZXRoaW5nXG4gICAqIH0pO1xuICAgKlxuICAgKiAvL0lPU1xuICAgKiBjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldy5zaG93KCdNeVN0b3J5Ym9hcmQnLCAnTXlVSVZpZXdDb250cm9sbGVyJylcbiAgICogLnRoZW4oKCkgPT4ge1xuICAgKiAgICAvLyBEbyBzb21ldGhpbmdcbiAgICogfSk7XG4gICAqXG4gICAqIC8vT1IgQmFjayB0byBwcmV2aW91cyBWaWV3IChJT1Mgb25seSlcbiAgICogY29yZG92YS5wbHVnaW5zLk5hdGl2ZVZpZXcuc2hvdygpLnRoZW4oKCkgPT4ge1xuICAgKiAgICAvLyBEbyBzb21ldGhpbmdcbiAgICogfSk7XG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge05hdGl2ZVBhcmFtc3xzdHJpbmd9IHBhY2thZ2VPckNsYXNzIFBhY2thZ2Ugb3IgY2xhc3MgbmFtZSBvZiB2aWV3IHRvIG9wZW5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lIG9mIHZpZXcgdG8gb3BlblxuICAgKiBAcGFyYW0ge2FueX0gW2V4dHJhUGFyYW1zXSBbT3B0aW9uYWxdIFBhcmFtcyB0byBzZW5kIHRvIGEgTmF0aXZlIHZpZXcgdGhhdCB3aWxsIGJlIG9wZW5lZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc3VjY2Vzc10gW09wdGlvbmFsXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MsIGlmIHlvdSBkb24ndCB3YW50IHVzZSBwcm9taXNlIFwidGhlbigpXCJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBbT3B0aW9uYWxdIENhbGxiYWNrIHdoZW4gZXJyb3IgaGFwcGVucywgaWYgeW91IGRvbid0IHdhbnQgdXNlIHByb21pc2UgXCJjYXRjaCgpXCJcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvdyhcbiAgICBwYWNrYWdlT3JDbGFzczogTmF0aXZlUGFyYW1zIHwgc3RyaW5nLFxuICAgIGNsYXNzTmFtZT86IHN0cmluZyxcbiAgICBleHRyYVBhcmFtcz86IGFueSxcbiAgICBzdWNjZXNzPzogRnVuY3Rpb24sXG4gICAgZXJyb3I/OiBGdW5jdGlvblxuICApOiBQcm9taXNlPFJlc3VsdFZpZXc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBzcGVjaWZpYyBhcHAgaXMgaW5zdGFsbGVkXG4gICAqXG4gICAqIEBwYXJhbSB7TmF0aXZlUGFyYW1zfSBjb25maWdcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIENhbGxiYWNrIHdoZW4gc3VjY2Vzcy4gVXNlIGAudGhlbigpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGNhbGxiZWQgd2hlbiBhbiBlcnJvciBoYXBwZW5zLiBVc2UgYC5jYXRjaCgpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXN1bHRBcHBJbnN0YWxsZWQ+fSBSZXR1cm5zIGRhdGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluc3RhbGxlZCBhcHBcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2hlY2tJZkFwcEluc3RhbGxlZChjb25maWc6IE5hdGl2ZVBhcmFtcywgc3VjY2Vzcz86IEZ1bmN0aW9uLCBlcnJvcj86IEZ1bmN0aW9uKTogUHJvbWlzZTxSZXN1bHRBcHBJbnN0YWxsZWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgYSBzdG9yZS9tYXJrZXQgZm8gaW5zdGFsbCBhIHNwZWNpZmljIGFwcFxuICAgKlxuICAgKiBAcGFyYW0ge05hdGl2ZU1hcmtldFBhcmFtc30gY29uZmlnIE5hdGl2ZSBwYWNrYWdlIGFuZC9vciBtYXJrZXRJZCB0byBzaG93IGluIEdvb2dsZSBQbGF5L0FwcGxlIFN0b3JlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtzdWNjZXNzXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MuIFVzZSBgLnRoZW4oKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBDYWxsYmFjayBjYWxsYmVkIHdoZW4gYW4gZXJyb3IgaGFwcGVucy4gVXNlIGAuY2F0Y2goKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzdWx0Vmlldz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3dNYXJrZXQoY29uZmlnOiBOYXRpdmVNYXJrZXRQYXJhbXMsIHN1Y2Nlc3M/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbik6IFByb21pc2U8UmVzdWx0Vmlldz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgQU5EUk9JRCBPTkxZXG4gICAqXG4gICAqIEdldCB0aGUgKipBbmRyb2lkKiogY3VycmVudCBidWlsZCB2YXJpYW50IEZMQVZPUlxuICAgKiBUaGlzIGlzIGdyZWF0IGlmIHlvdSBjaGFuZ2UgdGhlIEZMQVZPUiBpbiBjb21waWxlIHRpbWVcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNhdGNoRXJyb3JdIGBjb25maWcuY2F0Y2hFcnJvcmAgVHJ1ZSwgaWYgeW91IHdpc2ggY2F0Y2ggYSBKU09OIHdpdGggZXJyb3IgaW5mb3JtYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIENhbGxiYWNrIHdoZW4gc3VjY2Vzcy4gVXNlIGAudGhlbigpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGNhbGxiZWQgd2hlbiBhbiBlcnJvciBoYXBwZW5zLiBVc2UgYC5jYXRjaCgpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgY3VycmVudCBGTEFWT1Igc3RyaW5nXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ2FuZHJvaWQnXSxcbiAgfSlcbiAgZ2V0QnVpbGRWYXJpYW50KGNvbmZpZzogeyBjYXRjaEVycm9yPzogYm9vbGVhbiB9LCBzdWNjZXNzPzogRnVuY3Rpb24sIGVycm9yPzogRnVuY3Rpb24pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19