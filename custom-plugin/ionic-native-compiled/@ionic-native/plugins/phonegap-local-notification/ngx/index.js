import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaInstance, checkAvailability } from '@ionic-native/core';
var PLNObject = /** @class */ (function () {
    function PLNObject(title, options) {
        if (checkAvailability(PhonegapLocalNotification.pluginRef, null, PhonegapLocalNotification.pluginName) === true) {
            this._objectInstance = new Notification(title, options);
        }
    }
    PLNObject.prototype.close = function () { return cordovaInstance(this, "close", { "sync": true }, arguments); };
    return PLNObject;
}());
export { PLNObject };
var PhonegapLocalNotification = /** @class */ (function (_super) {
    __extends(PhonegapLocalNotification, _super);
    function PhonegapLocalNotification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * A global object that lets you interact with the Notification API.
     * @param title {string} Title of the local notification.
     * @param Options {LocalNotificationOptions} An object containing optional property/value pairs.
     * @returns {PLNObject}
     */
    PhonegapLocalNotification.prototype.create = function (title, options) {
        return new PLNObject(title, options);
    };
    PhonegapLocalNotification.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    PhonegapLocalNotification.pluginName = "Phonegap Local Notifications";
    PhonegapLocalNotification.plugin = "phonegap-plugin-local-notification";
    PhonegapLocalNotification.pluginRef = "Notification";
    PhonegapLocalNotification.repo = "https://github.com/phonegap/phonegap-plugin-local-notification";
    PhonegapLocalNotification.platforms = ["Android", "Browser", "iOS", "Windows"];
    PhonegapLocalNotification.decorators = [
        { type: Injectable }
    ];
    return PhonegapLocalNotification;
}(IonicNativePlugin));
export { PhonegapLocalNotification };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Bob25lZ2FwLWxvY2FsLW5vdGlmaWNhdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTywrQ0FBdUQsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFVMUcsbUJBQVksS0FBYSxFQUFFLE9BQWlDO1FBQzFELElBQUksaUJBQWlCLENBQUMseUJBQXlCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDL0csSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDO0lBR0QseUJBQUs7b0JBbEJQOzs7O0lBMkYrQyw2Q0FBaUI7Ozs7SUFDOUQ7Ozs7O09BS0c7SUFDSCwwQ0FBTSxHQUFOLFVBQU8sS0FBYSxFQUFFLE9BQWlDO1FBQ3JELE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFPRCxxREFBaUI7Ozs7Ozs7Z0JBakJsQixVQUFVOztvQ0ExRlg7RUEyRitDLGlCQUFpQjtTQUFuRCx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhSW5zdGFuY2UsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4sIGNoZWNrQXZhaWxhYmlsaXR5IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZGVjbGFyZSBjb25zdCBOb3RpZmljYXRpb246IGFueTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBQTE5PYmplY3Qge1xuICBwcml2YXRlIF9vYmplY3RJbnN0YW5jZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHRpdGxlOiBzdHJpbmcsIG9wdGlvbnM6IExvY2FsTm90aWZpY2F0aW9uT3B0aW9ucykge1xuICAgIGlmIChjaGVja0F2YWlsYWJpbGl0eShQaG9uZWdhcExvY2FsTm90aWZpY2F0aW9uLnBsdWdpblJlZiwgbnVsbCwgUGhvbmVnYXBMb2NhbE5vdGlmaWNhdGlvbi5wbHVnaW5OYW1lKSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5fb2JqZWN0SW5zdGFuY2UgPSBuZXcgTm90aWZpY2F0aW9uKHRpdGxlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBAQ29yZG92YUluc3RhbmNlKHsgc3luYzogdHJ1ZSB9KVxuICBjbG9zZSgpOiB2b2lkIHt9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxOb3RpZmljYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm90aWZpY2F0aW9uLiBPbmUgb2YgXCJhdXRvXCIsIFwibHRyXCIgb3IgXCJydGxcIlxuICAgKi9cbiAgZGlyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiAgU2V0cyB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgKi9cbiAgbGFuZz86IHN0cmluZztcblxuICAvKipcbiAgICogU2V0cyB0aGUgYm9keSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAqL1xuICBib2R5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpZGVudGlmeWluZyB0YWcgb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgKi9cbiAgdGFnPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpY29uIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICovXG4gIGljb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgUGhvbmVnYXAgTG9jYWwgTm90aWZpY2F0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBMb2NhbCBOb3RpZmljYXRpb24gcGx1Z2luIGdpdmVzIGRldmVsb3BlcnMgdGhlIGFiaWxpdHkgdG8gcG9zdCBub3RpZmljYXRpb25zIGZyb20gdGhlaXIgYXBwIHRoYXQgc2hvdyB1cCBpbiB0aGUgZGV2aWNl4oCZcyBub3RpZmljYXRpb24gYXJlYS5cbiAqIFRoZSBBUEkgZm9yIHRoZSBsb2NhbCBub3RpZmljYXRpb24gcGx1Z2luIGZvbGxvd3MgdGhlIFczQyBXZWIgTm90aWZpY2F0aW9ucyBzcGVjaWZpY2F0aW9uOiBodHRwczovL3d3dy53My5vcmcvVFIvbm90aWZpY2F0aW9ucy9cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHsgUGhvbmVnYXBMb2NhbE5vdGlmaWNhdGlvbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcGhvbmVnYXAtbG9jYWwtbm90aWZpY2F0aW9uL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYWxOb3RpZmljYXRpb246IFBob25lZ2FwTG9jYWxOb3RpZmljYXRpb24pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMubG9jYWxOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKFxuICogICAocGVybWlzc2lvbikgPT4ge1xuICogICAgIGlmIChwZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHtcbiAqXG4gKiAgICAgICAvLyBDcmVhdGUgdGhlIG5vdGlmaWNhdGlvblxuICogICAgICAgdGhpcy5sb2NhbE5vdGlmaWNhdGlvbi5jcmVhdGUoJ015IFRpdGxlJywge1xuICogICAgICAgICB0YWc6ICdtZXNzYWdlMScsXG4gKiAgICAgICAgIGJvZHk6ICdNeSBib2R5JyxcbiAqICAgICAgICAgaWNvbjogJ2Fzc2V0cy9pY29uL2Zhdmljb24uaWNvJ1xuICogICAgICAgfSk7XG4gKlxuICogICAgIH1cbiAqICAgfVxuICogKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogTG9jYWxOb3RpZmljYXRpb25PcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUGhvbmVnYXAgTG9jYWwgTm90aWZpY2F0aW9ucycsXG4gIHBsdWdpbjogJ3Bob25lZ2FwLXBsdWdpbi1sb2NhbC1ub3RpZmljYXRpb24nLFxuICBwbHVnaW5SZWY6ICdOb3RpZmljYXRpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1sb2NhbC1ub3RpZmljYXRpb24nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBob25lZ2FwTG9jYWxOb3RpZmljYXRpb24gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBBIGdsb2JhbCBvYmplY3QgdGhhdCBsZXRzIHlvdSBpbnRlcmFjdCB3aXRoIHRoZSBOb3RpZmljYXRpb24gQVBJLlxuICAgKiBAcGFyYW0gdGl0bGUge3N0cmluZ30gVGl0bGUgb2YgdGhlIGxvY2FsIG5vdGlmaWNhdGlvbi5cbiAgICogQHBhcmFtIE9wdGlvbnMge0xvY2FsTm90aWZpY2F0aW9uT3B0aW9uc30gQW4gb2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9uYWwgcHJvcGVydHkvdmFsdWUgcGFpcnMuXG4gICAqIEByZXR1cm5zIHtQTE5PYmplY3R9XG4gICAqL1xuICBjcmVhdGUodGl0bGU6IHN0cmluZywgb3B0aW9uczogTG9jYWxOb3RpZmljYXRpb25PcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQTE5PYmplY3QodGl0bGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlcXVlc3RzIHBlcm1pc3Npb24gZnJvbSB0aGUgdXNlciB0byBzaG93IGEgbG9jYWwgbm90aWZpY2F0aW9uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0UGVybWlzc2lvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19