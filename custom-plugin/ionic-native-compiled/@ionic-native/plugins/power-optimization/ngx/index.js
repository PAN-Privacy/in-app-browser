import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PowerOptimization = /** @class */ (function (_super) {
    __extends(PowerOptimization, _super);
    function PowerOptimization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowerOptimization.prototype.IsIgnoringBatteryOptimizations = function () { return cordova(this, "IsIgnoringBatteryOptimizations", { "sync": true }, arguments); };
    PowerOptimization.prototype.RequestOptimizations = function () { return cordova(this, "RequestOptimizations", { "sync": true }, arguments); };
    PowerOptimization.prototype.RequestOptimizationsMenu = function () { return cordova(this, "RequestOptimizationsMenu", { "sync": true }, arguments); };
    PowerOptimization.prototype.IsIgnoringDataSaver = function () { return cordova(this, "IsIgnoringDataSaver", { "sync": true }, arguments); };
    PowerOptimization.prototype.RequestDataSaverMenu = function () { return cordova(this, "RequestDataSaverMenu", { "sync": true }, arguments); };
    PowerOptimization.prototype.HaveProtectedAppsCheck = function () { return cordova(this, "HaveProtectedAppsCheck", { "sync": true }, arguments); };
    PowerOptimization.prototype.ProtectedAppCheck = function () { return cordova(this, "ProtectedAppCheck", { "sync": true }, arguments); };
    PowerOptimization.pluginName = "PowerOptimization";
    PowerOptimization.plugin = "cordova-plugin-power-optimization";
    PowerOptimization.pluginRef = "cordova.plugins.PowerOptimization";
    PowerOptimization.repo = "https://github.com/snt1017/cordova-plugin-power-optimization";
    PowerOptimization.platforms = ["Android"];
    PowerOptimization.decorators = [
        { type: Injectable }
    ];
    return PowerOptimization;
}(IonicNativePlugin));
export { PowerOptimization };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Bvd2VyLW9wdGltaXphdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2QmpDLHFDQUFpQjs7OztJQU90RCwwREFBOEI7SUFTOUIsZ0RBQW9CO0lBU3BCLG9EQUF3QjtJQVN4QiwrQ0FBbUI7SUFTbkIsZ0RBQW9CO0lBU3BCLGtEQUFzQjtJQVN0Qiw2Q0FBaUI7Ozs7Ozs7Z0JBOURsQixVQUFVOzs0QkE3Qlg7RUE4QnVDLGlCQUFpQjtTQUEzQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbi8qKlxuICogQG5hbWUgUG93ZXIgT3B0aW1pemF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFuZHJvaWQgQ3VzdG9tIFJvbXMgbWFkZSBzb21ldGltZXMgeW91ciBhcHBzIHVuZnVuY3Rpb25hbCBkdWUgdG8gYmVpbmcga2lsbGVkIGluIHRoZSBiYWNrZ3JvdW5kLCBub3RpZmljYXRpb24gbWVzc2FnZXMgZG8gbm90IGFwcGVhcmluZyBvciB5b3VyIHNlcnZpY2VzIGJlaW5nIGtpbGxlZCBieSBhZ3Jlc3NpdmUgcG93ZXIgc2F2aW5nIG1vZGUuXG4gKiBUaGUgUG93ZXIgT3B0aW1pemF0aW9uIHBsdWdpbiBnaXZlIHlvdSBhbmRyb2lkIFBvd2VyTWFuYWdlciBtZXRob2RzIHdpdGggY29yZG92YS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFBvd2VyT3B0aW1pemF0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wb3dlci1vcHRpbWl6YXRpb24vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvd2VyT3B0aW1pemF0aW9uOiBQb3dlck9wdGltaXphdGlvbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5wb3dlck9wdGltaXphdGlvbi5Jc0lnbm9yaW5nQmF0dGVyeU9wdGltaXphdGlvbnMoKVxuICogICAudGhlbihvblN1Y2Nlc3MpXG4gKiAgIC5jYXRjaChvbkVycm9yKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdQb3dlck9wdGltaXphdGlvbicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvbicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Qb3dlck9wdGltaXphdGlvbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vc250MTAxNy9jb3Jkb3ZhLXBsdWdpbi1wb3dlci1vcHRpbWl6YXRpb24nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb3dlck9wdGltaXphdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBiYXR0ZXJ5IG9wdGltaXphdGlvbiBpcyBpZ25vcmluZ1xuICAgKiBGb3IgbW9yZSBpbmZvLCBwbGVhc2UgY2hlY2sgaHR0cHM6Ly9naXRodWIuY29tL3NudDEwMTcvY29yZG92YS1wbHVnaW4tcG93ZXItb3B0aW1pemF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgSXNJZ25vcmluZ0JhdHRlcnlPcHRpbWl6YXRpb25zKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHBlcm1pc3NvbiB0byBpZ25vcmUgb3B0aW1pemF0aW9uczpcbiAgICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9zbnQxMDE3L2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIFJlcXVlc3RPcHRpbWl6YXRpb25zKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBHbyB0byBiYXR0ZXJ5IG9wdGltaXphdGlvbnMgY29uZmlndXJhdGlvbnMgbWVudTpcbiAgICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9zbnQxMDE3L2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIFJlcXVlc3RPcHRpbWl6YXRpb25zTWVudSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgaGF2ZSBhbnkgZGF0YSByZXN0cmljdGlvbnMgaW4gYmFja2dyb3VuZDpcbiAgICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9zbnQxMDE3L2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIElzSWdub3JpbmdEYXRhU2F2ZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEdvIHRvIGRhdGEgcmVzdHJpY3Rpb25zIGluIGJhY2tncm91bmQgY29uZmlndXJhdGlvbnMgbWVudTpcbiAgICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9zbnQxMDE3L2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIFJlcXVlc3REYXRhU2F2ZXJNZW51KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBoYXZlIGFub3RoZXIgYmF0dGVyeSByZXN0cmljdGlvbiBpcyBwcmVzZW50IGludG8gcGhvbmUgKGxpa2UgaHVhd2VpLCB4aWFvbWksIGV0Yyk6XG4gICAqIEZvciBtb3JlIGluZm8sIHBsZWFzZSBjaGVjayBodHRwczovL2dpdGh1Yi5jb20vc250MTAxNy9jb3Jkb3ZhLXBsdWdpbi1wb3dlci1vcHRpbWl6YXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBIYXZlUHJvdGVjdGVkQXBwc0NoZWNrKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBHbyB0byBjb25maWd1cmF0aW9ucyBtZW51IGlmIGFub3RoZXIgYmF0dGVyeSByZXN0cmljdGlvbiBpcyBwcmVzZW50IGludG8gcGhvbmUgKGxpa2UgaHVhd2VpLCB4aWFvbWksIGV0YykuIFlvdSBjYW4gc2VuZCB0cnVlIGludG8gcGFyYW1zIGlmIHlvdSB3YW50IHRvIGZvcmNlIHNob3cgdGhlIG1lbnUgKGlzIG9ubHkgc2hvdyB0aGUgZmlzdCB0aW1lIHdpdGhvdXQgcGFyYW1zKTpcbiAgICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9zbnQxMDE3L2NvcmRvdmEtcGx1Z2luLXBvd2VyLW9wdGltaXphdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIFByb3RlY3RlZEFwcENoZWNrKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=