var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var QQSDKOriginal = /** @class */ (function (_super) {
    __extends(QQSDKOriginal, _super);
    function QQSDKOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * QQ Share Scene
         */
        _this.Scene = {
            QQ: 0,
            QQZone: 1,
            Favorite: 2,
        };
        /**
         *  client type:  QQ application or TIM application
         */
        _this.ClientType = {
            QQ: 0,
            TIM: 1,
        };
        return _this;
    }
    QQSDKOriginal.prototype.ssoLogin = function (options) { return cordova(this, "ssoLogin", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.logout = function () { return cordova(this, "logout", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.checkClientInstalled = function (options) { return cordova(this, "checkClientInstalled", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.shareText = function (options) { return cordova(this, "shareText", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.shareImage = function (options) { return cordova(this, "shareImage", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.shareNews = function (options) { return cordova(this, "shareNews", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.prototype.shareAudio = function (options) { return cordova(this, "shareAudio", { "callbackOrder": "reverse" }, arguments); };
    QQSDKOriginal.pluginName = "QQSDK";
    QQSDKOriginal.plugin = "cordova-plugin-qqsdk";
    QQSDKOriginal.pluginRef = "QQSDK";
    QQSDKOriginal.repo = "https://github.com/iVanPan/Cordova_QQ";
    QQSDKOriginal.platforms = ["Android", "iOS"];
    QQSDKOriginal.install = "ionic cordova plugin add cordova-plugin-qqsdk --variable QQ_APP_ID=YOUR_QQ_APPID";
    QQSDKOriginal.installVariables = ["QQ_APP_ID"];
    return QQSDKOriginal;
}(IonicNativePlugin));
var QQSDK = new QQSDKOriginal();
export { QQSDK };
//# sourceMappingURL=data:application/json;base64,