import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var QQSDK = /** @class */ (function (_super) {
    __extends(QQSDK, _super);
    function QQSDK() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * QQ Share Scene
         */
        _this.Scene = {
            QQ: 0,
            QQZone: 1,
            Favorite: 2,
        };
        /**
         *  client type:  QQ application or TIM application
         */
        _this.ClientType = {
            QQ: 0,
            TIM: 1,
        };
        return _this;
    }
    QQSDK.prototype.ssoLogin = function (options) { return cordova(this, "ssoLogin", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.logout = function () { return cordova(this, "logout", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.checkClientInstalled = function (options) { return cordova(this, "checkClientInstalled", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.shareText = function (options) { return cordova(this, "shareText", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.shareImage = function (options) { return cordova(this, "shareImage", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.shareNews = function (options) { return cordova(this, "shareNews", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.prototype.shareAudio = function (options) { return cordova(this, "shareAudio", { "callbackOrder": "reverse" }, arguments); };
    QQSDK.pluginName = "QQSDK";
    QQSDK.plugin = "cordova-plugin-qqsdk";
    QQSDK.pluginRef = "QQSDK";
    QQSDK.repo = "https://github.com/iVanPan/Cordova_QQ";
    QQSDK.platforms = ["Android", "iOS"];
    QQSDK.install = "ionic cordova plugin add cordova-plugin-qqsdk --variable QQ_APP_ID=YOUR_QQ_APPID";
    QQSDK.installVariables = ["QQ_APP_ID"];
    QQSDK.decorators = [
        { type: Injectable }
    ];
    return QQSDK;
}(IonicNativePlugin));
export { QQSDK };
//# sourceMappingURL=data:application/json;base64,