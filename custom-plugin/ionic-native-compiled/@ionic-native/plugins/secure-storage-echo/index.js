var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, checkAvailability, cordovaInstance, getPromise } from '@ionic-native/core';
var SecureStorageEchoObject = /** @class */ (function () {
    function SecureStorageEchoObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    SecureStorageEchoObject.prototype.get = function (key) { return cordovaInstance(this, "get", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.set = function (key, value) { return cordovaInstance(this, "set", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.remove = function (key) { return cordovaInstance(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.keys = function () { return cordovaInstance(this, "keys", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.clear = function () { return cordovaInstance(this, "clear", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.secureDevice = function () { return cordovaInstance(this, "secureDevice", {}, arguments); };
    return SecureStorageEchoObject;
}());
export { SecureStorageEchoObject };
var SecureStorageEchoOriginal = /** @class */ (function (_super) {
    __extends(SecureStorageEchoOriginal, _super);
    function SecureStorageEchoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecureStorageEchoOriginal.prototype.create = function (store, options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (res, rej) {
                    var instance = new (SecureStorageEchoOriginal.getPlugin())(function () { return res(new SecureStorageEchoObject(instance)); }, function () { return rej(new SecureStorageEchoObject(instance)); }, store, options);
                });
            }
        })();
    };
    SecureStorageEchoOriginal.pluginName = "SecureStorageEcho";
    SecureStorageEchoOriginal.plugin = "cordova-plugin-secure-storage-echo";
    SecureStorageEchoOriginal.pluginRef = "cordova.plugins.SecureStorage";
    SecureStorageEchoOriginal.repo = "https://github.com/mibrito707/cordova-plugin-secure-storage-echo";
    SecureStorageEchoOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return SecureStorageEchoOriginal;
}(IonicNativePlugin));
var SecureStorageEcho = new SecureStorageEchoOriginal();
export { SecureStorageEcho };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlY3VyZS1zdG9yYWdlLWVjaG8vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8seURBQWlDLFVBQVUsRUFBNkIsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2QnhHLGlDQUFvQixlQUFvQjtRQUFwQixvQkFBZSxHQUFmLGVBQWUsQ0FBSztJQUFHLENBQUM7SUFVNUMscUNBQUcsYUFBQyxHQUFXO0lBYWYscUNBQUcsYUFBQyxHQUFXLEVBQUUsS0FBYTtJQVk5Qix3Q0FBTSxhQUFDLEdBQVc7SUFXbEIsc0NBQUk7SUFXSix1Q0FBSztJQVNMLDhDQUFZO2tDQWhHZDs7OztJQTJKdUMscUNBQWlCOzs7O0lBT3RELGtDQUFNLGFBQUMsS0FBYSxFQUFFLE9BQWtDOzs7bURBQW9DO2dCQUMxRixPQUFPLFVBQVUsQ0FBMEIsVUFBQyxHQUFhLEVBQUUsR0FBYTtvQkFDdEUsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQ2xELGNBQU0sT0FBQSxHQUFHLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUExQyxDQUEwQyxFQUNoRCxjQUFNLE9BQUEsR0FBRyxDQUFDLElBQUksdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBMUMsQ0FBMEMsRUFDaEQsS0FBSyxFQUNMLE9BQU8sQ0FDUixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDO2FBQ0o7Ozs7Ozs7OzRCQTNLSDtFQTJKdUMsaUJBQWlCO1NBQTNDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmFDaGVjaywgQ29yZG92YUluc3RhbmNlLCBnZXRQcm9taXNlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZWN1cmVTdG9yYWdlRWNob09wdGlvbnMge1xuICBhbmRyb2lkOiB7XG4gICAgLyoqXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWJyaXRvNzA3L2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlLWVjaG8jc2hhcmluZy1kYXRhLWFuZHJvaWRcbiAgICAgKi9cbiAgICBwYWNrYWdlTmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkdXJhdGlvbiBvZiB0aW1lIChzZWNvbmRzKSBmb3Igd2hpY2ggdGhlIFByaXZhdGUgRW5jcnlwdGlvbiBLZXkgaXMgYXV0aG9yaXplZCB0byBiZSB1c2VkIGFmdGVyIHRoZSB1c2VyIGlzIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC9zZWN1cml0eS9rZXlzdG9yZS9LZXlHZW5QYXJhbWV0ZXJTcGVjLkJ1aWxkZXIuaHRtbCNzZXRVc2VyQXV0aGVudGljYXRpb25WYWxpZGl0eUR1cmF0aW9uU2Vjb25kcyhpbnQpXG4gICAgICovXG4gICAgdXNlckF1dGhlbnRpY2F0aW9uVmFsaWRpdHlEdXJhdGlvbj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDdXN0b20gdGl0bGUgZm9yIENvbmZpcm0gQ3JlZGVudGlhbHMgc2NyZWVuLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC9hcHAvS2V5Z3VhcmRNYW5hZ2VyLmh0bWwjY3JlYXRlQ29uZmlybURldmljZUNyZWRlbnRpYWxJbnRlbnQoamF2YS5sYW5nLkNoYXJTZXF1ZW5jZSwlMjBqYXZhLmxhbmcuQ2hhclNlcXVlbmNlKVxuICAgICAqL1xuICAgIHVubG9ja0NyZWRlbnRpYWxzVGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGRlc2NyaXB0aW9uIGZvciBDb25maXJtIENyZWRlbnRpYWxzIHNjcmVlbi5cbiAgICAgKi9cbiAgICB1bmxvY2tDcmVkZW50aWFsc0Rlc2NyaXB0aW9uPzogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfb2JqZWN0SW5zdGFuY2U6IGFueSkge31cblxuICAvKipcbiAgICogR2V0cyBhIHN0b3JlZCBpdGVtXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIGEgdmFsdWVcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gdmFsdWUge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNpbmdsZSBzdG9yZWQgaXRlbVxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUga2V5IHRoYXQgd2FzIHJlbW92ZWRcbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCByZWZlcmVuY2VzIGZyb20gdGhlIHN0b3JhZ2UuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ1tdPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFycmF5IG9mIGtleXMgc3RvcmFnZVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBrZXlzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIHJlZmVyZW5jZXMgZnJvbSB0aGUgc3RvcmFnZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgY2xlYXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQnJpbmdzIHVwIHRoZSBzY3JlZW4tbG9jayBzZXR0aW5nc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIHNlY3VyZURldmljZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIEBuYW1lIFNlY3VyZSBTdG9yYWdlIEVjaG9cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZ2V0cywgc2V0cyBhbmQgcmVtb3ZlcyBrZXksdmFsdWUgcGFpcnMgZnJvbSBhIGRldmljZSdzIHNlY3VyZSBzdG9yYWdlLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNob2AuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtDb3Jkb3ZhIFNlY3VyZSBTdG9yYWdlIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9taWJyaXRvNzA3L2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlLWVjaG8pLlxuICpcbiAqIFRoZSBicm93c2VyIHBsYXRmb3JtIGlzIHN1cHBvcnRlZCBhcyBhIG1vY2sgb25seS4gS2V5L3ZhbHVlcyBhcmUgc3RvcmVkIHVuZW5jcnlwdGVkIGluIGxvY2FsU3RvcmFnZS5cbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTZWN1cmVTdG9yYWdlRWNobywgU2VjdXJlU3RvcmFnZUVjaG9PYmplY3QgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NlY3VyZS1zdG9yYWdlLWVjaG8vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlY3VyZVN0b3JhZ2VFY2hvOiBTZWN1cmVTdG9yYWdlRWNobykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zZWN1cmVTdG9yYWdlRWNoby5jcmVhdGUoJ215X3N0b3JlX25hbWUnKVxuICogICAudGhlbigoc3RvcmFnZTogU2VjdXJlU3RvcmFnZUVjaG9PYmplY3QpID0+IHtcbiAqXG4gKiAgICAgIHN0b3JhZ2UuZ2V0KCdrZXknKVxuICogICAgICAgIC50aGVuKFxuICogICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogICAgICApO1xuICpcbiAqICAgICAgc3RvcmFnZS5zZXQoJ2tleScsICd2YWx1ZScpXG4gKiAgICAgICAgLnRoZW4oXG4gKiAgICAgICAgIGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSksXG4gKiAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAqICAgICAgKTtcbiAqXG4gKiAgICAgIHN0b3JhZ2UucmVtb3ZlKCdrZXknKVxuICogICAgICAudGhlbihcbiAqICAgICAgICAgIGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSksXG4gKiAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAqICAgICAgKTtcbiAqXG4gKiAgIH0pO1xuICpcbiAqXG4gKiBgYGBcbiAqIEBjbGFzc2VzXG4gKiBTZWN1cmVTdG9yYWdlRWNob09iamVjdFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NlY3VyZVN0b3JhZ2VFY2hvJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5TZWN1cmVTdG9yYWdlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9taWJyaXRvNzA3L2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlLWVjaG8nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlY3VyZVN0b3JhZ2VFY2hvIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5hbWVzcGFjZWQgc3RvcmFnZS5cbiAgICogQHBhcmFtIHN0b3JlIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0Pn1cbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soKVxuICBjcmVhdGUoc3RvcmU6IHN0cmluZywgb3B0aW9ucz86IFNlY3VyZVN0b3JhZ2VFY2hvT3B0aW9ucyk6IFByb21pc2U8U2VjdXJlU3RvcmFnZUVjaG9PYmplY3Q+IHtcbiAgICByZXR1cm4gZ2V0UHJvbWlzZTxTZWN1cmVTdG9yYWdlRWNob09iamVjdD4oKHJlczogRnVuY3Rpb24sIHJlajogRnVuY3Rpb24pID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IChTZWN1cmVTdG9yYWdlRWNoby5nZXRQbHVnaW4oKSkoXG4gICAgICAgICgpID0+IHJlcyhuZXcgU2VjdXJlU3RvcmFnZUVjaG9PYmplY3QoaW5zdGFuY2UpKSxcbiAgICAgICAgKCkgPT4gcmVqKG5ldyBTZWN1cmVTdG9yYWdlRWNob09iamVjdChpbnN0YW5jZSkpLFxuICAgICAgICBzdG9yZSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuIl19