import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, checkAvailability, cordovaInstance, getPromise } from '@ionic-native/core';
var SecureStorageEchoObject = /** @class */ (function () {
    function SecureStorageEchoObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    SecureStorageEchoObject.prototype.get = function (key) { return cordovaInstance(this, "get", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.set = function (key, value) { return cordovaInstance(this, "set", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.remove = function (key) { return cordovaInstance(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.keys = function () { return cordovaInstance(this, "keys", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.clear = function () { return cordovaInstance(this, "clear", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.secureDevice = function () { return cordovaInstance(this, "secureDevice", {}, arguments); };
    return SecureStorageEchoObject;
}());
export { SecureStorageEchoObject };
var SecureStorageEcho = /** @class */ (function (_super) {
    __extends(SecureStorageEcho, _super);
    function SecureStorageEcho() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecureStorageEcho.prototype.create = function (store, options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (res, rej) {
                    var instance = new (SecureStorageEcho.getPlugin())(function () { return res(new SecureStorageEchoObject(instance)); }, function () { return rej(new SecureStorageEchoObject(instance)); }, store, options);
                });
            }
        })();
    };
    SecureStorageEcho.pluginName = "SecureStorageEcho";
    SecureStorageEcho.plugin = "cordova-plugin-secure-storage-echo";
    SecureStorageEcho.pluginRef = "cordova.plugins.SecureStorage";
    SecureStorageEcho.repo = "https://github.com/mibrito707/cordova-plugin-secure-storage-echo";
    SecureStorageEcho.platforms = ["Android", "Browser", "iOS", "Windows"];
    SecureStorageEcho.decorators = [
        { type: Injectable }
    ];
    return SecureStorageEcho;
}(IonicNativePlugin));
export { SecureStorageEcho };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlY3VyZS1zdG9yYWdlLWVjaG8vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8seURBQWlDLFVBQVUsRUFBNkIsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2QnhHLGlDQUFvQixlQUFvQjtRQUFwQixvQkFBZSxHQUFmLGVBQWUsQ0FBSztJQUFHLENBQUM7SUFVNUMscUNBQUcsYUFBQyxHQUFXO0lBYWYscUNBQUcsYUFBQyxHQUFXLEVBQUUsS0FBYTtJQVk5Qix3Q0FBTSxhQUFDLEdBQVc7SUFXbEIsc0NBQUk7SUFXSix1Q0FBSztJQVNMLDhDQUFZO2tDQWhHZDs7OztJQTJKdUMscUNBQWlCOzs7O0lBT3RELGtDQUFNLGFBQUMsS0FBYSxFQUFFLE9BQWtDOzs7bURBQW9DO2dCQUMxRixPQUFPLFVBQVUsQ0FBMEIsVUFBQyxHQUFhLEVBQUUsR0FBYTtvQkFDdEUsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQ2xELGNBQU0sT0FBQSxHQUFHLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUExQyxDQUEwQyxFQUNoRCxjQUFNLE9BQUEsR0FBRyxDQUFDLElBQUksdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBMUMsQ0FBMEMsRUFDaEQsS0FBSyxFQUNMLE9BQU8sQ0FDUixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDO2FBQ0o7Ozs7Ozs7OztnQkFqQkYsVUFBVTs7NEJBMUpYO0VBMkp1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YUNoZWNrLCBDb3Jkb3ZhSW5zdGFuY2UsIGdldFByb21pc2UsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyZVN0b3JhZ2VFY2hvT3B0aW9ucyB7XG4gIGFuZHJvaWQ6IHtcbiAgICAvKipcbiAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pYnJpdG83MDcvY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobyNzaGFyaW5nLWRhdGEtYW5kcm9pZFxuICAgICAqL1xuICAgIHBhY2thZ2VOYW1lPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGR1cmF0aW9uIG9mIHRpbWUgKHNlY29uZHMpIGZvciB3aGljaCB0aGUgUHJpdmF0ZSBFbmNyeXB0aW9uIEtleSBpcyBhdXRob3JpemVkIHRvIGJlIHVzZWQgYWZ0ZXIgdGhlIHVzZXIgaXMgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQuXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL3NlY3VyaXR5L2tleXN0b3JlL0tleUdlblBhcmFtZXRlclNwZWMuQnVpbGRlci5odG1sI3NldFVzZXJBdXRoZW50aWNhdGlvblZhbGlkaXR5RHVyYXRpb25TZWNvbmRzKGludClcbiAgICAgKi9cbiAgICB1c2VyQXV0aGVudGljYXRpb25WYWxpZGl0eUR1cmF0aW9uPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSB0aXRsZSBmb3IgQ29uZmlybSBDcmVkZW50aWFscyBzY3JlZW4uXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL2FwcC9LZXlndWFyZE1hbmFnZXIuaHRtbCNjcmVhdGVDb25maXJtRGV2aWNlQ3JlZGVudGlhbEludGVudChqYXZhLmxhbmcuQ2hhclNlcXVlbmNlLCUyMGphdmEubGFuZy5DaGFyU2VxdWVuY2UpXG4gICAgICovXG4gICAgdW5sb2NrQ3JlZGVudGlhbHNUaXRsZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDdXN0b20gZGVzY3JpcHRpb24gZm9yIENvbmZpcm0gQ3JlZGVudGlhbHMgc2NyZWVuLlxuICAgICAqL1xuICAgIHVubG9ja0NyZWRlbnRpYWxzRGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgU2VjdXJlU3RvcmFnZUVjaG9PYmplY3Qge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vYmplY3RJbnN0YW5jZTogYW55KSB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgc3RvcmVkIGl0ZW1cbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYSB2YWx1ZVxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9XG4gICAqIEBwYXJhbSB2YWx1ZSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc2luZ2xlIHN0b3JlZCBpdGVtXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBrZXkgdGhhdCB3YXMgcmVtb3ZlZFxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICByZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlZmVyZW5jZXMgZnJvbSB0aGUgc3RvcmFnZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nW10+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYXJyYXkgb2Yga2V5cyBzdG9yYWdlXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGtleXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgcmVmZXJlbmNlcyBmcm9tIHRoZSBzdG9yYWdlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBjbGVhcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCcmluZ3MgdXAgdGhlIHNjcmVlbi1sb2NrIHNldHRpbmdzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKClcbiAgc2VjdXJlRGV2aWNlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8qKlxuICogQG5hbWUgU2VjdXJlIFN0b3JhZ2UgRWNob1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBnZXRzLCBzZXRzIGFuZCByZW1vdmVzIGtleSx2YWx1ZSBwYWlycyBmcm9tIGEgZGV2aWNlJ3Mgc2VjdXJlIHN0b3JhZ2UuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1zZWN1cmUtc3RvcmFnZS1lY2hvYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NvcmRvdmEgU2VjdXJlIFN0b3JhZ2UgZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21pYnJpdG83MDcvY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobykuXG4gKlxuICogVGhlIGJyb3dzZXIgcGxhdGZvcm0gaXMgc3VwcG9ydGVkIGFzIGEgbW9jayBvbmx5LiBLZXkvdmFsdWVzIGFyZSBzdG9yZWQgdW5lbmNyeXB0ZWQgaW4gbG9jYWxTdG9yYWdlLlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNlY3VyZVN0b3JhZ2VFY2hvLCBTZWN1cmVTdG9yYWdlRWNob09iamVjdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2VjdXJlLXN0b3JhZ2UtZWNoby9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VjdXJlU3RvcmFnZUVjaG86IFNlY3VyZVN0b3JhZ2VFY2hvKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNlY3VyZVN0b3JhZ2VFY2hvLmNyZWF0ZSgnbXlfc3RvcmVfbmFtZScpXG4gKiAgIC50aGVuKChzdG9yYWdlOiBTZWN1cmVTdG9yYWdlRWNob09iamVjdCkgPT4ge1xuICpcbiAqICAgICAgc3RvcmFnZS5nZXQoJ2tleScpXG4gKiAgICAgICAgLnRoZW4oXG4gKiAgICAgICAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiAgICAgICk7XG4gKlxuICogICAgICBzdG9yYWdlLnNldCgna2V5JywgJ3ZhbHVlJylcbiAqICAgICAgICAudGhlbihcbiAqICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogICAgICApO1xuICpcbiAqICAgICAgc3RvcmFnZS5yZW1vdmUoJ2tleScpXG4gKiAgICAgIC50aGVuKFxuICogICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogICAgICApO1xuICpcbiAqICAgfSk7XG4gKlxuICpcbiAqIGBgYFxuICogQGNsYXNzZXNcbiAqIFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0XG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2VjdXJlU3RvcmFnZUVjaG8nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zZWN1cmUtc3RvcmFnZS1lY2hvJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLlNlY3VyZVN0b3JhZ2UnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21pYnJpdG83MDcvY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VjdXJlU3RvcmFnZUVjaG8gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmFtZXNwYWNlZCBzdG9yYWdlLlxuICAgKiBAcGFyYW0gc3RvcmUge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8U2VjdXJlU3RvcmFnZUVjaG9PYmplY3Q+fVxuICAgKi9cbiAgQENvcmRvdmFDaGVjaygpXG4gIGNyZWF0ZShzdG9yZTogc3RyaW5nLCBvcHRpb25zPzogU2VjdXJlU3RvcmFnZUVjaG9PcHRpb25zKTogUHJvbWlzZTxTZWN1cmVTdG9yYWdlRWNob09iamVjdD4ge1xuICAgIHJldHVybiBnZXRQcm9taXNlPFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0PigocmVzOiBGdW5jdGlvbiwgcmVqOiBGdW5jdGlvbikgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgKFNlY3VyZVN0b3JhZ2VFY2hvLmdldFBsdWdpbigpKShcbiAgICAgICAgKCkgPT4gcmVzKG5ldyBTZWN1cmVTdG9yYWdlRWNob09iamVjdChpbnN0YW5jZSkpLFxuICAgICAgICAoKSA9PiByZWoobmV3IFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0KGluc3RhbmNlKSksXG4gICAgICAgIHN0b3JlLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG4iXX0=