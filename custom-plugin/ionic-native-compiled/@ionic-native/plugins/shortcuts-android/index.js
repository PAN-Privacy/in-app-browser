var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ShortcutsOriginal = /** @class */ (function (_super) {
    __extends(ShortcutsOriginal, _super);
    function ShortcutsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShortcutsOriginal.prototype.supportsDynamic = function () { return cordova(this, "supportsDynamic", {}, arguments); };
    ShortcutsOriginal.prototype.supportsPinned = function () { return cordova(this, "supportsPinned", {}, arguments); };
    ShortcutsOriginal.prototype.setDynamic = function (shortcuts) { return cordova(this, "setDynamic", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ShortcutsOriginal.prototype.addPinned = function (shortcut) { return cordova(this, "addPinned", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    ShortcutsOriginal.prototype.getIntent = function () { return cordova(this, "getIntent", {}, arguments); };
    ShortcutsOriginal.prototype.onNewIntent = function () { return cordova(this, "onNewIntent", { "observable": true }, arguments); };
    ShortcutsOriginal.pluginName = "Shortcuts";
    ShortcutsOriginal.plugin = "cordova-plugin-shortcuts-android";
    ShortcutsOriginal.pluginRef = "plugins.Shortcuts";
    ShortcutsOriginal.repo = "https://github.com/avargaskun/cordova-plugin-shortcuts-android";
    ShortcutsOriginal.platforms = ["Android"];
    return ShortcutsOriginal;
}(IonicNativePlugin));
var Shortcuts = new ShortcutsOriginal();
export { Shortcuts };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Nob3J0Y3V0cy1hbmRyb2lkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBaUVILDZCQUFpQjs7OztJQVE5QyxtQ0FBZTtJQVdmLGtDQUFjO0lBZWQsOEJBQVUsYUFBQyxTQUFxQjtJQWVoQyw2QkFBUyxhQUFDLFFBQWtCO0lBVzVCLDZCQUFTO0lBYVQsK0JBQVc7Ozs7OztvQkE1SWI7RUFtRStCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZW50IHtcbiAgLy8gRGVmYXVsdHMgdG8gY3VycmVudGx5IHJ1bm5pbmcgYWN0aXZpdHlcbiAgYWN0aXZpdHlDbGFzcz86IHN0cmluZztcblxuICAvLyBEZWZhdWx0cyB0byBjdXJyZW50bHkgcnVubmluZyBwYWNrYWdlXG4gIGFjdGl2aXR5UGFja2FnZT86IHN0cmluZztcblxuICAvLyBEZWZhdWx0cyB0byBBQ1RJT05fVklFV1xuICBhY3Rpb24/OiBzdHJpbmc7XG5cbiAgLy8gRGVmYXVsdHMgdG8gRkxBR19BQ1RJVklUWV9ORVdfVEFTSyArIEZMQUdfQUNUSVZJVFlfQ0xFQVJfVE9QXG4gIGZsYWdzPzogbnVtYmVyO1xuXG4gIGNhdGVnb3JpZXM/OiBzdHJpbmdbXTtcblxuICBkYXRhPzogc3RyaW5nO1xuXG4gIGV4dHJhcz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hvcnRjdXQge1xuICBpZDogc3RyaW5nO1xuICBzaG9ydExhYmVsPzogc3RyaW5nO1xuICBsb25nTGFiZWw/OiBzdHJpbmc7XG4gIGljb25Gcm9tUmVzb3VyY2U/OiBzdHJpbmc7XG4gIGljb25CaXRtYXA/OiBzdHJpbmc7XG4gIGludGVudD86IEludGVudDtcbn1cblxuLyoqXG4gKiBAbmFtZSBTaG9ydGN1dHNBbmRyb2lkXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIHBsdWdpbiB0byBjcmVhdGUgc2hvcnRjdXRzIGluIEFuZHJvaWQuIFVzZSB0aGlzIHBsdWdpbiB0byBoYW5kbGUgSW50ZW50cyBvbiB5b3VyIGFwcGxpY2F0aW9uLlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQW5kcm9pZCBBcHAgU2hvcnRjdXRzOiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvdWkvc2hvcnRjdXRzLmh0bWxcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIEFuZHJvaWQgSW50ZW50czogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvY29tcG9uZW50cy9pbnRlbnRzLWZpbHRlcnMuaHRtbFxuICpcbiAqIFRoZSB3b3JrIHRoYXQgd2VudCBpbnRvIGNyZWF0aW5nIHRoaXMgcGx1Zy1pbiB3YXMgaW5zcGlyZWQgYnkgdGhlIGV4aXN0aW5nIHBsdWdpbnM6IGNvcmRvdmEtcGx1Z2luLXNob3J0Y3V0IGFuZCBjb3Jkb3ZhLXBsdWdpbi13ZWJpbnRlbnQyLlxuICpcbiAqIEB1c2FnZVxuICogUGxlYXNlIGRvIHJlZmVyIHRvIHRoZSBvcmlnaW5hbCBwbHVnaW4ncyByZXBvIGZvciBkZXRhaWxlZCB1c2FnZS4gVGhlIHVzYWdlIGV4YW1wbGUgaGVyZSBtaWdodCBub3QgYmUgc3VmZmljaWVudC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTaG9ydGN1dHNBbmRyb2lkIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zaG9ydGN1dHMtYW5kcm9pZC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNob3J0Y3V0c0FuZHJvaWQ6IFNob3J0Y3V0c0FuZHJvaWQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuc2hvcnRjdXRzQW5kcm9pZC5zdXBwb3J0c0R5bmFtaWMoKVxuICogICAudGhlbigoc3VwcG9ydGVkOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhgRHluYW1pYyBzaG9ydGN1dHMgYXJlICR7c3VwcG9ydGVkID8gJycgOiAnbm90J30gc3VwcG9ydGVkYCkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1Nob3J0Y3V0cycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNob3J0Y3V0cy1hbmRyb2lkJyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5TaG9ydGN1dHMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2F2YXJnYXNrdW4vY29yZG92YS1wbHVnaW4tc2hvcnRjdXRzLWFuZHJvaWQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTaG9ydGN1dHMgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVja2luZyBpZiBEeW5hbWljIFNob3J0Y3V0cyBhcmUgc3VwcG9ydGVkXG4gICAqXG4gICAqIER5bmFtaWMgc2hvcnRjdXRzIHJlcXVpcmUgU0RLIDI1IG9yIGxhdGVyLiBVc2Ugc3VwcG9ydHNEeW5hbWljIHRvIGNoZWNrIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIG1lZXRzIHRob3NlIHJlcXVpcmVtZW50cy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiBkeW5hbWljIHNob3J0Y3V0cyBhcmUgc3VwcG9ydGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN1cHBvcnRzRHluYW1pYygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tpbmcgaWYgUGlubmVkIFNob3J0Y3V0cyBhcmUgc3VwcG9ydGVkXG4gICAqXG4gICAqIFBpbm5lZCBzaG9ydGN1dHMgcmVxdWlyZSBTREsgMjYgb3IgbGF0ZXIuIFVzZSBzdXBwb3J0c1Bpbm5lZCB0byBjaGVjayB3aGV0aGVyIHRoZSBjdXJyZW50IGRldmljZSBtZWV0cyB0aG9zZSByZXF1aXJlbWVudHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59ICByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHBpbm5lZCBzaG9ydGN1dHMgYXJlIHN1cHBvcnRlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdXBwb3J0c1Bpbm5lZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0dGluZyB0aGUgYXBwbGljYXRpb24gRHluYW1pYyBTaG9ydGN1dHNcbiAgICpcbiAgICogVXNlIGBzZXREeW5hbWljYCB0byBzZXQgdGhlIER5bmFtaWMgU2hvcnRjdXRzIGZvciB0aGUgYXBwbGljYXRpb24sIGFsbCBhdCBvbmNlLiBUaGUgc2hvcnRjdXRzIHByb3ZpZGVkIGFzIGEgcGFyYW1ldGVyIHdpbGwgb3ZlcnJpZGUgYW55IGV4aXN0aW5nIHNob3J0Y3V0LiBVc2UgYW4gZW1wdHkgYXJyYXkgdG8gY2xlYXIgb3V0IGV4aXN0aW5nIHNob3J0Y3V0cy5cbiAgICogQHBhcmFtIHtTaG9ydGN1dFtdfSBbc2hvcnRjdXRdIEFycmF5IG9mIHNob3J0Y3V0cyB0byBhZGQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHNldER5bmFtaWMoc2hvcnRjdXRzOiBTaG9ydGN1dFtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZGluZyBhIFBpbm5lZCBTaG9ydGN1dCB0byB0aGUgbGF1bmNoZXJcbiAgICpcbiAgICogVXNlIGBhZGRQaW5uZWRgIHRvIGFkZCBhIG5ldyBQaW5uZWQgU2hvcnRjdXQgdG8gdGhlIGxhdW5jaGVyLlxuICAgKiBAcGFyYW0ge1Nob3J0Y3V0W119IFtzaG9ydGN1dF0gQXJyYXkgb2Ygc2hvcnRjdXRzIHRvIGFkZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgYWRkUGlubmVkKHNob3J0Y3V0OiBTaG9ydGN1dCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyeWluZyBjdXJyZW50IEludGVudFxuICAgKlxuICAgKiBVc2UgYGdldEludGVudGAgdG8gZ2V0IHRoZSBJbnRlbnQgdGhhdCB3YXMgdXNlZCB0byBsYXVuY2ggdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIENvcmRvdmEgYWN0aXZpdHkuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SW50ZW50Pn0gcmV0dXJucyB0aGUgSW50ZW50IHRoYXQgd2FzIHVzZWQgdG8gbGF1bmNoIHRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBDb3Jkb3ZhIGFjdGl2aXR5XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEludGVudCgpOiBQcm9taXNlPEludGVudD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gbmV3IEludGVudHNcbiAgICpcbiAgICogVXNlIG9uTmV3SW50ZW50IHRvIHRyaWdnZXIgeW91ciBjb2RlIGV2ZXJ5IHRpbWUgYSBuZXcgSW50ZW50IGlzIHNlbnQgdG8geW91ciBDb3Jkb3ZhIGFjdGl2aXR5LiBOb3RlIHRoYXQgaW4gc29tZSBjb25kaXRpb25zIHRoaXMgc3Vic2NyaXB0aW9uIG1heSBub3QgYmUgZXhlY3V0ZWQuXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8SW50ZW50Pn0gZW1pdHMgdGhlIG5ldyBJbnRlbnQgZWFjaCB0aW1lIGEgc2hvcnRjdXQgaXMgYWN0aXZhdGVkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgb25OZXdJbnRlbnQoKTogT2JzZXJ2YWJsZTxJbnRlbnQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==