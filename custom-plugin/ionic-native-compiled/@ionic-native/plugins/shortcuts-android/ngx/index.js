import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Shortcuts = /** @class */ (function (_super) {
    __extends(Shortcuts, _super);
    function Shortcuts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Shortcuts.prototype.supportsDynamic = function () { return cordova(this, "supportsDynamic", {}, arguments); };
    Shortcuts.prototype.supportsPinned = function () { return cordova(this, "supportsPinned", {}, arguments); };
    Shortcuts.prototype.setDynamic = function (shortcuts) { return cordova(this, "setDynamic", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Shortcuts.prototype.addPinned = function (shortcut) { return cordova(this, "addPinned", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Shortcuts.prototype.getIntent = function () { return cordova(this, "getIntent", {}, arguments); };
    Shortcuts.prototype.onNewIntent = function () { return cordova(this, "onNewIntent", { "observable": true }, arguments); };
    Shortcuts.pluginName = "Shortcuts";
    Shortcuts.plugin = "cordova-plugin-shortcuts-android";
    Shortcuts.pluginRef = "plugins.Shortcuts";
    Shortcuts.repo = "https://github.com/avargaskun/cordova-plugin-shortcuts-android";
    Shortcuts.platforms = ["Android"];
    Shortcuts.decorators = [
        { type: Injectable }
    ];
    return Shortcuts;
}(IonicNativePlugin));
export { Shortcuts };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Nob3J0Y3V0cy1hbmRyb2lkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBaUVILDZCQUFpQjs7OztJQVE5QyxtQ0FBZTtJQVdmLGtDQUFjO0lBZWQsOEJBQVUsYUFBQyxTQUFxQjtJQWVoQyw2QkFBUyxhQUFDLFFBQWtCO0lBVzVCLDZCQUFTO0lBYVQsK0JBQVc7Ozs7Ozs7Z0JBMUVaLFVBQVU7O29CQWxFWDtFQW1FK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBJbnRlbnQge1xuICAvLyBEZWZhdWx0cyB0byBjdXJyZW50bHkgcnVubmluZyBhY3Rpdml0eVxuICBhY3Rpdml0eUNsYXNzPzogc3RyaW5nO1xuXG4gIC8vIERlZmF1bHRzIHRvIGN1cnJlbnRseSBydW5uaW5nIHBhY2thZ2VcbiAgYWN0aXZpdHlQYWNrYWdlPzogc3RyaW5nO1xuXG4gIC8vIERlZmF1bHRzIHRvIEFDVElPTl9WSUVXXG4gIGFjdGlvbj86IHN0cmluZztcblxuICAvLyBEZWZhdWx0cyB0byBGTEFHX0FDVElWSVRZX05FV19UQVNLICsgRkxBR19BQ1RJVklUWV9DTEVBUl9UT1BcbiAgZmxhZ3M/OiBudW1iZXI7XG5cbiAgY2F0ZWdvcmllcz86IHN0cmluZ1tdO1xuXG4gIGRhdGE/OiBzdHJpbmc7XG5cbiAgZXh0cmFzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dCB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3J0TGFiZWw/OiBzdHJpbmc7XG4gIGxvbmdMYWJlbD86IHN0cmluZztcbiAgaWNvbkZyb21SZXNvdXJjZT86IHN0cmluZztcbiAgaWNvbkJpdG1hcD86IHN0cmluZztcbiAgaW50ZW50PzogSW50ZW50O1xufVxuXG4vKipcbiAqIEBuYW1lIFNob3J0Y3V0c0FuZHJvaWRcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgcGx1Z2luIHRvIGNyZWF0ZSBzaG9ydGN1dHMgaW4gQW5kcm9pZC4gVXNlIHRoaXMgcGx1Z2luIHRvIGhhbmRsZSBJbnRlbnRzIG9uIHlvdXIgYXBwbGljYXRpb24uXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBBbmRyb2lkIEFwcCBTaG9ydGN1dHM6IGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3RvcGljcy91aS9zaG9ydGN1dHMuaHRtbFxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQW5kcm9pZCBJbnRlbnRzOiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS9jb21wb25lbnRzL2ludGVudHMtZmlsdGVycy5odG1sXG4gKlxuICogVGhlIHdvcmsgdGhhdCB3ZW50IGludG8gY3JlYXRpbmcgdGhpcyBwbHVnLWluIHdhcyBpbnNwaXJlZCBieSB0aGUgZXhpc3RpbmcgcGx1Z2luczogY29yZG92YS1wbHVnaW4tc2hvcnRjdXQgYW5kIGNvcmRvdmEtcGx1Z2luLXdlYmludGVudDIuXG4gKlxuICogQHVzYWdlXG4gKiBQbGVhc2UgZG8gcmVmZXIgdG8gdGhlIG9yaWdpbmFsIHBsdWdpbidzIHJlcG8gZm9yIGRldGFpbGVkIHVzYWdlLiBUaGUgdXNhZ2UgZXhhbXBsZSBoZXJlIG1pZ2h0IG5vdCBiZSBzdWZmaWNpZW50LlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNob3J0Y3V0c0FuZHJvaWQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3Nob3J0Y3V0cy1hbmRyb2lkL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2hvcnRjdXRzQW5kcm9pZDogU2hvcnRjdXRzQW5kcm9pZCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zaG9ydGN1dHNBbmRyb2lkLnN1cHBvcnRzRHluYW1pYygpXG4gKiAgIC50aGVuKChzdXBwb3J0ZWQ6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKGBEeW5hbWljIHNob3J0Y3V0cyBhcmUgJHtzdXBwb3J0ZWQgPyAnJyA6ICdub3QnfSBzdXBwb3J0ZWRgKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2hvcnRjdXRzJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2hvcnRjdXRzLWFuZHJvaWQnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLlNob3J0Y3V0cycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXZhcmdhc2t1bi9jb3Jkb3ZhLXBsdWdpbi1zaG9ydGN1dHMtYW5kcm9pZCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNob3J0Y3V0cyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENoZWNraW5nIGlmIER5bmFtaWMgU2hvcnRjdXRzIGFyZSBzdXBwb3J0ZWRcbiAgICpcbiAgICogRHluYW1pYyBzaG9ydGN1dHMgcmVxdWlyZSBTREsgMjUgb3IgbGF0ZXIuIFVzZSBzdXBwb3J0c0R5bmFtaWMgdG8gY2hlY2sgd2hldGhlciB0aGUgY3VycmVudCBkZXZpY2UgbWVldHMgdGhvc2UgcmVxdWlyZW1lbnRzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIGR5bmFtaWMgc2hvcnRjdXRzIGFyZSBzdXBwb3J0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3VwcG9ydHNEeW5hbWljKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja2luZyBpZiBQaW5uZWQgU2hvcnRjdXRzIGFyZSBzdXBwb3J0ZWRcbiAgICpcbiAgICogUGlubmVkIHNob3J0Y3V0cyByZXF1aXJlIFNESyAyNiBvciBsYXRlci4gVXNlIHN1cHBvcnRzUGlubmVkIHRvIGNoZWNrIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIG1lZXRzIHRob3NlIHJlcXVpcmVtZW50cy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgcGlubmVkIHNob3J0Y3V0cyBhcmUgc3VwcG9ydGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN1cHBvcnRzUGlubmVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0aW5nIHRoZSBhcHBsaWNhdGlvbiBEeW5hbWljIFNob3J0Y3V0c1xuICAgKlxuICAgKiBVc2UgYHNldER5bmFtaWNgIHRvIHNldCB0aGUgRHluYW1pYyBTaG9ydGN1dHMgZm9yIHRoZSBhcHBsaWNhdGlvbiwgYWxsIGF0IG9uY2UuIFRoZSBzaG9ydGN1dHMgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIgd2lsbCBvdmVycmlkZSBhbnkgZXhpc3Rpbmcgc2hvcnRjdXQuIFVzZSBhbiBlbXB0eSBhcnJheSB0byBjbGVhciBvdXQgZXhpc3Rpbmcgc2hvcnRjdXRzLlxuICAgKiBAcGFyYW0ge1Nob3J0Y3V0W119IFtzaG9ydGN1dF0gQXJyYXkgb2Ygc2hvcnRjdXRzIHRvIGFkZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgc2V0RHluYW1pYyhzaG9ydGN1dHM6IFNob3J0Y3V0W10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkaW5nIGEgUGlubmVkIFNob3J0Y3V0IHRvIHRoZSBsYXVuY2hlclxuICAgKlxuICAgKiBVc2UgYGFkZFBpbm5lZGAgdG8gYWRkIGEgbmV3IFBpbm5lZCBTaG9ydGN1dCB0byB0aGUgbGF1bmNoZXIuXG4gICAqIEBwYXJhbSB7U2hvcnRjdXRbXX0gW3Nob3J0Y3V0XSBBcnJheSBvZiBzaG9ydGN1dHMgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICB9KVxuICBhZGRQaW5uZWQoc2hvcnRjdXQ6IFNob3J0Y3V0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJ5aW5nIGN1cnJlbnQgSW50ZW50XG4gICAqXG4gICAqIFVzZSBgZ2V0SW50ZW50YCB0byBnZXQgdGhlIEludGVudCB0aGF0IHdhcyB1c2VkIHRvIGxhdW5jaCB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ29yZG92YSBhY3Rpdml0eS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxJbnRlbnQ+fSByZXR1cm5zIHRoZSBJbnRlbnQgdGhhdCB3YXMgdXNlZCB0byBsYXVuY2ggdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIENvcmRvdmEgYWN0aXZpdHlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0SW50ZW50KCk6IFByb21pc2U8SW50ZW50PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBuZXcgSW50ZW50c1xuICAgKlxuICAgKiBVc2Ugb25OZXdJbnRlbnQgdG8gdHJpZ2dlciB5b3VyIGNvZGUgZXZlcnkgdGltZSBhIG5ldyBJbnRlbnQgaXMgc2VudCB0byB5b3VyIENvcmRvdmEgYWN0aXZpdHkuIE5vdGUgdGhhdCBpbiBzb21lIGNvbmRpdGlvbnMgdGhpcyBzdWJzY3JpcHRpb24gbWF5IG5vdCBiZSBleGVjdXRlZC5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxJbnRlbnQ+fSBlbWl0cyB0aGUgbmV3IEludGVudCBlYWNoIHRpbWUgYSBzaG9ydGN1dCBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBvbk5ld0ludGVudCgpOiBPYnNlcnZhYmxlPEludGVudD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19