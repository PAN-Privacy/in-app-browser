var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SiriShortcutsOriginal = /** @class */ (function (_super) {
    __extends(SiriShortcutsOriginal, _super);
    function SiriShortcutsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SiriShortcutsOriginal.prototype.donate = function (options) { return cordova(this, "donate", {}, arguments); };
    SiriShortcutsOriginal.prototype.present = function (options) { return cordova(this, "present", {}, arguments); };
    SiriShortcutsOriginal.prototype.remove = function (persistentIdentifiers) { return cordova(this, "remove", {}, arguments); };
    SiriShortcutsOriginal.prototype.removeAll = function () { return cordova(this, "removeAll", {}, arguments); };
    SiriShortcutsOriginal.prototype.getActivatedShortcut = function (options) { return cordova(this, "getActivatedShortcut", {}, arguments); };
    SiriShortcutsOriginal.pluginName = "SiriShortcuts";
    SiriShortcutsOriginal.plugin = "cordova-plugin-siri-shortcuts";
    SiriShortcutsOriginal.pluginRef = "cordova.plugins.SiriShortcuts";
    SiriShortcutsOriginal.repo = "https://github.com/bartwesselink/cordova-plugin-siri-shortcuts";
    SiriShortcutsOriginal.platforms = ["iOS"];
    return SiriShortcutsOriginal;
}(IonicNativePlugin));
var SiriShortcuts = new SiriShortcutsOriginal();
export { SiriShortcuts };
//# sourceMappingURL=data:application/json;base64,