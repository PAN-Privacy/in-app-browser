var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SmartlookSetupConfigBuilder = /** @class */ (function () {
    function SmartlookSetupConfigBuilder(smartlookAPIKey) {
        this._smartlookSetupConfig = new SmartlookSetupConfig(smartlookAPIKey);
    }
    SmartlookSetupConfigBuilder.prototype.fps = function (fps) {
        this._smartlookSetupConfig.fps = fps;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.renderingMode = function (renderingMode) {
        this._smartlookSetupConfig.renderingMode = renderingMode.getRenderingModeString();
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSession = function (startNewSession) {
        this._smartlookSetupConfig.startNewSession = startNewSession;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSessionAndUser = function (startNewSessionAndUser) {
        this._smartlookSetupConfig.startNewSessionAndUser = startNewSessionAndUser;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.eventTrackingModes = function (eventTrackingModes) {
        this._smartlookSetupConfig.eventTrackingModes = eventTrackingModes.getEventTrackingModeStringArray();
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.build = function () {
        return this._smartlookSetupConfig;
    };
    return SmartlookSetupConfigBuilder;
}());
export { SmartlookSetupConfigBuilder };
var SmartlookSetupConfig = /** @class */ (function () {
    function SmartlookSetupConfig(smartlookAPIKey) {
        this.smartlookAPIKey = smartlookAPIKey;
    }
    return SmartlookSetupConfig;
}());
export { SmartlookSetupConfig };
var SmartlookResetSession = /** @class */ (function () {
    function SmartlookResetSession(resetUser) {
        this.resetUser = resetUser;
    }
    return SmartlookResetSession;
}());
export { SmartlookResetSession };
var SmartlookUserIdentifier = /** @class */ (function () {
    function SmartlookUserIdentifier(identifier, sessionProperties) {
        this.identifier = identifier;
        this.sessionProperties = sessionProperties;
    }
    return SmartlookUserIdentifier;
}());
export { SmartlookUserIdentifier };
var SmartlookEventTrackingMode = /** @class */ (function () {
    function SmartlookEventTrackingMode(eventTrackingMode) {
        this.eventTrackingMode = eventTrackingMode;
    }
    SmartlookEventTrackingMode.FULL_TRACKING = function () {
        return new SmartlookEventTrackingMode('full_tracking');
    };
    SmartlookEventTrackingMode.IGNORE_USER_INTERACTION = function () {
        return new SmartlookEventTrackingMode('ignore_user_interaction');
    };
    SmartlookEventTrackingMode.IGNORE_NAVIGATION_INTERACTION = function () {
        return new SmartlookEventTrackingMode('ignore_navigation_interaction');
    };
    SmartlookEventTrackingMode.IGNORE_RAGE_CLICKS = function () {
        return new SmartlookEventTrackingMode('ignore_rage_clicks');
    };
    SmartlookEventTrackingMode.NO_TRACKING = function () {
        return new SmartlookEventTrackingMode('no_tracking');
    };
    SmartlookEventTrackingMode.prototype.getEventTrackingModeString = function () {
        return this.eventTrackingMode;
    };
    return SmartlookEventTrackingMode;
}());
export { SmartlookEventTrackingMode };
var SmartlookEventTrackingModes = /** @class */ (function () {
    function SmartlookEventTrackingModes(eventTrackingModes) {
        this.eventTrackingModes = eventTrackingModes.map(function (eventTrackingMode) {
            return eventTrackingMode.getEventTrackingModeString();
        });
    }
    SmartlookEventTrackingModes.prototype.getEventTrackingModeStringArray = function () {
        return this.eventTrackingModes;
    };
    return SmartlookEventTrackingModes;
}());
export { SmartlookEventTrackingModes };
var SmartlookViewState = /** @class */ (function () {
    function SmartlookViewState() {
    }
    SmartlookViewState.START = 'start';
    SmartlookViewState.STOP = 'stop';
    return SmartlookViewState;
}());
export { SmartlookViewState };
var SmartlookNavigationEvent = /** @class */ (function () {
    function SmartlookNavigationEvent(name, viewState) {
        this.name = name;
        this.viewState = this.viewState;
    }
    return SmartlookNavigationEvent;
}());
export { SmartlookNavigationEvent };
var SmartlookCustomEvent = /** @class */ (function () {
    function SmartlookCustomEvent(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookCustomEvent;
}());
export { SmartlookCustomEvent };
var SmartlookTimedCustomEventStart = /** @class */ (function () {
    function SmartlookTimedCustomEventStart(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStart;
}());
export { SmartlookTimedCustomEventStart };
var SmartlookTimedCustomEventStop = /** @class */ (function () {
    function SmartlookTimedCustomEventStop(eventId, eventProperties) {
        this.eventId = eventId;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStop;
}());
export { SmartlookTimedCustomEventStop };
var SmartlookTimedCustomEventCancel = /** @class */ (function () {
    function SmartlookTimedCustomEventCancel(eventId, reason, eventProperties) {
        this.eventId = eventId;
        this.reason = reason;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventCancel;
}());
export { SmartlookTimedCustomEventCancel };
var SmartlookGlobalEventProperties = /** @class */ (function () {
    function SmartlookGlobalEventProperties(globalEventProperties, immutable) {
        this.globalEventProperties = globalEventProperties;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperties;
}());
export { SmartlookGlobalEventProperties };
var SmartlookGlobalEventProperty = /** @class */ (function () {
    function SmartlookGlobalEventProperty(key, value, immutable) {
        this.key = key;
        this.value = value;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperty;
}());
export { SmartlookGlobalEventProperty };
var SmartlookGlobalEventPropertyKey = /** @class */ (function () {
    function SmartlookGlobalEventPropertyKey(key) {
        this.key = key;
    }
    return SmartlookGlobalEventPropertyKey;
}());
export { SmartlookGlobalEventPropertyKey };
var SmartlookReferrer = /** @class */ (function () {
    function SmartlookReferrer(referrer, source) {
        this.referrer = referrer;
        this.source = source;
    }
    return SmartlookReferrer;
}());
export { SmartlookReferrer };
var SmartlookDashboardSessionUrl = /** @class */ (function () {
    function SmartlookDashboardSessionUrl(withCurrentTimestamp) {
        this.withCurrentTimestamp = withCurrentTimestamp;
    }
    return SmartlookDashboardSessionUrl;
}());
export { SmartlookDashboardSessionUrl };
var SmartlookRenderingMode = /** @class */ (function () {
    function SmartlookRenderingMode(renderingMode) {
        this.renderingMode = renderingMode;
    }
    SmartlookRenderingMode.NO_RENDERING = function () {
        return new SmartlookRenderingMode('no_rendering');
    };
    SmartlookRenderingMode.NATIVE = function () {
        return new SmartlookRenderingMode('native');
    };
    SmartlookRenderingMode.prototype.getRenderingModeString = function () {
        return this.renderingMode;
    };
    return SmartlookRenderingMode;
}());
export { SmartlookRenderingMode };
var SmartlookOriginal = /** @class */ (function (_super) {
    __extends(SmartlookOriginal, _super);
    function SmartlookOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SmartlookOriginal.prototype.setupAndStartRecording = function (config) { return cordova(this, "setupAndStartRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setup = function (config) { return cordova(this, "setup", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startRecording = function () { return cordova(this, "startRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.stopRecording = function () { return cordova(this, "stopRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.isRecording = function () { return cordova(this, "isRecording", {}, arguments); };
    SmartlookOriginal.prototype.resetSession = function (resetSession) { return cordova(this, "resetSession", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startFullscreenSensitiveMode = function () { return cordova(this, "startFullscreenSensitiveMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.stopFullscreenSensitiveMode = function () { return cordova(this, "stopFullscreenSensitiveMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.isFullscreenSensitiveModeActive = function () { return cordova(this, "isFullscreenSensitiveModeActive", {}, arguments); };
    SmartlookOriginal.prototype.setUserIdentifier = function (identifier) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setEventTrackingMode = function (eventTrackingMode) { return cordova(this, "setEventTrackingMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setEventTrackingModes = function (eventTrackingModes) { return cordova(this, "setEventTrackingModes", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackNavigationEvent = function (navigationEvent) { return cordova(this, "trackNavigationEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startTimedCustomEvent = function (timedEvent) { return cordova(this, "startTimedCustomEvent", {}, arguments); };
    SmartlookOriginal.prototype.stopTimedCustomEvent = function (timedEvent) { return cordova(this, "stopTimedCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.cancelTimedCustomEvent = function (timedEvent) { return cordova(this, "cancelTimedCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackCustomEvent = function (event) { return cordova(this, "trackCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setGlobalEventProperties = function (properties) { return cordova(this, "setGlobalEventProperties", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setGlobalEventProperty = function (property) { return cordova(this, "setGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeGlobalEventProperty = function (property) { return cordova(this, "removeGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeAllGlobalEventProperties = function () { return cordova(this, "removeAllGlobalEventProperties", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setReferrer = function (referrer) { return cordova(this, "setReferrer", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getDashboardSessionUrl = function (smartlookDashboardSessionUrl) { return cordova(this, "getDashboardSessionUrl", {}, arguments); };
    SmartlookOriginal.prototype.getDashboardVisitorUrl = function () { return cordova(this, "getDashboardVisitorUrl", {}, arguments); };
    SmartlookOriginal.prototype.registerIntegrationListener = function (integrationListener) { return cordova(this, "registerIntegrationListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setRenderingMode = function (renderingMode) { return cordova(this, "setRenderingMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.unregisterIntegrationListener = function () { return cordova(this, "unregisterIntegrationListener", { "sync": true }, arguments); };
    SmartlookOriginal.pluginName = "Smartlook";
    SmartlookOriginal.plugin = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.pluginRef = "cordova.plugins.SmartlookPlugin";
    SmartlookOriginal.repo = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.platforms = ["Android", "iOS"];
    return SmartlookOriginal;
}(IonicNativePlugin));
var Smartlook = new SmartlookOriginal();
export { Smartlook };
//# sourceMappingURL=data:application/json;base64,