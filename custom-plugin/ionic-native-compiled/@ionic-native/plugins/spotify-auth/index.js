var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SpotifyAuthOriginal = /** @class */ (function (_super) {
    __extends(SpotifyAuthOriginal, _super);
    function SpotifyAuthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuthOriginal.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuthOriginal.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuthOriginal.pluginName = "SpotifyAuth";
    SpotifyAuthOriginal.plugin = "cordova-spotify-oauth";
    SpotifyAuthOriginal.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuthOriginal.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuthOriginal.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuthOriginal.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuthOriginal.platforms = ["Android", "iOS"];
    return SpotifyAuthOriginal;
}(IonicNativePlugin));
var SpotifyAuth = new SpotifyAuthOriginal();
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Nwb3RpZnktYXV0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrR3ZDLCtCQUFpQjs7OztJQXVCaEQsK0JBQVMsYUFBQyxHQUFXO0lBZXJCLDRCQUFNOzs7Ozs7OztzQkF6SVI7RUFtR2lDLGlCQUFpQjtTQUFyQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogT0F1dGggY29uZmlndXJhdGlvbiBkYXRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gIC8qKiBUaGUgY2xpZW50IElEIGFzIHBlciB0aGUgU3BvdGlmeSBkZXYgY29uc29sZS4gKi9cbiAgY2xpZW50SWQ6IHN0cmluZztcblxuICAvKiogVGhlIHJlZGlyZWN0IFVSSSBhcyBlbnRlcmVkIGluIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xuICByZWRpcmVjdFVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTYWZldHkgbWFyZ2luIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgZm9yIHRoZSB0b2tlbiByZWZyZXNoLlxuICAgKlxuICAgKiBUaGUgcGx1Z2luIGFwcGxpZXMgYSBzYWZldHkgbWFyZ2luIHRvIHRoZSB0b2tlbiBsaWZldGltZSBpbiBvcmRlclxuICAgKiB0byBnaXZlIHRoZSB0b2tlbiB1c2VyIGVub3VnaCB0aW1lIHRvIHBlcmZvcm0gYWxsIG9wZXJhdGlvbnMgbmVlZGVkLlxuICAgKlxuICAgKiBPdGhlcndpc2UgdGhlIHBsdWdpbiBtaWdodCBoYW5kIG91dCBhIHRva2VuIHRoYXQgaXMgYWxyZWFkeSBleHBpcmVkXG4gICAqIGJlZm9yZSBpdCBjb3VsZCBldmVyIGJlIHVzZWQuXG4gICAqXG4gICAqIFRoZSBzYWZldHkgbWFyZ2luIGRlZmF1bHRzIHRvIDMwcy5cbiAgICovXG4gIHJlZnJlc2hTYWZldHlNYXJnaW4/OiBudW1iZXI7XG5cbiAgLyoqIFJlcXVlc3RlZCBPQXV0aCBzY29wZXMuICovXG4gIHNjb3Blczogc3RyaW5nW107XG5cbiAgLyoqIFRoZSB0b2tlbiBleGNoYW5nZSBVUkwuICovXG4gIHRva2VuRXhjaGFuZ2VVcmw6IHN0cmluZztcblxuICAvKiogVGhlIHRva2VuIHJlZnJlc2ggVVJMLiAqL1xuICB0b2tlblJlZnJlc2hVcmw6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgYXV0aG9yaXphdGlvbiBkYXRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhvcml6YXRpb25EYXRhIHtcbiAgLyoqIEEgdmFsaWQgYWNjZXNzIHRva2VuLiAqL1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZW5jcnlwdGVkIHJlZnJlc2ggdG9rZW4uICovXG4gIGVuY3J5cHRlZFJlZnJlc2hUb2tlbjogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZGF0ZSAoZnJvbSBVVEMsIGluIG1pbGxpc2Vjb25kcykgd2hlbiB0aGUgZ2l2ZW4gYWNjZXNzIHRva2VuIGV4cGlyZXMuICovXG4gIGV4cGlyZXNBdDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIFNwb3RpZnkgQXV0aFxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgYXV0aGVudGljYXRpbmcgd2l0aCBTcG90aWZ5XG4gKiA+IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aFxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3BvdGlmeUF1dGggfSBmcm9tICdAaW9uaWMtbmF0aXZlL3Nwb3RpZnktYXV0aC9uZ3gnO1xuICpcbiAqIC8vIFsuLi5dXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzcG90aWZ5QXV0aDogU3BvdGlmeUF1dGgpIHsgfVxuICpcbiAqIC8vIFsuLi5dXG4gKlxuICogY29uc3QgY29uZmlnID0ge1xuICogICBjbGllbnRJZDogXCI8U1BPVElGWSBDTElFTlQgSUQ+XCIsXG4gKiAgIHJlZGlyZWN0VXJsOiBcIjxSRURJUkVDVCBVUkwsIE1VU1QgTUFUQ0ggV0lUSCBBVVRIIEVORFBPSU5UIEFORCBTUE9USUZZIERFViBDT05TT0xFPlwiLFxuICogICBzY29wZXM6IFtcInN0cmVhbWluZ1wiXSwgLy8gc2VlIFNwb3RpZnkgRGV2IGNvbnNvbGUgZm9yIGFsbCBzY29wZXNcbiAqICAgdG9rZW5FeGNoYW5nZVVybDogXCI8VVJMIE9GIFRPS0VOIEVYQ0hBTkdFIEhUVFAgRU5EUE9JTlQ+XCIsXG4gKiAgIHRva2VuUmVmcmVzaFVybDogXCI8VVJMIE9GIFRPS0VOIFJFRlJFU0ggSFRUUCBFTkRQT0lOVD5cIixcbiAqIH07XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zcG90aWZ5QXV0aC5hdXRob3JpemUoY29uZmlnKVxuICogICAudGhlbigoeyBhY2Nlc3NUb2tlbiwgZXhwaXJlc0F0IH0pID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhgR290IGFuIGFjY2VzcyB0b2tlbiwgaXRzICR7YWNjZXNzVG9rZW59IWApO1xuICogICAgIGNvbnNvbGUubG9nKGBJdHMgZ29pbmcgdG8gZXhwaXJlIGluICR7ZXhwaXJlc0F0IC0gRGF0ZS5ub3coKX1tcy5gKTtcbiAqICAgfSk7XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmZvcmdldCgpO1xuICpcbiAqIC8vIFsuLi5dXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTcG90aWZ5QXV0aCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtc3BvdGlmeS1vYXV0aCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zcG90aWZ5QXV0aCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtc3BvdGlmeS1vYXV0aCAtLXZhcmlhYmxlIExPQ0FMX1NUT1JBR0VfS0VZPVwiU3BvdGlmeU9BdXRoRGF0YVwiJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydMT0NBTF9TVE9SQUdFX0tFWSddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BvdGlmeUF1dGggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBPYnRhaW5zIHZhbGlkIGF1dGhvcml6YXRpb24gZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcGVyZm9ybXMgdGhlIG5lY2Vzc2FyeSBzdGVwcyBpbiBvcmRlciB0byBvYnRhaW4gYSB2YWxpZFxuICAgKiBhY2Nlc3MgdG9rZW4uIEl0IHBlcmZvcm1zIHRoZSBPQXV0aCBkYW5jZSBwcm9tcHRpbmcgdGhlIHVzZXIgdG8gbG9nIGluLFxuICAgKiBleGNoYW5nZXMgdGhlIG9idGFpbmVkIGF1dGhvcml6YXRpb24gY29kZSBmb3IgYW4gYWNjZXNzIGFuZCBhIHJlZnJlc2hcbiAgICogdG9rZW4sIGNhY2hlcyB0aG9zZSwgYW5kIHJldHVybnMgYm90aCB0byB0aGUgZGV2ZWxvcGVyLlxuICAgKlxuICAgKiBXaGVuIGl0IGlzIGludm9rZWQgYWdhaW4sIGl0IHdpbGwgZmlyc3QgY2hlY2sgd2hldGhlciB0aGUgY2FjaGVkIGFjY2Vzc1xuICAgKiB0b2tlbiBpcyBzdGlsbCB2YWxpZCAoaW5jbHVkaW5nIGEgY29uZmlndXJhYmxlIHNhZmV0eSBtYXJnaW4pIGFuZCB0aGVcbiAgICogc2NvcGVzIGVxdWFsLCBhbmQgcmV0dXJuIHRoZSB0b2tlbiBkaXJlY3RseSBpZiB0aGF0IGlzIHRoZSBjYXNlLiBPdGhlcndpc2UsXG4gICAqIHRoZSBtZXRob2Qgd2lsbCB0cmFuc3BhcmVudGx5IHJlZnJlc2ggdGhlIHRva2VuIChvciBvYnRhaW4gYSBuZXcgb25lIGlmXG4gICAqIHRoZSBzY29wZXMgY2hhbmdlZCkgYW5kIHJldHVybiB0aGF0LlxuICAgKlxuICAgKiBCb3R0b20gbGluZSAtIGFsd2F5cyBjYWxsIHRoaXMgaWYgeW91IG5lZWQgYSB2YWxpZCBhY2Nlc3MgdG9rZW4gaW4geW91ciBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0gY2ZnIHtDb25maWd9IGNvbmZpZ3VyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogZmFsc2UsXG4gIH0pXG4gIGF1dGhvcml6ZShjZmc6IENvbmZpZyk6IFByb21pc2U8QXV0aG9yaXphdGlvbkRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2FjaGVkIGRhdGEgc28gdGhhdCBgYXV0aG9yaXplYCBwZXJmb3JtcyB0aGUgZnVsbFxuICAgKiBvYXV0aCBkYW5jZSBhZ2Fpbi5cbiAgICpcbiAgICogVGhpcyBpcyBha2luIHRvIGEgXCJsb2dvdXRcIi5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBmb3JnZXQoKTogdm9pZCB7fVxufVxuIl19