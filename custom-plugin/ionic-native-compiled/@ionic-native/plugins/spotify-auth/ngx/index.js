import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SpotifyAuth = /** @class */ (function (_super) {
    __extends(SpotifyAuth, _super);
    function SpotifyAuth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuth.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuth.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuth.pluginName = "SpotifyAuth";
    SpotifyAuth.plugin = "cordova-spotify-oauth";
    SpotifyAuth.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuth.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuth.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuth.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuth.platforms = ["Android", "iOS"];
    SpotifyAuth.decorators = [
        { type: Injectable }
    ];
    return SpotifyAuth;
}(IonicNativePlugin));
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Nwb3RpZnktYXV0aC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrR3ZDLCtCQUFpQjs7OztJQXVCaEQsK0JBQVMsYUFBQyxHQUFXO0lBZXJCLDRCQUFNOzs7Ozs7Ozs7Z0JBdkNQLFVBQVU7O3NCQWxHWDtFQW1HaUMsaUJBQWlCO1NBQXJDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBPQXV0aCBjb25maWd1cmF0aW9uIGRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgLyoqIFRoZSBjbGllbnQgSUQgYXMgcGVyIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xuICBjbGllbnRJZDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgcmVkaXJlY3QgVVJJIGFzIGVudGVyZWQgaW4gdGhlIFNwb3RpZnkgZGV2IGNvbnNvbGUuICovXG4gIHJlZGlyZWN0VXJsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNhZmV0eSBtYXJnaW4gdGltZSAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgdGhlIHRva2VuIHJlZnJlc2guXG4gICAqXG4gICAqIFRoZSBwbHVnaW4gYXBwbGllcyBhIHNhZmV0eSBtYXJnaW4gdG8gdGhlIHRva2VuIGxpZmV0aW1lIGluIG9yZGVyXG4gICAqIHRvIGdpdmUgdGhlIHRva2VuIHVzZXIgZW5vdWdoIHRpbWUgdG8gcGVyZm9ybSBhbGwgb3BlcmF0aW9ucyBuZWVkZWQuXG4gICAqXG4gICAqIE90aGVyd2lzZSB0aGUgcGx1Z2luIG1pZ2h0IGhhbmQgb3V0IGEgdG9rZW4gdGhhdCBpcyBhbHJlYWR5IGV4cGlyZWRcbiAgICogYmVmb3JlIGl0IGNvdWxkIGV2ZXIgYmUgdXNlZC5cbiAgICpcbiAgICogVGhlIHNhZmV0eSBtYXJnaW4gZGVmYXVsdHMgdG8gMzBzLlxuICAgKi9cbiAgcmVmcmVzaFNhZmV0eU1hcmdpbj86IG51bWJlcjtcblxuICAvKiogUmVxdWVzdGVkIE9BdXRoIHNjb3Blcy4gKi9cbiAgc2NvcGVzOiBzdHJpbmdbXTtcblxuICAvKiogVGhlIHRva2VuIGV4Y2hhbmdlIFVSTC4gKi9cbiAgdG9rZW5FeGNoYW5nZVVybDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgdG9rZW4gcmVmcmVzaCBVUkwuICovXG4gIHRva2VuUmVmcmVzaFVybDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBhdXRob3JpemF0aW9uIGRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yaXphdGlvbkRhdGEge1xuICAvKiogQSB2YWxpZCBhY2Nlc3MgdG9rZW4uICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBlbmNyeXB0ZWQgcmVmcmVzaCB0b2tlbi4gKi9cbiAgZW5jcnlwdGVkUmVmcmVzaFRva2VuOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBkYXRlIChmcm9tIFVUQywgaW4gbWlsbGlzZWNvbmRzKSB3aGVuIHRoZSBnaXZlbiBhY2Nlc3MgdG9rZW4gZXhwaXJlcy4gKi9cbiAgZXhwaXJlc0F0OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgU3BvdGlmeSBBdXRoXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIGZvciBhdXRoZW50aWNhdGluZyB3aXRoIFNwb3RpZnlcbiAqID4gaHR0cHM6Ly9naXRodWIuY29tL0Zlc3RpZnkvY29yZG92YS1zcG90aWZ5LW9hdXRoXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTcG90aWZ5QXV0aCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3BvdGlmeS1hdXRoL25neCc7XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNwb3RpZnlBdXRoOiBTcG90aWZ5QXV0aCkgeyB9XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiBjb25zdCBjb25maWcgPSB7XG4gKiAgIGNsaWVudElkOiBcIjxTUE9USUZZIENMSUVOVCBJRD5cIixcbiAqICAgcmVkaXJlY3RVcmw6IFwiPFJFRElSRUNUIFVSTCwgTVVTVCBNQVRDSCBXSVRIIEFVVEggRU5EUE9JTlQgQU5EIFNQT1RJRlkgREVWIENPTlNPTEU+XCIsXG4gKiAgIHNjb3BlczogW1wic3RyZWFtaW5nXCJdLCAvLyBzZWUgU3BvdGlmeSBEZXYgY29uc29sZSBmb3IgYWxsIHNjb3Blc1xuICogICB0b2tlbkV4Y2hhbmdlVXJsOiBcIjxVUkwgT0YgVE9LRU4gRVhDSEFOR0UgSFRUUCBFTkRQT0lOVD5cIixcbiAqICAgdG9rZW5SZWZyZXNoVXJsOiBcIjxVUkwgT0YgVE9LRU4gUkVGUkVTSCBIVFRQIEVORFBPSU5UPlwiLFxuICogfTtcbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmF1dGhvcml6ZShjb25maWcpXG4gKiAgIC50aGVuKCh7IGFjY2Vzc1Rva2VuLCBleHBpcmVzQXQgfSkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGBHb3QgYW4gYWNjZXNzIHRva2VuLCBpdHMgJHthY2Nlc3NUb2tlbn0hYCk7XG4gKiAgICAgY29uc29sZS5sb2coYEl0cyBnb2luZyB0byBleHBpcmUgaW4gJHtleHBpcmVzQXQgLSBEYXRlLm5vdygpfW1zLmApO1xuICogICB9KTtcbiAqXG4gKiAvLyBbLi4uXVxuICpcbiAqIHRoaXMuc3BvdGlmeUF1dGguZm9yZ2V0KCk7XG4gKlxuICogLy8gWy4uLl1cbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1Nwb3RpZnlBdXRoJyxcbiAgcGx1Z2luOiAnY29yZG92YS1zcG90aWZ5LW9hdXRoJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNwb3RpZnlBdXRoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aCcsXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1zcG90aWZ5LW9hdXRoIC0tdmFyaWFibGUgTE9DQUxfU1RPUkFHRV9LRVk9XCJTcG90aWZ5T0F1dGhEYXRhXCInLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0xPQ0FMX1NUT1JBR0VfS0VZJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTcG90aWZ5QXV0aCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIE9idGFpbnMgdmFsaWQgYXV0aG9yaXphdGlvbiBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyB0aGUgbmVjZXNzYXJ5IHN0ZXBzIGluIG9yZGVyIHRvIG9idGFpbiBhIHZhbGlkXG4gICAqIGFjY2VzcyB0b2tlbi4gSXQgcGVyZm9ybXMgdGhlIE9BdXRoIGRhbmNlIHByb21wdGluZyB0aGUgdXNlciB0byBsb2cgaW4sXG4gICAqIGV4Y2hhbmdlcyB0aGUgb2J0YWluZWQgYXV0aG9yaXphdGlvbiBjb2RlIGZvciBhbiBhY2Nlc3MgYW5kIGEgcmVmcmVzaFxuICAgKiB0b2tlbiwgY2FjaGVzIHRob3NlLCBhbmQgcmV0dXJucyBib3RoIHRvIHRoZSBkZXZlbG9wZXIuXG4gICAqXG4gICAqIFdoZW4gaXQgaXMgaW52b2tlZCBhZ2FpbiwgaXQgd2lsbCBmaXJzdCBjaGVjayB3aGV0aGVyIHRoZSBjYWNoZWQgYWNjZXNzXG4gICAqIHRva2VuIGlzIHN0aWxsIHZhbGlkIChpbmNsdWRpbmcgYSBjb25maWd1cmFibGUgc2FmZXR5IG1hcmdpbikgYW5kIHRoZVxuICAgKiBzY29wZXMgZXF1YWwsIGFuZCByZXR1cm4gdGhlIHRva2VuIGRpcmVjdGx5IGlmIHRoYXQgaXMgdGhlIGNhc2UuIE90aGVyd2lzZSxcbiAgICogdGhlIG1ldGhvZCB3aWxsIHRyYW5zcGFyZW50bHkgcmVmcmVzaCB0aGUgdG9rZW4gKG9yIG9idGFpbiBhIG5ldyBvbmUgaWZcbiAgICogdGhlIHNjb3BlcyBjaGFuZ2VkKSBhbmQgcmV0dXJuIHRoYXQuXG4gICAqXG4gICAqIEJvdHRvbSBsaW5lIC0gYWx3YXlzIGNhbGwgdGhpcyBpZiB5b3UgbmVlZCBhIHZhbGlkIGFjY2VzcyB0b2tlbiBpbiB5b3VyIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSBjZmcge0NvbmZpZ30gY29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEF1dGhvcml6YXRpb25EYXRhPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiBmYWxzZSxcbiAgfSlcbiAgYXV0aG9yaXplKGNmZzogQ29uZmlnKTogUHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjYWNoZWQgZGF0YSBzbyB0aGF0IGBhdXRob3JpemVgIHBlcmZvcm1zIHRoZSBmdWxsXG4gICAqIG9hdXRoIGRhbmNlIGFnYWluLlxuICAgKlxuICAgKiBUaGlzIGlzIGFraW4gdG8gYSBcImxvZ291dFwiLlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGZvcmdldCgpOiB2b2lkIHt9XG59XG4iXX0=