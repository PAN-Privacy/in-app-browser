import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SSHConnect = /** @class */ (function (_super) {
    __extends(SSHConnect, _super);
    function SSHConnect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SSHConnect.prototype.connect = function (user, password, host, port) { return cordova(this, "connect", {}, arguments); };
    SSHConnect.prototype.executeCommand = function (command) { return cordova(this, "executeCommand", {}, arguments); };
    SSHConnect.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    SSHConnect.pluginName = "SSHConnect";
    SSHConnect.plugin = "cordova-plugin-ssh-connect";
    SSHConnect.pluginRef = "cordova.plugins.sshConnect";
    SSHConnect.repo = "https://github.com/JosePerez27/cordova-plugin-ssh-connect";
    SSHConnect.platforms = ["Android"];
    SSHConnect.decorators = [
        { type: Injectable }
    ];
    return SSHConnect;
}(IonicNativePlugin));
export { SSHConnect };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NzaC1jb25uZWN0L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXVDeEMsOEJBQWlCOzs7O0lBVS9DLDRCQUFPLGFBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsSUFBWSxFQUFFLElBQVk7SUFVbEUsbUNBQWMsYUFBQyxPQUFlO0lBUzlCLCtCQUFVOzs7Ozs7O2dCQTlCWCxVQUFVOztxQkF2Q1g7RUF3Q2dDLGlCQUFpQjtTQUFwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgU1NIIENvbm5lY3RcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gdG8gbWFrZSBjb25uZWN0aW9ucyBhbmQgZXhlY3V0ZSBjb21tYW5kcyB0aHJvdWdoIFNTSFxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU1NIQ29ubmVjdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3NoLWNvbm5lY3Qvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzc2hDb25uZWN0OiBTU0hDb25uZWN0KSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5zc2hDb25uZWN0LmNvbm5lY3QoJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsIHBvcnQpXG4gKiAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXG4gKiAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5zc2hDb25uZWN0LmV4ZWN1dGVDb21tYW5kKCdjb21tYW5kJylcbiAqICAgLnRoZW4ocmVzcCA9PiBjb25zb2xlLmxvZyhyZXNwKSlcbiAqICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLnNzaENvbm5lY3QuZGlzY29ubmVjdCgpXG4gKiAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXG4gKiAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU1NIQ29ubmVjdCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNzaC1jb25uZWN0JyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNzaENvbm5lY3QnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0pvc2VQZXJlejI3L2NvcmRvdmEtcGx1Z2luLXNzaC1jb25uZWN0JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU1NIQ29ubmVjdCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEVzdGFibGlzaCBhIHJlbW90ZSBzc2ggY29ubmVjdGlvblxuICAgKiBAcGFyYW0ge3VzZXJ9IHVzZXIgIFRoZSByZW1vdGUgaG9zdCB1c2VyXG4gICAqIEBwYXJhbSB7cGFzc3dvcmR9IHBhc3N3b3JkICBUaGUgcmVtb3RlIGhvc3QgcGFzc3dvcmRcbiAgICogQHBhcmFtIHtob3N0fSBob3N0ICBUaGUgcmVtb3RlIGRldmljZSB0byBjb25uZWN0XG4gICAqIEBwYXJhbSB7cG9ydH0gcG9ydCAgVGhlIFNTSCBwb3J0IGZvciBjb25uZWN0aW9uICh1c3VhbGx5IHBvcnQgMjIpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhbiBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc3VjY2VzcyBvZiB0aGUgY29ubmVjdGlvblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KHVzZXI6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgaG9zdDogc3RyaW5nLCBwb3J0OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgY29tbWFuZCBvbiB0aGUgcmVtb3RlIGhvc3QgY29ubmVjdGVkIGJ5IHNzaFxuICAgKiBAcGFyYW0ge2NvbW1hbmR9IGNvbW1hbmQgIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGFuIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBwcmludGVkIHRleHQgb24gdGhlIHJlbW90ZSBjb25zb2xlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgdGhlIFNTSCBzZXNzaW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhbiBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc3VjY2VzcyBvZiB0aGUgZGlzY29ubmVjdGlvblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=