var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var TealiumOriginal = /** @class */ (function (_super) {
    __extends(TealiumOriginal, _super);
    function TealiumOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TealiumOriginal.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    TealiumOriginal.prototype.trackView = function (dataObject, instanceName) { return cordova(this, "trackView", {}, arguments); };
    TealiumOriginal.prototype.trackEvent = function (dataObject, instanceName) { return cordova(this, "trackEvent", {}, arguments); };
    TealiumOriginal.prototype.track = function (eventType, dataObject, instanceName) { return cordova(this, "track", {}, arguments); };
    TealiumOriginal.prototype.addPersistent = function (keyName, value, instanceName) { return cordova(this, "addPersistent", {}, arguments); };
    TealiumOriginal.prototype.addVolatile = function (keyName, value, instanceName) { return cordova(this, "addVolatile", {}, arguments); };
    TealiumOriginal.prototype.removeVolatile = function (keyName, instanceName) { return cordova(this, "removeVolatile", {}, arguments); };
    TealiumOriginal.prototype.removePersistent = function (keyName, instanceName) { return cordova(this, "removePersistent", {}, arguments); };
    TealiumOriginal.prototype.getPersistent = function (keyName, instanceName, callback) { return cordova(this, "getPersistent", {}, arguments); };
    TealiumOriginal.prototype.getVolatile = function (keyName, instanceName, callback) { return cordova(this, "getVolatile", {}, arguments); };
    TealiumOriginal.prototype.addRemoteCommand = function (commandName, instanceName, callback) { return cordova(this, "addRemoteCommand", {}, arguments); };
    TealiumOriginal.prototype.getVisitorId = function () { return cordova(this, "getVisitorId", {}, arguments); };
    TealiumOriginal.pluginName = "Tealium";
    TealiumOriginal.plugin = "tealium-cordova-plugin";
    TealiumOriginal.pluginRef = "window.tealium";
    TealiumOriginal.repo = "https://github.com/Tealium/cordova-plugin";
    TealiumOriginal.platforms = ["Android", "iOS"];
    TealiumOriginal.install = "";
    return TealiumOriginal;
}(IonicNativePlugin));
var Tealium = new TealiumOriginal();
export { Tealium };
//# sourceMappingURL=data:application/json;base64,