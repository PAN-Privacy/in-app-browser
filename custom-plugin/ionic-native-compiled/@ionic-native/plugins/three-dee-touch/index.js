var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ThreeDeeTouchOriginal = /** @class */ (function (_super) {
    __extends(ThreeDeeTouchOriginal, _super);
    function ThreeDeeTouchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouchOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.pluginName = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.platforms = ["iOS"];
    return ThreeDeeTouchOriginal;
}(IonicNativePlugin));
var ThreeDeeTouch = new ThreeDeeTouchOriginal();
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RocmVlLWRlZS10b3VjaC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1REFBK0QsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStIQyxpQ0FBaUI7Ozs7SUFNbEQsbUNBQVc7SUFXWCx5Q0FBaUI7SUFlakIsNkNBQXFCLGFBQUMsWUFBd0M7SUFPOUQseUNBQWlCO0lBV2pCLHlDQUFpQjtJQVFqQiwwQ0FBa0I7Ozs7Ozt3QkEzTHBCO0VBaUltQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb24ge1xuICAvKipcbiAgICogVHlwZSB0aGF0IGNhbiBiZSB1c2VkIGluIHRoZSBvbkhvbWVJY29uUHJlc3NlZCBjYWxsYmFja1xuICAgKi9cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGl0bGVcbiAgICovXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFN1YnRpdGxlXG4gICAqL1xuICBzdWJ0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogSWNvbiB0eXBlLiBDYXNlIGluc2Vuc2l0aXZlXG4gICAqL1xuICBpY29uVHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogSWNvbiB0ZW1wbGF0ZVxuICAgKi9cbiAgaWNvblRlbXBsYXRlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoIHtcbiAgLyoqXG4gICAqIFRvdWNoIGZvcmNlXG4gICAqL1xuICBmb3JjZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaW1lc3RhbXAgb2YgYWN0aW9uXG4gICAqL1xuICB0aW1lc3RhbXA6IG51bWJlcjtcblxuICAvKipcbiAgICogWCBjb29yZGluYXRlIG9mIGFjdGlvblxuICAgKi9cbiAgeDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBZIGNvb3JkaW5hdGUgb2YgYWN0aW9uXG4gICAqL1xuICB5OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgM0QgVG91Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIDNEIFRvdWNoIHBsdWdpbiBhZGRzIDNEIFRvdWNoIGNhcGFiaWxpdGllcyB0byB5b3VyIENvcmRvdmEgYXBwLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tM2R0b3VjaGAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFszRCBUb3VjaCBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLTNkdG91Y2gpLlxuICpcbiAqIEB1c2FnZVxuICogUGxlYXNlIGRvIHJlZmVyIHRvIHRoZSBvcmlnaW5hbCBwbHVnaW4ncyByZXBvIGZvciBkZXRhaWxlZCB1c2FnZS4gVGhlIHVzYWdlIGV4YW1wbGUgaGVyZSBtaWdodCBub3QgYmUgc3VmZmljaWVudC5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRocmVlRGVlVG91Y2gsIFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbiwgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL3RocmVlLWRlZS10b3VjaC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhyZWVEZWVUb3VjaDogVGhyZWVEZWVUb3VjaCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLmlzQXZhaWxhYmxlKCkudGhlbihpc0F2YWlsYWJsZSA9PiBjb25zb2xlLmxvZygnM0QgVG91Y2ggYXZhaWxhYmxlPyAnICsgaXNBdmFpbGFibGUpKTtcbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2gud2F0Y2hGb3JjZVRvdWNoZXMoKVxuICogICAuc3Vic2NyaWJlKFxuICogICAgIChkYXRhOiBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaCkgPT4ge1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoICUnICsgZGF0YS5mb3JjZSk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggdGltZXN0YW1wOiAnICsgZGF0YS50aW1lc3RhbXApO1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoIHg6ICcgKyBkYXRhLngpO1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoIHk6ICcgKyBkYXRhLnkpO1xuICogICAgIH1cbiAqICAgKTtcbiAqXG4gKlxuICogbGV0IGFjdGlvbnM6IFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbltdID0gW1xuICogICB7XG4gKiAgICAgdHlwZTogJ2NoZWNraW4nLFxuICogICAgIHRpdGxlOiAnQ2hlY2sgaW4nLFxuICogICAgIHN1YnRpdGxlOiAnUXVpY2tseSBjaGVjayBpbicsXG4gKiAgICAgaWNvblR5cGU6ICdDb21wb3NlJ1xuICogICB9LFxuICogICB7XG4gKiAgICAgdHlwZTogJ3NoYXJlJyxcbiAqICAgICB0aXRsZTogJ1NoYXJlJyxcbiAqICAgICBzdWJ0aXRsZTogJ1NoYXJlIGxpa2UgeW91IGNhcmUnLFxuICogICAgIGljb25UeXBlOiAnU2hhcmUnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnc2VhcmNoJyxcbiAqICAgICB0aXRsZTogJ1NlYXJjaCcsXG4gKiAgICAgaWNvblR5cGU6ICdTZWFyY2gnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0aXRsZTogJ1Nob3cgZmF2b3JpdGVzJyxcbiAqICAgICBpY29uVGVtcGxhdGU6ICdIZWFydFRlbXBsYXRlJ1xuICogICB9XG4gKiBdO1xuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC5jb25maWd1cmVRdWlja0FjdGlvbnMoYWN0aW9ucyk7XG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLm9uSG9tZUljb25QcmVzc2VkKCkuc3Vic2NyaWJlKFxuICogIChwYXlsb2FkKSA9PiB7XG4gKiAgICAvLyByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRoZSBidXR0b24geW91IHByZXNlZFxuICogICAgY29uc29sZS5sb2coJ1ByZXNzZWQgdGhlICR7cGF5bG9hZC50aXRsZX0gYnV0dG9uJylcbiAqICAgIGNvbnNvbGUubG9nKHBheWxvYWQudHlwZSlcbiAqXG4gKiAgfVxuICogKVxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uXG4gKiBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1RocmVlRGVlVG91Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoJyxcbiAgcGx1Z2luUmVmOiAnVGhyZWVEZWVUb3VjaCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tM2R0b3VjaCcsXG4gIHBsYXRmb3JtczogWydpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhyZWVEZWVUb3VjaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFlvdSBuZWVkIGFuIGlQaG9uZSA2UyBvciBzb21lIGZ1dHVyZSB0ZWNoIHRvIHVzZSB0aGUgZmVhdHVyZXMgb2YgdGhpcyBwbHVnaW4sIHNvIHlvdSBjYW4gY2hlY2sgYXQgcnVudGltZSBpZiB0aGUgdXNlcidzIGRldmljZSBpcyBzdXBwb3J0ZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBhdmFpbGFibGUgb3Igbm90XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGdldCBhIG5vdGlmaWNhdGlvbiB3aGVuIHRoZSB1c2VyIGZvcmNlIHRvdWNoZXMgdGhlIHdlYnZpZXcuIFRoZSBwbHVnaW4gZGVmaW5lcyBhIEZvcmNlIFRvdWNoIHdoZW4gYXQgbGVhc3QgNzUlIG9mIHRoZSBtYXhpbXVtIGZvcmNlIGlzIGFwcGxpZWQgdG8gdGhlIHNjcmVlbi4gWW91ciBhcHAgd2lsbCByZWNlaXZlIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzLCBzbyB5b3UgaGF2ZSB0byBmaWd1cmUgb3V0IHdoaWNoIFVJIGVsZW1lbnQgd2FzIHRvdWNoZWQuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgc2VuZHMgYSBgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2hgIG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHdhdGNoRm9yY2VUb3VjaGVzKCk6IE9ic2VydmFibGU8VGhyZWVEZWVUb3VjaEZvcmNlVG91Y2g+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc2V0dXAgdGhlIDNELXRvdWNoIGFjdGlvbnMsIHRha2VzIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIChvcHRpb25hbCkgQSB0eXBlIHRoYXQgY2FuIGJlIHVzZWQgYG9uSG9tZUljb25QcmVzc2VkYCBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgVGl0bGUgZm9yIHlvdXIgYWN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJ0aXRsZSAob3B0aW9uYWwpIEEgc2hvcnQgZGVzY3JpcHRpb24gZm9yIHlvdXIgYWN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uVHlwZSAob3B0aW9uYWwpIENob29zZSBiZXR3ZWVuIFByb2hpYml0LCBDb250YWN0LCBIb21lLCBNYXJrTG9jYXRpb24sIEZhdm9yaXRlLCBMb3ZlLCBDbG91ZCwgSW52aXRhdGlvbiwgQ29uZmlybWF0aW9uLCBNYWlsLCBNZXNzYWdlLCBEYXRlLCBUaW1lLCBDYXB0dXJlUGhvdG8sIENhcHR1cmVWaWRlbywgVGFzaywgVGFza0NvbXBsZXRlZCwgQWxhcm0sIEJvb2ttYXJrLCBTaHVmZmxlLCBBdWRpbywgVXBkYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uVGVtcGxhdGUgKG9wdGlvbmFsKSBDYW4gYmUgdXNlZCB0byBwcm92aWRlIHlvdXIgb3duIGljb25cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBjb25maWd1cmVRdWlja0FjdGlvbnMocXVpY2tBY3Rpb25zOiBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb25bXSk6IHZvaWQge31cblxuICAvKipcbiAgICogV2hlbiBhIGhvbWUgaWNvbiBpcyBwcmVzc2VkLCB5b3VyIGFwcCBsYXVuY2hlcyBhbmQgdGhpcyBKUyBjYWxsYmFjayBpcyBpbnZva2VkLlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiBoZSB1c2VyIHByZXNzZXMgb24gdGhlIGhvbWUgc2NyZWVuIGljb25cbiAgICovXG4gIEBDb3Jkb3ZhRnVuY3Rpb25PdmVycmlkZSgpXG4gIG9uSG9tZUljb25QcmVzc2VkKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBMaW5rIFByZXZpZXcuXG4gICAqIFVJV2ViVmlldyBhbmQgV0tXZWJWaWV3ICh0aGUgd2Vidmlld3MgcG93ZXJpbmcgQ29yZG92YSBhcHBzKSBkb24ndCBhbGxvdyB0aGUgZmFuY3kgbmV3IGxpbmsgcHJldmlldyBmZWF0dXJlIG9mIGlPUzkuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgZW5hYmxlTGlua1ByZXZpZXcoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlZCB0aGUgbGluayBwcmV2aWV3IGZlYXR1cmUsIGlmIGVuYWJsZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgZGlzYWJsZUxpbmtQcmV2aWV3KCk6IHZvaWQge31cbn1cbiJdfQ==