import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ThreeDeeTouch = /** @class */ (function (_super) {
    __extends(ThreeDeeTouch, _super);
    function ThreeDeeTouch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouch.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouch.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouch.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouch.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouch.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouch.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouch.pluginName = "ThreeDeeTouch";
    ThreeDeeTouch.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouch.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouch.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouch.platforms = ["iOS"];
    ThreeDeeTouch.decorators = [
        { type: Injectable }
    ];
    return ThreeDeeTouch;
}(IonicNativePlugin));
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RocmVlLWRlZS10b3VjaC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1REFBK0QsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStIQyxpQ0FBaUI7Ozs7SUFNbEQsbUNBQVc7SUFXWCx5Q0FBaUI7SUFlakIsNkNBQXFCLGFBQUMsWUFBd0M7SUFPOUQseUNBQWlCO0lBV2pCLHlDQUFpQjtJQVFqQiwwQ0FBa0I7Ozs7Ozs7Z0JBM0RuQixVQUFVOzt3QkFoSVg7RUFpSW1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbiB7XG4gIC8qKlxuICAgKiBUeXBlIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIG9uSG9tZUljb25QcmVzc2VkIGNhbGxiYWNrXG4gICAqL1xuICB0eXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaXRsZVxuICAgKi9cbiAgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogU3VidGl0bGVcbiAgICovXG4gIHN1YnRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJY29uIHR5cGUuIENhc2UgaW5zZW5zaXRpdmVcbiAgICovXG4gIGljb25UeXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJY29uIHRlbXBsYXRlXG4gICAqL1xuICBpY29uVGVtcGxhdGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2gge1xuICAvKipcbiAgICogVG91Y2ggZm9yY2VcbiAgICovXG4gIGZvcmNlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRpbWVzdGFtcCBvZiBhY3Rpb25cbiAgICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBYIGNvb3JkaW5hdGUgb2YgYWN0aW9uXG4gICAqL1xuICB4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFkgY29vcmRpbmF0ZSBvZiBhY3Rpb25cbiAgICovXG4gIHk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSAzRCBUb3VjaFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgM0QgVG91Y2ggcGx1Z2luIGFkZHMgM0QgVG91Y2ggY2FwYWJpbGl0aWVzIHRvIHlvdXIgQ29yZG92YSBhcHAuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgWzNEIFRvdWNoIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tM2R0b3VjaCkuXG4gKlxuICogQHVzYWdlXG4gKiBQbGVhc2UgZG8gcmVmZXIgdG8gdGhlIG9yaWdpbmFsIHBsdWdpbidzIHJlcG8gZm9yIGRldGFpbGVkIHVzYWdlLiBUaGUgdXNhZ2UgZXhhbXBsZSBoZXJlIG1pZ2h0IG5vdCBiZSBzdWZmaWNpZW50LlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVGhyZWVEZWVUb3VjaCwgVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uLCBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvdGhyZWUtZGVlLXRvdWNoL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB0aHJlZURlZVRvdWNoOiBUaHJlZURlZVRvdWNoKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2guaXNBdmFpbGFibGUoKS50aGVuKGlzQXZhaWxhYmxlID0+IGNvbnNvbGUubG9nKCczRCBUb3VjaCBhdmFpbGFibGU/ICcgKyBpc0F2YWlsYWJsZSkpO1xuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC53YXRjaEZvcmNlVG91Y2hlcygpXG4gKiAgIC5zdWJzY3JpYmUoXG4gKiAgICAgKGRhdGE6IFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoKSA9PiB7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggJScgKyBkYXRhLmZvcmNlKTtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdGb3JjZSB0b3VjaCB0aW1lc3RhbXA6ICcgKyBkYXRhLnRpbWVzdGFtcCk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggeDogJyArIGRhdGEueCk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggeTogJyArIGRhdGEueSk7XG4gKiAgICAgfVxuICogICApO1xuICpcbiAqXG4gKiBsZXQgYWN0aW9uczogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uW10gPSBbXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnY2hlY2tpbicsXG4gKiAgICAgdGl0bGU6ICdDaGVjayBpbicsXG4gKiAgICAgc3VidGl0bGU6ICdRdWlja2x5IGNoZWNrIGluJyxcbiAqICAgICBpY29uVHlwZTogJ0NvbXBvc2UnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnc2hhcmUnLFxuICogICAgIHRpdGxlOiAnU2hhcmUnLFxuICogICAgIHN1YnRpdGxlOiAnU2hhcmUgbGlrZSB5b3UgY2FyZScsXG4gKiAgICAgaWNvblR5cGU6ICdTaGFyZSdcbiAqICAgfSxcbiAqICAge1xuICogICAgIHR5cGU6ICdzZWFyY2gnLFxuICogICAgIHRpdGxlOiAnU2VhcmNoJyxcbiAqICAgICBpY29uVHlwZTogJ1NlYXJjaCdcbiAqICAgfSxcbiAqICAge1xuICogICAgIHRpdGxlOiAnU2hvdyBmYXZvcml0ZXMnLFxuICogICAgIGljb25UZW1wbGF0ZTogJ0hlYXJ0VGVtcGxhdGUnXG4gKiAgIH1cbiAqIF07XG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLmNvbmZpZ3VyZVF1aWNrQWN0aW9ucyhhY3Rpb25zKTtcbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2gub25Ib21lSWNvblByZXNzZWQoKS5zdWJzY3JpYmUoXG4gKiAgKHBheWxvYWQpID0+IHtcbiAqICAgIC8vIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdGhlIGJ1dHRvbiB5b3UgcHJlc2VkXG4gKiAgICBjb25zb2xlLmxvZygnUHJlc3NlZCB0aGUgJHtwYXlsb2FkLnRpdGxlfSBidXR0b24nKVxuICogICAgY29uc29sZS5sb2cocGF5bG9hZC50eXBlKVxuICpcbiAqICB9XG4gKiApXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb25cbiAqIFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnVGhyZWVEZWVUb3VjaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLTNkdG91Y2gnLFxuICBwbHVnaW5SZWY6ICdUaHJlZURlZVRvdWNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaHJlZURlZVRvdWNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogWW91IG5lZWQgYW4gaVBob25lIDZTIG9yIHNvbWUgZnV0dXJlIHRlY2ggdG8gdXNlIHRoZSBmZWF0dXJlcyBvZiB0aGlzIHBsdWdpbiwgc28geW91IGNhbiBjaGVjayBhdCBydW50aW1lIGlmIHRoZSB1c2VyJ3MgZGV2aWNlIGlzIHN1cHBvcnRlZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGF2YWlsYWJsZSBvciBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZ2V0IGEgbm90aWZpY2F0aW9uIHdoZW4gdGhlIHVzZXIgZm9yY2UgdG91Y2hlcyB0aGUgd2Vidmlldy4gVGhlIHBsdWdpbiBkZWZpbmVzIGEgRm9yY2UgVG91Y2ggd2hlbiBhdCBsZWFzdCA3NSUgb2YgdGhlIG1heGltdW0gZm9yY2UgaXMgYXBwbGllZCB0byB0aGUgc2NyZWVuLiBZb3VyIGFwcCB3aWxsIHJlY2VpdmUgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMsIHNvIHlvdSBoYXZlIHRvIGZpZ3VyZSBvdXQgd2hpY2ggVUkgZWxlbWVudCB3YXMgdG91Y2hlZC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8VGhyZWVEZWVUb3VjaEZvcmNlVG91Y2g+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBzZW5kcyBhIGBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaGAgb2JqZWN0XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgd2F0Y2hGb3JjZVRvdWNoZXMoKTogT2JzZXJ2YWJsZTxUaHJlZURlZVRvdWNoRm9yY2VUb3VjaD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXR1cCB0aGUgM0QtdG91Y2ggYWN0aW9ucywgdGFrZXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgKG9wdGlvbmFsKSBBIHR5cGUgdGhhdCBjYW4gYmUgdXNlZCBgb25Ib21lSWNvblByZXNzZWRgIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSBUaXRsZSBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnRpdGxlIChvcHRpb25hbCkgQSBzaG9ydCBkZXNjcmlwdGlvbiBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UeXBlIChvcHRpb25hbCkgQ2hvb3NlIGJldHdlZW4gUHJvaGliaXQsIENvbnRhY3QsIEhvbWUsIE1hcmtMb2NhdGlvbiwgRmF2b3JpdGUsIExvdmUsIENsb3VkLCBJbnZpdGF0aW9uLCBDb25maXJtYXRpb24sIE1haWwsIE1lc3NhZ2UsIERhdGUsIFRpbWUsIENhcHR1cmVQaG90bywgQ2FwdHVyZVZpZGVvLCBUYXNrLCBUYXNrQ29tcGxldGVkLCBBbGFybSwgQm9va21hcmssIFNodWZmbGUsIEF1ZGlvLCBVcGRhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UZW1wbGF0ZSAob3B0aW9uYWwpIENhbiBiZSB1c2VkIHRvIHByb3ZpZGUgeW91ciBvd24gaWNvblxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGNvbmZpZ3VyZVF1aWNrQWN0aW9ucyhxdWlja0FjdGlvbnM6IFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbltdKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBXaGVuIGEgaG9tZSBpY29uIGlzIHByZXNzZWQsIHlvdXIgYXBwIGxhdW5jaGVzIGFuZCB0aGlzIEpTIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIHlvdSB3aGVuIGhlIHVzZXIgcHJlc3NlcyBvbiB0aGUgaG9tZSBzY3JlZW4gaWNvblxuICAgKi9cbiAgQENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlKClcbiAgb25Ib21lSWNvblByZXNzZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIExpbmsgUHJldmlldy5cbiAgICogVUlXZWJWaWV3IGFuZCBXS1dlYlZpZXcgKHRoZSB3ZWJ2aWV3cyBwb3dlcmluZyBDb3Jkb3ZhIGFwcHMpIGRvbid0IGFsbG93IHRoZSBmYW5jeSBuZXcgbGluayBwcmV2aWV3IGZlYXR1cmUgb2YgaU9TOS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBlbmFibGVMaW5rUHJldmlldygpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIERpc2FibGVkIHRoZSBsaW5rIHByZXZpZXcgZmVhdHVyZSwgaWYgZW5hYmxlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBkaXNhYmxlTGlua1ByZXZpZXcoKTogdm9pZCB7fVxufVxuIl19