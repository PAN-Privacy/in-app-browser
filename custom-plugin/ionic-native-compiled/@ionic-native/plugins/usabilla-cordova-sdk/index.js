var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var UsabillaOriginal = /** @class */ (function (_super) {
    __extends(UsabillaOriginal, _super);
    function UsabillaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UsabillaOriginal.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.pluginName = "usabilla-cordova";
    UsabillaOriginal.plugin = "usabilla-cordova";
    UsabillaOriginal.pluginRef = "Usabilla";
    UsabillaOriginal.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    UsabillaOriginal.platforms = ["Android", "iOS"];
    return UsabillaOriginal;
}(IonicNativePlugin));
var Usabilla = new UsabillaOriginal();
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3VzYWJpbGxhLWNvcmRvdmEtc2RrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEMUMsNEJBQWlCOzs7O0lBWTdDLDZCQUFVLGFBQUMsS0FBYSxFQUFFLFVBQWU7SUFjekMsbUNBQWdCLGFBQUMsTUFBYztJQWMvQiw0REFBeUMsYUFBQyxNQUFjO0lBY3hELDRCQUFTLGFBQUMsT0FBZTtJQWN6QixvQ0FBaUI7SUFjakIsMEJBQU87SUFhUCxzQ0FBbUI7SUFlbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7OzttQkF6S2xEO0VBMkQ4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzYWJpbGxhUmVzdWx0IHtcbiAgY29tcGxldGVkOiBib29sZWFuIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFViQ2FtcGFpZ25SZXN1bHQge1xuICBjb21wbGV0ZWQ6IHtcbiAgICByZXN1bHQ6IFViUmVzdWx0O1xuICAgIGlzUmVkaXJlY3RUb0FwcFN0b3JlRW5hYmxlZD86IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVWJSZXN1bHQge1xuICByYXRpbmc6IG51bWJlcjtcbiAgYWJhbmRvbmVkUGFnZUluZGV4OiBudW1iZXI7XG4gIHNlbnQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgVXNhYmlsbGFcbiAqIEBkZXNjcmlwdGlvblxuICogVXNhYmlsbGEgU0RLIGlzIGRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgdG8gY29sbGVjdCBmZWVkYmFjayBmcm9tIHlvdXIgdXNlcnMgd2l0aCBncmVhdCBlYXNlIGFuZCBmbGV4aWJpbGl0eSB0aHJvdWdoIHlvdXIgbW9iaWxlIGFwcGxpY2F0aW9uLlxuICogVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgbGlicmFyeSBpbnRlZ3JhdGlvbiBzdGVwcyBmb3IgeW91ciBDb3Jkb3ZhIHByb2plY3QuXG4gKlxuICogRm9yIG1vcmUgaW5mbyBzZWUgW0NvcmRvdmEgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YSlcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFVzYWJpbGxhIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS91c2FiaWxsYS1jb3Jkb3ZhLXNkay9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzYWJpbGxhOiBVc2FiaWxsYSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqICB0aGlzLnVzYWJpbGxhLmluaXRpYWxpemUoXG4gKiAgICBhcHBJRDogJzx5b3VyX2FwcGxpY2F0aW9uX2lkPicsXG4gKiAgICBjdXN0b21fdmFyczoge1xuICogICAgICBcImtleVwiOiBcInZhbHVlXCJcbiAqICAgIH0pO1xuICpcbiAqICB0aGlzLnVzYWJpbGxhLmxvYWRGZWVkYmFja0Zvcm0oXG4gKiAgICBmb3JtSUQgOiAnPHlvdXJfZm9ybV9pZD4nXG4gKiAgICApO1xuICpcbiAqIGBgYFxuICovXG5cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAndXNhYmlsbGEtY29yZG92YScsXG4gIHBsdWdpbjogJ3VzYWJpbGxhLWNvcmRvdmEnLFxuICBwbHVnaW5SZWY6ICdVc2FiaWxsYScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdXNhYmlsbGEvdXNhYmlsbGEtdTRhLWNvcmRvdmEnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNhYmlsbGEgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBVc2FiaWxsYSBzZGsgZm9yIGNhcHR1cmluZyBmZWVkYmFja3MuXG4gICAqXG4gICAqIEBuYW1lIGluaXRpYWxpemVcbiAgICogQHBhcmFtIHthcHBJZH0gQVBQX0lEIHVuaXF1ZSBhcHAgaWQgdG8gaW5pdGlhbGl6ZVxuICAgKiBAcGFyYW0ge2N1c3RvbVZhcnN9IENVU1RPTV9WQVJJQUJMRVMgZm9yIHRhcmdldCBiYXNlZCBldmVudCB0cmlnZ2VyXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGluaXRpYWxpemUoYXBwSWQ6IHN0cmluZywgY3VzdG9tVmFyczogYW55KTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIGJhc2VkIG9uIHVuaXF1ZSBmb3JtIGlkIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGxvYWRGZWVkYmFja0Zvcm0oZm9ybUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIHdpdGggY3VycmVudCBzY3JlZW4ncyBzbmFwc2hvdCBhbmQgYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVdpdGhDdXJyZW50Vmlld1NjcmVlbnNob3RcbiAgICogQHBhcmFtIHtmb3JtSWR9IEZPUk1fSUQgdG8gZGlzcGxheSBGZWVkYmFjayBmb3JtIGZvclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdChmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIENhbXBhaWduIGJhbm5lciB0YXJnZXR0ZWQgYmFzZWQgb24gc3BlY2lmaWMgZXZlbnQgYW5kIHZhcmlhYmxlcywgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBzZW5kRXZlbnRcbiAgICogQHBhcmFtIHtldmVudElkfSBFVkVOVF9JRCB0byBkaXNwbGF5IENhbXBhaWduIGJhbm5lciBmb3JcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgc2VuZEV2ZW50KGV2ZW50SWQ6IHN0cmluZyk6IFByb21pc2U8VWJDYW1wYWlnblJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBDYW1wYWlnbiBmb3IgbmV4dCB0cmlnZ2VyLlxuICAgKlxuICAgKiBAbmFtZSByZXNldENhbXBhaWduRGF0YVxuICAgKlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICByZXNldENhbXBhaWduRGF0YSgpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc21pc3Mgb3IgcmVtb3ZlcyB0aGUgRm9ybS9CYW5uZXIgZnJvbSB0aGUgdmlldy5cbiAgICpcbiAgICogQG5hbWUgZGlzbWlzc1xuICAgKlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBkaXNtaXNzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRlZmF1bHQgbWFza2luZyBzdHJhdGVneSB0byBiZSBhcHBsaWVkIGZvciBkYXRhIG1hc2tpbmcuXG4gICAqIEBuYW1lIGdldERlZmF1bHREYXRhTWFza3NcbiAgICpcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgZ2V0RGVmYXVsdERhdGFNYXNrcygpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBtYXNraW5nIHN0cmF0ZWd5IGZvciBkYXRhIG1hc2tpbmcuXG4gICAqXG4gICAqIEBuYW1lIHNldERhdGFNYXNraW5nXG4gICAqIEBwYXJhbSB7bWFza3N9IEZvcm1hdCByZWdleCB0byBiZSBhcHBsaWVkIGZvciBtYXNraW5nLlxuICAgKiBAcGFyYW0ge21hc2tDaGFyYWN0ZXJ9IENoYXJhY3RlciB0byBiZSB1c2VkIGFzIGEgbWFza2luZyBjaGFyYWN0ZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgc2V0RGF0YU1hc2tpbmcobWFza3M6IGFueSwgbWFza0NoYXJhY3Rlcjogc3RyaW5nKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19