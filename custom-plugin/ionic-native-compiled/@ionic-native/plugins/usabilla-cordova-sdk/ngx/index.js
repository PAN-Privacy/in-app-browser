import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Usabilla = /** @class */ (function (_super) {
    __extends(Usabilla, _super);
    function Usabilla() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Usabilla.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.pluginName = "usabilla-cordova";
    Usabilla.plugin = "usabilla-cordova";
    Usabilla.pluginRef = "Usabilla";
    Usabilla.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    Usabilla.platforms = ["Android", "iOS"];
    Usabilla.decorators = [
        { type: Injectable }
    ];
    return Usabilla;
}(IonicNativePlugin));
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3VzYWJpbGxhLWNvcmRvdmEtc2RrL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEMUMsNEJBQWlCOzs7O0lBWTdDLDZCQUFVLGFBQUMsS0FBYSxFQUFFLFVBQWU7SUFjekMsbUNBQWdCLGFBQUMsTUFBYztJQWMvQiw0REFBeUMsYUFBQyxNQUFjO0lBY3hELDRCQUFTLGFBQUMsT0FBZTtJQWN6QixvQ0FBaUI7SUFjakIsMEJBQU87SUFhUCxzQ0FBbUI7SUFlbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7Ozs7Z0JBL0dqRCxVQUFVOzttQkExRFg7RUEyRDhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNhYmlsbGFSZXN1bHQge1xuICBjb21wbGV0ZWQ6IGJvb2xlYW4gfCBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVWJDYW1wYWlnblJlc3VsdCB7XG4gIGNvbXBsZXRlZDoge1xuICAgIHJlc3VsdDogVWJSZXN1bHQ7XG4gICAgaXNSZWRpcmVjdFRvQXBwU3RvcmVFbmFibGVkPzogYm9vbGVhbjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVYlJlc3VsdCB7XG4gIHJhdGluZzogbnVtYmVyO1xuICBhYmFuZG9uZWRQYWdlSW5kZXg6IG51bWJlcjtcbiAgc2VudDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBVc2FiaWxsYVxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2FiaWxsYSBTREsgaXMgZGVzaWduZWQgYW5kIGRldmVsb3BlZCB0byBjb2xsZWN0IGZlZWRiYWNrIGZyb20geW91ciB1c2VycyB3aXRoIGdyZWF0IGVhc2UgYW5kIGZsZXhpYmlsaXR5IHRocm91Z2ggeW91ciBtb2JpbGUgYXBwbGljYXRpb24uXG4gKiBUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBsaWJyYXJ5IGludGVncmF0aW9uIHN0ZXBzIGZvciB5b3VyIENvcmRvdmEgcHJvamVjdC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvIHNlZSBbQ29yZG92YSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3VzYWJpbGxhL3VzYWJpbGxhLXU0YS1jb3Jkb3ZhKVxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVXNhYmlsbGEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3VzYWJpbGxhLWNvcmRvdmEtc2RrL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNhYmlsbGE6IFVzYWJpbGxhKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogIHRoaXMudXNhYmlsbGEuaW5pdGlhbGl6ZShcbiAqICAgIGFwcElEOiAnPHlvdXJfYXBwbGljYXRpb25faWQ+JyxcbiAqICAgIGN1c3RvbV92YXJzOiB7XG4gKiAgICAgIFwia2V5XCI6IFwidmFsdWVcIlxuICogICAgfSk7XG4gKlxuICogIHRoaXMudXNhYmlsbGEubG9hZEZlZWRiYWNrRm9ybShcbiAqICAgIGZvcm1JRCA6ICc8eW91cl9mb3JtX2lkPidcbiAqICAgICk7XG4gKlxuICogYGBgXG4gKi9cblxuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcbiAgcGx1Z2luOiAndXNhYmlsbGEtY29yZG92YScsXG4gIHBsdWdpblJlZjogJ1VzYWJpbGxhJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2FiaWxsYSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIFVzYWJpbGxhIHNkayBmb3IgY2FwdHVyaW5nIGZlZWRiYWNrcy5cbiAgICpcbiAgICogQG5hbWUgaW5pdGlhbGl6ZVxuICAgKiBAcGFyYW0ge2FwcElkfSBBUFBfSUQgdW5pcXVlIGFwcCBpZCB0byBpbml0aWFsaXplXG4gICAqIEBwYXJhbSB7Y3VzdG9tVmFyc30gQ1VTVE9NX1ZBUklBQkxFUyBmb3IgdGFyZ2V0IGJhc2VkIGV2ZW50IHRyaWdnZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgaW5pdGlhbGl6ZShhcHBJZDogc3RyaW5nLCBjdXN0b21WYXJzOiBhbnkpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgbG9hZEZlZWRiYWNrRm9ybShmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gd2l0aCBjdXJyZW50IHNjcmVlbidzIHNuYXBzaG90IGFuZCBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCwgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdFxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90KGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgQ2FtcGFpZ24gYmFubmVyIHRhcmdldHRlZCBiYXNlZCBvbiBzcGVjaWZpYyBldmVudCBhbmQgdmFyaWFibGVzLCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBuYW1lIHNlbmRFdmVudFxuICAgKiBAcGFyYW0ge2V2ZW50SWR9IEVWRU5UX0lEIHRvIGRpc3BsYXkgQ2FtcGFpZ24gYmFubmVyIGZvclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBzZW5kRXZlbnQoZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxVYkNhbXBhaWduUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IENhbXBhaWduIGZvciBuZXh0IHRyaWdnZXIuXG4gICAqXG4gICAqIEBuYW1lIHJlc2V0Q2FtcGFpZ25EYXRhXG4gICAqXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHJlc2V0Q2FtcGFpZ25EYXRhKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzbWlzcyBvciByZW1vdmVzIHRoZSBGb3JtL0Jhbm5lciBmcm9tIHRoZSB2aWV3LlxuICAgKlxuICAgKiBAbmFtZSBkaXNtaXNzXG4gICAqXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGRpc21pc3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGVmYXVsdCBtYXNraW5nIHN0cmF0ZWd5IHRvIGJlIGFwcGxpZWQgZm9yIGRhdGEgbWFza2luZy5cbiAgICogQG5hbWUgZ2V0RGVmYXVsdERhdGFNYXNrc1xuICAgKlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBnZXREZWZhdWx0RGF0YU1hc2tzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IG1hc2tpbmcgc3RyYXRlZ3kgZm9yIGRhdGEgbWFza2luZy5cbiAgICpcbiAgICogQG5hbWUgc2V0RGF0YU1hc2tpbmdcbiAgICogQHBhcmFtIHttYXNrc30gRm9ybWF0IHJlZ2V4IHRvIGJlIGFwcGxpZWQgZm9yIG1hc2tpbmcuXG4gICAqIEBwYXJhbSB7bWFza0NoYXJhY3Rlcn0gQ2hhcmFjdGVyIHRvIGJlIHVzZWQgYXMgYSBtYXNraW5nIGNoYXJhY3RlclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBzZXREYXRhTWFza2luZyhtYXNrczogYW55LCBtYXNrQ2hhcmFjdGVyOiBzdHJpbmcpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=