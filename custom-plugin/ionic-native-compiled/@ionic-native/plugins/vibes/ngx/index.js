import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Vibes = /** @class */ (function (_super) {
    __extends(Vibes, _super);
    function Vibes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Vibes.prototype.registerDevice = function () { return cordova(this, "registerDevice", {}, arguments); };
    Vibes.prototype.unregisterDevice = function () { return cordova(this, "unregisterDevice", {}, arguments); };
    Vibes.prototype.associatePerson = function (externalPersonId) { return cordova(this, "associatePerson", {}, arguments); };
    Vibes.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    Vibes.prototype.unregisterPush = function () { return cordova(this, "unregisterPush", {}, arguments); };
    Vibes.prototype.getVibesDeviceInfo = function () { return cordova(this, "getVibesDeviceInfo", {}, arguments); };
    Vibes.prototype.getPerson = function () { return cordova(this, "getPerson", {}, arguments); };
    Vibes.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "observable": true }, arguments); };
    Vibes.prototype.fetchInboxMessages = function () { return cordova(this, "fetchInboxMessages", {}, arguments); };
    Vibes.prototype.fetchInboxMessage = function (message_uid) { return cordova(this, "fetchInboxMessage", {}, arguments); };
    Vibes.prototype.expireInboxMessage = function (message_uid, date) { return cordova(this, "expireInboxMessage", {}, arguments); };
    Vibes.prototype.markInboxMessageAsRead = function (message_uid) { return cordova(this, "markInboxMessageAsRead", {}, arguments); };
    Vibes.prototype.onInboxMessageOpen = function (inbox_message_stringified) { return cordova(this, "onInboxMessageOpen", {}, arguments); };
    Vibes.pluginName = "Vibes";
    Vibes.plugin = "vibes-cordova";
    Vibes.pluginRef = "Vibes";
    Vibes.repo = "https://github.com/vibes/vibes-cordova.git";
    Vibes.install = "ionic cordova plugin add vibes-cordova --variable VIBES_APP_ID=MY_APP_ID --variable VIBES_API_URL=MY_ENVIRONMENT_URL";
    Vibes.installVariables = ["VIBES_APP_ID", "VIBES_API_URL"];
    Vibes.platforms = ["Android", "iOS"];
    Vibes.decorators = [
        { type: Injectable }
    ];
    return Vibes;
}(IonicNativePlugin));
export { Vibes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpYmVzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBd0VQLHlCQUFpQjs7OztJQU8xQyw4QkFBYztJQVVkLGdDQUFnQjtJQVdoQiwrQkFBZSxhQUFDLGdCQUF3QjtJQVV4Qyw0QkFBWTtJQVVaLDhCQUFjO0lBU2Qsa0NBQWtCO0lBVWxCLHlCQUFTO0lBWVQsb0NBQW9CO0lBVXBCLGtDQUFrQjtJQVdsQixpQ0FBaUIsYUFBQyxXQUFtQjtJQVlyQyxrQ0FBa0IsYUFBQyxXQUFtQixFQUFFLElBQVk7SUFXcEQsc0NBQXNCLGFBQUMsV0FBbUI7SUFXMUMsa0NBQWtCLGFBQUMseUJBQWlDOzs7Ozs7Ozs7Z0JBdklyRCxVQUFVOztnQkF6RVg7RUEwRTJCLGlCQUFpQjtTQUEvQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlUmVzcG9uc2Uge1xuICBkZXZpY2VfaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlSW5mb1Jlc3BvbnNlIGV4dGVuZHMgRGV2aWNlUmVzcG9uc2Uge1xuICBwdXNoX3Rva2VuPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcnNvblJlc3BvbnNlIHtcbiAgcGVyc29uX2tleT86IHN0cmluZztcbiAgbWRuPzogc3RyaW5nO1xuICBleHRlcm5hbF9wZXJzb25faWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5ib3hNZXNzYWdlIHtcbiAgY29udGVudD86IHN0cmluZztcbiAgY3JlYXRlZF9hdD86IHN0cmluZztcbiAgZXhwaXJlc19hdD86IHN0cmluZztcbiAgbWVzc2FnZV91aWQ/OiBzdHJpbmc7XG4gIHJlYWQ/OiBib29sZWFuO1xuICBzdWJqZWN0Pzogc3RyaW5nO1xuICBkZXRhaWw/OiBzdHJpbmc7XG4gIGNvbGxhcHNlX2tleT86IHN0cmluZztcbiAgYXBwcmVmZGF0YT86IGFueTtcbiAgaW1hZ2VzPzogYW55O1xuICBpbmJveF9jdXN0b21fZGF0YTogYW55O1xufVxuLyoqXG4gKiBAbmFtZSBWaWJlc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBlbmFibGVzIGludGVncmF0aW9uIHdpdGggdGhlIFZpYmVzIFB1c2ggU0RLIHRvIHlvdXIgQ29yZG92YSBwcm9qZWN0IHdpdGggQW5kcm9pZCBhbmQgaU9TIHN1cHBvcnRlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFZpYmVzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS92aWJlcy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpYmVzOiBWaWJlcykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMudmliZXMucmVnaXN0ZXJEZXZpY2UoKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKGBkZXZpY2UgcmVnaXN0cmF0aW9uIHN1Y2Nlc3M6ICR7cmVzfWApKSAvLyByZXRyaWV2ZSBhbmQgc2F2ZSB0aGUgZGV2aWNlX2lkIGZyb20gYHJlc2AgSlNPTiBvYmplY3RcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKCdFcnJvciByZWdpc3RlcmluZyBkZXZpY2UnLCBlcnJvcikpO1xuICpcbiAqIHRoaXMudmliZXMucmVnaXN0ZXJQdXNoKClcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlZ2lzdGVyaW5nIHB1c2gnLCBlcnJvcikpO1xuICpcbiAqIHRoaXMudmliZXMuZ2V0VmliZXNEZXZpY2VJbmZvKClcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKSAvLyByZXRyaWV2ZSB0aGUgYGRldmljZV9pZGAgYW5kIGBwdXNoX3Rva2VuYCBmcm9tIHRoZSBKU09OIG9iamVjdFxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgZGV2aWNlaW5mbycsIGVycm9yKSk7XG4gKlxuICogdGhpcy52aWJlcy5mZXRjaEluYm94TWVzc2FnZXMoKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpIC8vIGZldGNoZXMgaW5ib3ggbWVzc2FnZXMgZm9yIHRoaXMgcGVyc29uLlxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGluYm94IG1lc3NhZ2VzIGZvciB0aGlzIHBlcnNvbicsIGVycm9yKSk7XG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdWaWJlcycsXG4gIHBsdWdpbjogJ3ZpYmVzLWNvcmRvdmEnLFxuICBwbHVnaW5SZWY6ICdWaWJlcycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdmliZXMvdmliZXMtY29yZG92YS5naXQnLFxuICBpbnN0YWxsOlxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgdmliZXMtY29yZG92YSAtLXZhcmlhYmxlIFZJQkVTX0FQUF9JRD1NWV9BUFBfSUQgLS12YXJpYWJsZSBWSUJFU19BUElfVVJMPU1ZX0VOVklST05NRU5UX1VSTCcsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnVklCRVNfQVBQX0lEJywgJ1ZJQkVTX0FQSV9VUkwnXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZpYmVzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmVnaXN0ZXIgdGhpcyBkZXZpY2Ugd2l0aCB0aGUgVmliZXMgcGxhdGZvcm1cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxEZXZpY2VSZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyRGV2aWNlKCk6IFByb21pc2U8RGV2aWNlUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciB0aGlzIGRldmljZSB3aXRoIHRoZSBWaWJlcyBwbGF0Zm9ybVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnJlZ2lzdGVyRGV2aWNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NvY2lhdGUgYW4gZXh0ZXJuYWwgSUQgd2l0aCB0aGUgY3VycmVudCBwZXJzb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlcm5hbFBlcnNvbklkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGFzc29jaWF0ZVBlcnNvbihleHRlcm5hbFBlcnNvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgdGhpcyBkZXZpY2UgdG8gcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJQdXNoKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIHRoZSBkZXZpY2UgZnJvbSByZWNlaXZpbmcgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVucmVnaXN0ZXJQdXNoKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogRmV0Y2hlcyBhIERldmljZUluZm9SZXNwb25zZSB3aXRoIGRldGFpbHMgYWJvdXQgdGhlIFZpYmVzIERldmljZSBJRCBhbmQgUHVzaCBUb2tlblxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPERldmljZUluZm9SZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFZpYmVzRGV2aWNlSW5mbygpOiBQcm9taXNlPERldmljZUluZm9SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIHRoZSBQZXJzb25SZXNwb25zZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZXZpY2UgY3VycmVudGx5XG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UGVyc29uUmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRQZXJzb24oKTogUHJvbWlzZTxQZXJzb25SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgdXNlciBvcGVucyBhIG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIG9uTm90aWZpY2F0aW9uT3BlbmVkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuIGFycmF5IG9mIGluYm94IG1lc3NhZ2VzIGZvciB0aGUgcGVyc29uIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxJbmJveE1lc3NhZ2VbXT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZldGNoSW5ib3hNZXNzYWdlcygpOiBQcm9taXNlPEluYm94TWVzc2FnZVtdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYSBzaW5nbGUgaW5ib3ggbWVzc2FnZSBieSBpdCdzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZV91aWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxJbmJveE1lc3NhZ2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmZXRjaEluYm94TWVzc2FnZShtZXNzYWdlX3VpZDogc3RyaW5nKTogUHJvbWlzZTxJbmJveE1lc3NhZ2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTWFya3MgYW4gaW5ib3ggbWVzc2FnZSBhcyBleHBpcmVkIHVzaW5nIG1lc3NhZ2VfdWlkIGFuZCB0aGUgZXhwaXJ5IGRhdGUgc3VwcGxpZWQuIFVzZXMgY3VycmVudCBkYXRlIGlmIG51bGwgb3IgaW52YWxpZCBkYXRlIGlzIHN1cHBsaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZV91aWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IEFuIElTTy04NjAxIGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxJbmJveE1lc3NhZ2U+fSBhbiB1cGRhdGVkIHZlcnNpb24gb2YgdGhlIEluYm94TWVzc2FnZSB3aXRoIGV4cGlyZXNfYXQgZGF0ZSB1cGRhdGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGV4cGlyZUluYm94TWVzc2FnZShtZXNzYWdlX3VpZDogc3RyaW5nLCBkYXRlOiBzdHJpbmcpOiBQcm9taXNlPEluYm94TWVzc2FnZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrcyBhbiBpbmJveCBtZXNzYWdlIGFzIHJlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlX3VpZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEluYm94TWVzc2FnZT59IGFuIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGUgSW5ib3hNZXNzYWdlIHdpdGggcmVhZCBmaWVsZCB1cGRhdGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG1hcmtJbmJveE1lc3NhZ2VBc1JlYWQobWVzc2FnZV91aWQ6IHN0cmluZyk6IFByb21pc2U8SW5ib3hNZXNzYWdlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY29yZHMgYW4gZXZlbnQgZm9yIHdoZW4gdGhlIHVzZXIgb3BlbnMgYW4gaW5ib3ggbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIGluYm94X21lc3NhZ2Vfc3RyaW5naWZpZWQgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgSW5ib3hNZXNzYWdlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG9uSW5ib3hNZXNzYWdlT3BlbihpbmJveF9tZXNzYWdlX3N0cmluZ2lmaWVkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==