import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var WebServer = /** @class */ (function (_super) {
    __extends(WebServer, _super);
    function WebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebServer.prototype.start = function (port) { return cordova(this, "start", { "callbackOrder": "reverse" }, arguments); };
    WebServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebServer.prototype.onRequest = function () { return cordova(this, "onRequest", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    WebServer.prototype.sendResponse = function (requestId, responseObject) { return cordova(this, "sendResponse", {}, arguments); };
    WebServer.pluginName = "WebServer";
    WebServer.plugin = "cordova-plugin-webserver";
    WebServer.pluginRef = "window.webserver";
    WebServer.repo = "https://github.com/bykof/cordova-plugin-webserver.git";
    WebServer.platforms = ["Android", "iOS"];
    WebServer.decorators = [
        { type: Injectable }
    ];
    return WebServer;
}(IonicNativePlugin));
export { WebServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlYi1zZXJ2ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUErREgsNkJBQWlCOzs7O0lBUTlDLHlCQUFLLGFBQUMsSUFBYTtJQVFuQix3QkFBSTtJQWFKLDZCQUFTO0lBV1QsZ0NBQVksYUFBQyxTQUFpQixFQUFFLGNBQXdCOzs7Ozs7O2dCQXpDekQsVUFBVTs7b0JBaEVYO0VBaUUrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIGJvZHk/OiBzdHJpbmc7XG4gIHBhdGg/OiBzdHJpbmc7XG4gIGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdCB7XG4gIHJlcXVlc3RJZDogc3RyaW5nO1xuICBib2R5OiBzdHJpbmc7XG4gIGhlYWRlcnM6IHN0cmluZztcbiAgbWV0aG9kOiAnUE9TVCcgfCAnR0VUJyB8ICdQVVQnIHwgJ1BBVENIJyB8ICdERUxFVEUnO1xuICBwYXRoOiBzdHJpbmc7XG4gIHF1ZXJ5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgV2ViIFNlcnZlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIHN0YXJ0IGEgbG9jYWwgZHluYW1pYyBjb250ZW50IHdlYiBzZXJ2ZXIgZm9yIGFuZHJvaWQgYW5kIGlPUyBkZXZpY2VzLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgV2ViU2VydmVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS93ZWItc2VydmVyL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2ViU2VydmVyOiBXZWJTZXJ2ZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMud2ViU2VydmVyLm9uUmVxdWVzdCgpLnN1YnNjcmliZShkYXRhID0+IHtcbiAqICAgY29uc29sZS5sb2coZGF0YSk7XG4gKiAgIGNvbnN0IHJlczogUmVzcG9uc2UgPSB7XG4gKiAgICAgc3RhdHVzOiAyMDAsXG4gKiAgICAgYm9keTogJycsXG4gKiAgICAgaGVhZGVyczoge1xuICogICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnXG4gKiAgICAgfVxuICogICB9O1xuICpcbiAqICAgdGhpcy53ZWJTZXJ2ZXIuc2VuZFJlc3BvbnNlKGRhdGEucmVxdWVzdElkLCByZXMpXG4gKiAgICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKiB9KTtcbiAqXG4gKiB0aGlzLndlYlNlcnZlci5zdGFydCg4MClcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIFJlc3BvbnNlXG4gKiBSZXF1ZXN0XG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnV2ViU2VydmVyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4td2Vic2VydmVyJyxcbiAgcGx1Z2luUmVmOiAnd2luZG93LndlYnNlcnZlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYnlrb2YvY29yZG92YS1wbHVnaW4td2Vic2VydmVyLmdpdCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWJTZXJ2ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIHN0YXJ0IHlvdXIgd2Vic2VydmVyLlxuICAgKiBAcGFyYW0gcG9ydCB7bnVtYmVyfSBQb3J0IG51bWJlciAoZGVmYXVsdCB0byA4MDgwKVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc3RhcnQocG9ydD86IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RvcCB5b3VyIHdlYnNlcnZlci5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBzdHJlYW1zIEhUVFAgcmVxdWVzdHMgdG8gYW4gb2JzZXJ2ZXIuXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8UmVxdWVzdD59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byByZXNvbHZlIGFzIGEgUmVxdWVzdCBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcCcsXG4gIH0pXG4gIG9uUmVxdWVzdCgpOiBPYnNlcnZhYmxlPFJlcXVlc3Q+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYSByZXNwb25zZSB0byBhIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQge3N0cmluZ30gUmVxdWVzdCBJRCB0byByZXNwb25kIHRvXG4gICAqIEBwYXJhbSByZXNwb25zZU9iamVjdCB7UmVzcG9uc2V9IFJlc3BvbnNlIG9iamVjdFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZW5kUmVzcG9uc2UocmVxdWVzdElkOiBzdHJpbmcsIHJlc3BvbnNlT2JqZWN0OiBSZXNwb25zZSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=