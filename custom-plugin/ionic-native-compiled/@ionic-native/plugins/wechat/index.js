var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(IonicNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlY2hhdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFpQzVDLDBCQUFpQjs7OztJQXdCM0MsNEJBQVc7SUE4Qlgsc0JBQUssYUFBQyxNQUFXO0lBYWpCLHFCQUFJLGFBQUMsS0FBVSxFQUFFLEtBQVU7SUF5QjNCLG1DQUFrQixhQUFDLE1BQVc7SUE0QjlCLDZCQUFZLGFBQUMsR0FBVztJQWtCeEIsb0NBQW1CLGFBQUMsTUFBVztJQWtCL0IsZ0NBQWUsYUFBQyxNQUFXOzs7Ozs7OztpQkE5TDdCO0VBa0M0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIFdlY2hhdFxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNvcmRvdmEgcGx1Z2luLCBhIEpTIHZlcnNpb24gb2YgV2VjaGF0IFNES1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgV2VjaGF0IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS93ZWNoYXQvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB3ZWNoYXQ6IFdlY2hhdCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMud2VjaGF0LmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnV2VjaGF0JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4td2VjaGF0JyxcbiAgcGx1Z2luUmVmOiAnV2VjaGF0JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS94dS1saS9jb3Jkb3ZhLXBsdWdpbi13ZWNoYXQuZ2l0JyxcbiAgaW5zdGFsbDogJ2NvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi13ZWNoYXQgLS12YXJpYWJsZSB3ZWNoYXRhcHBpZD1ZT1VSX1dFQ0hBVF9BUFBJRCcsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnd2VjaGF0YXBwaWQnXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdlY2hhdCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgU2NlbmU6IHtcbiAgICBTRVNTSU9OOiAwOyAvLyDogYrlpKnnlYzpnaJcbiAgICBUSU1FTElORTogMTsgLy8g5pyL5Y+L5ZyIXG4gICAgRkFWT1JJVEU6IDI7IC8vIOaUtuiXj1xuICB9O1xuXG4gIFR5cGU6IHtcbiAgICBBUFA6IDE7XG4gICAgRU1PVElPTjogMjtcbiAgICBGSUxFOiAzO1xuICAgIElNQUdFOiA0O1xuICAgIE1VU0lDOiA1O1xuICAgIFZJREVPOiA2O1xuICAgIFdFQlBBR0U6IDc7XG4gIH07XG5cbiAgTWluaToge1xuICAgIFJFTEVBU0U6IDA7IC8vIOato+W8j+eJiFxuICAgIFRFU1Q6IDE7IC8vIOa1i+ivleeJiFxuICAgIFBSRVZJRVc6IDI7IC8vIOS9k+mqjOeJiFxuICB9O1xuXG4gIEBDb3Jkb3ZhKClcbiAgaXNJbnN0YWxsZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hhcmUgYSBtZXNzYWdlIHRvIHdlY2hhdCBhcHBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHRoaXMud2VjaGF0LnNoYXJlKHtcbiAgICogICAgIG1lc3NhZ2U6IHtcbiAgICogICAgICAgIHRpdGxlOiBcIk1lc3NhZ2UgVGl0bGVcIixcbiAgICogICAgICAgIGRlc2NyaXB0aW9uOiBcIk1lc3NhZ2UgRGVzY3JpcHRpb24ob3B0aW9uYWwpXCIsXG4gICAqICAgICAgICBtZWRpYVRhZ05hbWU6IFwiTWVkaWEgVGFnIE5hbWUob3B0aW9uYWwpXCIsXG4gICAqICAgICAgICB0aHVtYjogXCJodHRwOi8vWU9VUl9USFVNQk5BSUxfSU1BR0VcIixcbiAgICogICAgICAgIG1lZGlhOiB7XG4gICAqICAgICAgICAgICAgdHlwZTogV2VjaGF0LlR5cGUuV0VCUEFHRSwgICAvLyB3ZWJwYWdlXG4gICAqICAgICAgICAgICAgd2VicGFnZVVybDogXCJodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0XCIgICAgLy8gd2VicGFnZVxuICAgKiAgICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICBzY2VuZTogdGhpcy53ZWNoYXQuU2NlbmUuVElNRUxJTkUgICAvLyBzaGFyZSB0byBUaW1lbGluZVxuICAgKiB9LnRoZW4oKCkgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZygnc2hhcmUgc3VjY2VzcycpO1xuICAgKiAgICB9KVxuICAgKiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqICAgIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNoYXJlKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZGluZyBhbiBhdXRoIHJlcXVlc3QgdG8gV2VjaGF0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB0aGlzLndlY2hhdC5hdXRoLnRoZW4oKHJlcykgPT4geyBhbGVydChyZXMuY29kZSk7IH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGF1dGgoc2NvcGU6IGFueSwgc3RhdGU6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBwYXltZW50IHJlcXVlc3RcbiAgICpcbiAgICogQGxpbmsgaHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvYXBwLnBocD9jaGFwdGVyPTlfMVxuICAgKiBAZXhhbXBsZVxuICAgKiA8Y29kZT5cbiAgICogdmFyIHBhcmFtcyA9IHtcbiAgICogICAgIG1jaF9pZDogJzEwMDAwMTAwJywgLy8gbWVyY2hhbnQgaWRcbiAgICogICAgIHByZXBheV9pZDogJ3d4MjAxNDExMTAxNjM5NTA3Y2JmNmZmZDhiMDc3OTk1MDg3NCcsIC8vIHByZXBheSBpZCByZXR1cm5lZCBmcm9tIHNlcnZlclxuICAgKiAgICAgbm9uY2U6ICcxYWRkMWEzMGFjODdhYTJkYjcyZjU3YTIzNzVkOGZlYycsIC8vIG5vbmNlIHN0cmluZyByZXR1cm5lZCBmcm9tIHNlcnZlclxuICAgKiAgICAgdGltZXN0YW1wOiAnMTQzOTUzMTM2NCcsIC8vIHRpbWVzdGFtcFxuICAgKiAgICAgc2lnbjogJzBDQjAxNTMzQjhDMUVGMTAzMDY1MTc0RjUwQkNBMDAxJywgLy8gc2lnbmVkIHN0cmluZ1xuICAgKiB9O1xuICAgKiB0aGlzLndlY2hhdC5zZW5kUGF5bWVudFJlcXVlc3QocGFyYW1zKS50aGVuKCgpID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZW5kUGF5bWVudFJlcXVlc3QocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBqdW1wVG9CaXpQcm9maWxlIO+8iOi3s+i9rOWIsOafkOS4quW+ruS/oeWFrOS8l+WPt++8iTIwMTYtMTEtMTEg5rWL6K+V5piv5aSx5pWI55qE77yM5ZunXG4gICAqXG4gICAqIEBsaW5rIGh0dHBzOi8vc2VnbWVudGZhdWx0LmNvbS9hLzExOTAwMDAwMDcyMDQ2MjRcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMzkwNzc5NlxuICAgKiBAZXhhbXBsZVxuICAgKiA8Y29kZT5cbiAgICogdmFyIHBhcmFtcyA9IHtcbiAgICogICAgIGluZm86ICdnaF94eHh4eHh4JywgLy8g5YWs5LyX5biQ5Y+35Y6f5aeLSURcbiAgICogICAgIHR5cGU6ICAnTm9ybWFsJyAvLyDmma7pgJrlj7dcbiAgICogfVxuICAgKiBvclxuICAgKiB2YXIgcGFyYW1zID0ge1xuICAgKiAgICAgaW5mbzogJ2V4dE1zZycsIC8vIOebuOWFs+eahOehrOS7tuS6jOe7tOeggeS4slxuICAgKiAgICAgdHlwZTogICdEZXZpY2UnIC8vIOehrOS7tuWPt1xuICAgKiB9O1xuICAgKiB0aGlzLndlY2hhdC5qdW1wVG9CaXpQcm9maWxlKHBhcmFtcykudGhlbigoKT0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBqdW1wVG9XZWNoYXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2VJbnZvaWNlRnJvbVdYIGV4cTpjaG9vc2UgaW52b2ljZXMgZnJvbSBXZWNoYXQgY2FyZCBsaXN0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiBwYXJhbXM6IHNpZ25UeXBlLCBjYXJkU2lnbiwgbm9uY2VTdHIsIHRpbWVTdGFtcCAgYWxsIHJlcXVpcmVkXG4gICAqIHRoaXMud2VjaGF0LmNob29zZUludm9pY2VGcm9tV1gocGFyYW1zKS50aGVuKCgpID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjaG9vc2VJbnZvaWNlRnJvbVdYKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogb3Blbk1pbmlQcm9ncmFtIGV4cTphcHAgb3BlbnMgd2VjaGF0IG1pbmkgcHJvZ3JhbVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8Y29kZT5cbiAgICogcGFyYW1zOiB1c2VyTmFtZSwgcGF0aCwgbWluaXByb2dyYW1UeXBlICBhbGwgcmVxdWlyZWRcbiAgICogV2VjaGF0Lm9wZW5NaW5pUHJvZ3JhbShwYXJhbXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAqICAgICBhbGVydChkYXRhLmV4dE1zZyk7XG4gICAqIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICogICAgIGFsZXJ0KFwiRmFpbGVkOiBcIiArIHJlYXNvbik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG9wZW5NaW5pUHJvZ3JhbShwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=