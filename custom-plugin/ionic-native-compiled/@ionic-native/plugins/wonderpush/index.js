var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { IonicNativePlugin, cordova, getPromise } from '@ionic-native/core';
var NestedObject = /** @class */ (function () {
    function NestedObject(pluginObj) {
        this.pluginObj = pluginObj;
    }
    NestedObject.prototype.wrap = function (functionName, args) {
        var plugin = WonderPushOriginal.getPlugin();
        var userPreferences = plugin ? plugin.UserPreferences : null;
        if (!plugin || !userPreferences || !userPreferences[functionName]) {
            return getPromise(function (res, rej) {
                rej(new Error('Could not find plugin'));
            });
        }
        return getPromise(function (res, rej) {
            userPreferences[functionName].apply(userPreferences, __spreadArrays(args, [res]));
        });
    };
    return NestedObject;
}());
export { NestedObject };
var UserPreferencesMethods = /** @class */ (function (_super) {
    __extends(UserPreferencesMethods, _super);
    function UserPreferencesMethods() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the default channel id
     * @returns {Promise<string>}
     */
    UserPreferencesMethods.prototype.getDefaultChannelId = function () {
        return this.wrap('getDefaultChannelId', []);
    };
    /**
     * Set the default channel id
     * @param {string} id
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setDefaultChannelId = function (id) {
        return this.wrap('setDefaultChannelId', [id]);
    };
    /**
     * Get a channel group
     * @param {string} groupId
     * @returns {Promise<WonderPushChannelGroup | null>}
     */
    UserPreferencesMethods.prototype.getChannelGroup = function (groupId) {
        return this.wrap('getChannelGroup', [groupId]);
    };
    /**
     * Get a channel
     * @param {string} channelId
     * @returns {Promise<WonderPushChannel | null>}
     */
    UserPreferencesMethods.prototype.getChannel = function (channelId) {
        return this.wrap('getChannel', [channelId]);
    };
    /**
     * Create, update and remove channel existing groups to match the given channel groups
     * @param {WonderPushChannelGroup[]} channelGroups
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannelGroups = function (channelGroups) {
        return this.wrap('setChannelGroups', [channelGroups]);
    };
    /**
     * Create, update and remove channels to match the given channels
     * @param {WonderPushChannel[]} channels
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannels = function (channels) {
        return this.wrap('setChannels', [channels]);
    };
    /**
     * Create or update a channel group
     * @param {WonderPushChannelGroup} channelGroup
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannelGroup = function (channelGroup) {
        return this.wrap('putChannelGroup', [channelGroup]);
    };
    /**
     * Create or update a channel
     * @param {WonderPushChannel} channel
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannel = function (channel) {
        return this.wrap('putChannel', [channel]);
    };
    /**
     * Remove a channel group
     * @param {string} groupId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannelGroup = function (groupId) {
        return this.wrap('removeChannelGroup', [groupId]);
    };
    /**
     * Remove a channel
     * @param {string} channelId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannel = function (channelId) {
        return this.wrap('removeChannel', [channelId]);
    };
    return UserPreferencesMethods;
}(NestedObject));
export { UserPreferencesMethods };
var WonderPushOriginal = /** @class */ (function (_super) {
    __extends(WonderPushOriginal, _super);
    function WonderPushOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.UserPreferences = new UserPreferencesMethods(_this);
        return _this;
    }
    WonderPushOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    WonderPushOriginal.prototype.setLogging = function (enabled) { return cordova(this, "setLogging", {}, arguments); };
    WonderPushOriginal.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    WonderPushOriginal.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    WonderPushOriginal.prototype.getUserId = function () { return cordova(this, "getUserId", {}, arguments); };
    WonderPushOriginal.prototype.getInstallationId = function () { return cordova(this, "getInstallationId", {}, arguments); };
    WonderPushOriginal.prototype.getDeviceId = function () { return cordova(this, "getDeviceId", {}, arguments); };
    WonderPushOriginal.prototype.getPushToken = function () { return cordova(this, "getPushToken", {}, arguments); };
    WonderPushOriginal.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    WonderPushOriginal.prototype.trackEvent = function (type, attributes) { return cordova(this, "trackEvent", {}, arguments); };
    WonderPushOriginal.prototype.addTag = function (tag) { return cordova(this, "addTag", {}, arguments); };
    WonderPushOriginal.prototype.removeTag = function (tag) { return cordova(this, "removeTag", {}, arguments); };
    WonderPushOriginal.prototype.removeAllTags = function () { return cordova(this, "removeAllTags", {}, arguments); };
    WonderPushOriginal.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    WonderPushOriginal.prototype.hasTag = function (tag) { return cordova(this, "hasTag", {}, arguments); };
    WonderPushOriginal.prototype.setProperty = function (field, value) { return cordova(this, "setProperty", {}, arguments); };
    WonderPushOriginal.prototype.unsetProperty = function (field) { return cordova(this, "unsetProperty", {}, arguments); };
    WonderPushOriginal.prototype.addProperty = function (field, value) { return cordova(this, "addProperty", {}, arguments); };
    WonderPushOriginal.prototype.removeProperty = function (field, value) { return cordova(this, "removeProperty", {}, arguments); };
    WonderPushOriginal.prototype.getPropertyValue = function (field) { return cordova(this, "getPropertyValue", {}, arguments); };
    WonderPushOriginal.prototype.getPropertyValues = function (field) { return cordova(this, "getPropertyValues", {}, arguments); };
    WonderPushOriginal.prototype.getProperties = function () { return cordova(this, "getProperties", {}, arguments); };
    WonderPushOriginal.prototype.putProperties = function (properties) { return cordova(this, "putProperties", {}, arguments); };
    WonderPushOriginal.prototype.subscribeToNotifications = function () { return cordova(this, "subscribeToNotifications", {}, arguments); };
    WonderPushOriginal.prototype.isSubscribedToNotifications = function () { return cordova(this, "isSubscribedToNotifications", {}, arguments); };
    WonderPushOriginal.prototype.unsubscribeFromNotifications = function () { return cordova(this, "unsubscribeFromNotifications", {}, arguments); };
    WonderPushOriginal.prototype.getUserConsent = function () { return cordova(this, "getUserConsent", {}, arguments); };
    WonderPushOriginal.prototype.setUserConsent = function (consent) { return cordova(this, "setUserConsent", {}, arguments); };
    WonderPushOriginal.prototype.clearAllData = function () { return cordova(this, "clearAllData", {}, arguments); };
    WonderPushOriginal.prototype.clearEventsHistory = function () { return cordova(this, "clearEventsHistory", {}, arguments); };
    WonderPushOriginal.prototype.clearPreferences = function () { return cordova(this, "clearPreferences", {}, arguments); };
    WonderPushOriginal.prototype.downloadAllData = function () { return cordova(this, "downloadAllData", {}, arguments); };
    WonderPushOriginal.pluginName = "WonderPush";
    WonderPushOriginal.plugin = "wonderpush-cordova-sdk";
    WonderPushOriginal.pluginRef = "WonderPush";
    WonderPushOriginal.repo = "https://github.com/wonderpush/wonderpush-cordova-sdk";
    WonderPushOriginal.install = "ionic cordova plugin add wonderpush-cordova-sdk --variable CLIENT_ID=YOUR_CLIENT_ID --variable CLIENT_SECRET=YOUR_CLIENT_SECRET ";
    WonderPushOriginal.installVariables = ["CLIENT_ID", "CLIENT_SECRET"];
    WonderPushOriginal.platforms = ["Android", "iOS"];
    return WonderPushOriginal;
}(IonicNativePlugin));
var WonderPush = new WonderPushOriginal();
export { WonderPush };
//# sourceMappingURL=data:application/json;base64,