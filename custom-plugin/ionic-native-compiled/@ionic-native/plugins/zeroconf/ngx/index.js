import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Zeroconf = /** @class */ (function (_super) {
    __extends(Zeroconf, _super);
    function Zeroconf() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeroconf.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    Zeroconf.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    Zeroconf.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    Zeroconf.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    Zeroconf.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    Zeroconf.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    Zeroconf.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Zeroconf.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    Zeroconf.pluginName = "Zeroconf";
    Zeroconf.plugin = "cordova-plugin-zeroconf";
    Zeroconf.pluginRef = "cordova.plugins.zeroconf";
    Zeroconf.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    Zeroconf.platforms = ["Android", "iOS"];
    Zeroconf.decorators = [
        { type: Injectable }
    ];
    return Zeroconf;
}(IonicNativePlugin));
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3plcm9jb25mL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkRKLDRCQUFpQjs7OztJQU03Qyw4QkFBVztJQWNYLDJCQUFRLGFBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFNBQWM7SUFZakYsNkJBQVUsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7SUFTckQsdUJBQUk7SUFlSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBV2xDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFTcEMsd0JBQUs7SUFTTCx5QkFBTTs7Ozs7OztnQkF0RlAsVUFBVTs7bUJBNURYO0VBNkQ4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mU2VydmljZSB7XG4gIGRvbWFpbjogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xuICBob3N0bmFtZTogc3RyaW5nO1xuICBpcHY0QWRkcmVzc2VzOiBzdHJpbmdbXTtcbiAgaXB2NkFkZHJlc3Nlczogc3RyaW5nW107XG4gIHR4dFJlY29yZDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mUmVzdWx0IHtcbiAgYWN0aW9uOiAncmVnaXN0ZXJlZCcgfCAnYWRkZWQnIHwgJ3JlbW92ZWQnIHwgJ3Jlc29sdmVkJztcbiAgc2VydmljZTogWmVyb2NvbmZTZXJ2aWNlO1xufVxuXG4vKipcbiAqIEBuYW1lIFplcm9jb25mXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gYnJvd3NlIGFuZCBwdWJsaXNoIFplcm9jb25mL0JvbmpvdXIvbUROUyBzZXJ2aWNlcy5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgWmVyb2NvbmYgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3plcm9jb25mL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB6ZXJvY29uZjogWmVyb2NvbmYpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIHdhdGNoIGZvciBzZXJ2aWNlcyBvZiBhIHNwZWNpZmllZCB0eXBlXG4gKiB0aGlzLnplcm9jb25mLndhdGNoKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAqICAgaWYgKHJlc3VsdC5hY3Rpb24gPT0gJ2FkZGVkJykge1xuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIGFkZGVkJywgcmVzdWx0LnNlcnZpY2UpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHJlbW92ZWQnLCByZXN1bHQuc2VydmljZSk7XG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIC8vIHB1Ymxpc2ggYSB6ZXJvY29uZiBzZXJ2aWNlIG9mIHlvdXIgb3duXG4gKiB0aGlzLnplcm9jb25mLnJlZ2lzdGVyKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nLCAnQmVjdmVydFxcJ3MgaVBhZCcsIDgwLCB7XG4gKiAgICdmb28nOiAnYmFyJ1xuICogfSkudGhlbihyZXN1bHQgPT4ge1xuICogICBjb25zb2xlLmxvZygnU2VydmljZSByZWdpc3RlcmVkJywgcmVzdWx0LnNlcnZpY2UpO1xuICogfSk7XG4gKlxuICpcbiAqIC8vIHVucmVnaXN0ZXIgeW91ciBzZXJ2aWNlXG4gKiB0aGlzLnplcm9jb25mLnVucmVnaXN0ZXIoJ19odHRwLl90Y3AuJywgJ2xvY2FsLicsICdCZWN2ZXJ0XFwncyBpUGFkJyk7XG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdaZXJvY29uZicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnplcm9jb25mJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iZWN2ZXJ0L2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFplcm9jb25mIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGlzIGRldmljZSdzIGhvc3RuYW1lLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEhvc3RuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyBhIG5ldyBzZXJ2aWNlLlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IExvY2FsIHBvcnQgb24gd2hpY2ggdGhlIHNlcnZpY2UgcnVucy5cbiAgICogQHBhcmFtIHR4dFJlY29yZCB7YW55fSBBcmJpdHJhcnkga2V5L3ZhbHVlIHBhaXJzIGRlc2NyaWJpbmcgdGhlIHNlcnZpY2UuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8WmVyb2NvbmZSZXN1bHQ+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlZ2lzdGVyZWQgc2VydmljZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXIodHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZywgbmFtZTogc3RyaW5nLCBwb3J0OiBudW1iZXIsIHR4dFJlY29yZDogYW55KTogUHJvbWlzZTxaZXJvY29uZlJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVycyBhIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IFVucXVhbGlmaWVkIHNlcnZpY2UgaW5zdGFuY2UgbmFtZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWdpc3Rlcih0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYWxsIHB1Ymxpc2hlZCBzZXJ2aWNlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8WmVyb2NvbmZSZXN1bHQ+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBvZiBlYWNoIHNlcnZpY2UgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICd1bndhdGNoJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxuICB9KVxuICB3YXRjaCh0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxaZXJvY29uZlJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB3YXRjaGluZyBmb3Igc2VydmljZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlLlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bndhdGNoKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzZXJ2aWNlIGJyb3dzZXIgYW5kIHN0b3BzIHdhdGNoaW5nLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmUtaW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiB0byBjbGVhbiBzZXJ2aWNlICYgYnJvd3NlciBzdGF0ZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVJbml0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogRmFtaWx5IG9mIGFkZHJlc3NlcyB0byByZWdpc3RlcjogaXB2NCwgaXB2NiBvciBhbnkuXG4gICAqL1xuICByZWdpc3RlckFkZHJlc3NGYW1pbHk6ICdpcHY0JyB8ICdpcHY2JyB8ICdhbnknO1xuICAvKipcbiAgICogRmFtaWx5IG9mIGFkZHJlc3NlcyB0byB3YXRjaCBmb3I6IGlwdjQsIGlwdjYgb3IgYW55LlxuICAgKi9cbiAgd2F0Y2hBZGRyZXNzRmFtaWx5OiAnaXB2NCcgfCAnaXB2NicgfCAnYW55Jztcbn1cbiJdfQ==